
cleaningRobotf4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a658  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0800a7e8  0800a7e8  0001a7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9e0  0800a9e0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9e0  0800a9e0  0001a9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9e8  0800a9e8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9e8  0800a9e8  0001a9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9ec  0800a9ec  0001a9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a9f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cec  20000078  0800aa68  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d64  0800aa68  00024d64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ae0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000451d  00000000  00000000  00042b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  000470a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018c0  00000000  00000000  00048b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004ca3  00000000  00000000  0004a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db36  00000000  00000000  0004f07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db174  00000000  00000000  0006cbb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00147d25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007434  00000000  00000000  00147d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a7d0 	.word	0x0800a7d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800a7d0 	.word	0x0800a7d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96e 	b.w	8000db0 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468c      	mov	ip, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f040 8083 	bne.w	8000c02 <__udivmoddi4+0x116>
 8000afc:	428a      	cmp	r2, r1
 8000afe:	4617      	mov	r7, r2
 8000b00:	d947      	bls.n	8000b92 <__udivmoddi4+0xa6>
 8000b02:	fab2 f282 	clz	r2, r2
 8000b06:	b142      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b08:	f1c2 0020 	rsb	r0, r2, #32
 8000b0c:	fa24 f000 	lsr.w	r0, r4, r0
 8000b10:	4091      	lsls	r1, r2
 8000b12:	4097      	lsls	r7, r2
 8000b14:	ea40 0c01 	orr.w	ip, r0, r1
 8000b18:	4094      	lsls	r4, r2
 8000b1a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b1e:	0c23      	lsrs	r3, r4, #16
 8000b20:	fbbc f6f8 	udiv	r6, ip, r8
 8000b24:	fa1f fe87 	uxth.w	lr, r7
 8000b28:	fb08 c116 	mls	r1, r8, r6, ip
 8000b2c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b30:	fb06 f10e 	mul.w	r1, r6, lr
 8000b34:	4299      	cmp	r1, r3
 8000b36:	d909      	bls.n	8000b4c <__udivmoddi4+0x60>
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3e:	f080 8119 	bcs.w	8000d74 <__udivmoddi4+0x288>
 8000b42:	4299      	cmp	r1, r3
 8000b44:	f240 8116 	bls.w	8000d74 <__udivmoddi4+0x288>
 8000b48:	3e02      	subs	r6, #2
 8000b4a:	443b      	add	r3, r7
 8000b4c:	1a5b      	subs	r3, r3, r1
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b54:	fb08 3310 	mls	r3, r8, r0, r3
 8000b58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x8c>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b6a:	f080 8105 	bcs.w	8000d78 <__udivmoddi4+0x28c>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f240 8102 	bls.w	8000d78 <__udivmoddi4+0x28c>
 8000b74:	3802      	subs	r0, #2
 8000b76:	443c      	add	r4, r7
 8000b78:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7c:	eba4 040e 	sub.w	r4, r4, lr
 8000b80:	2600      	movs	r6, #0
 8000b82:	b11d      	cbz	r5, 8000b8c <__udivmoddi4+0xa0>
 8000b84:	40d4      	lsrs	r4, r2
 8000b86:	2300      	movs	r3, #0
 8000b88:	e9c5 4300 	strd	r4, r3, [r5]
 8000b8c:	4631      	mov	r1, r6
 8000b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b92:	b902      	cbnz	r2, 8000b96 <__udivmoddi4+0xaa>
 8000b94:	deff      	udf	#255	; 0xff
 8000b96:	fab2 f282 	clz	r2, r2
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	d150      	bne.n	8000c40 <__udivmoddi4+0x154>
 8000b9e:	1bcb      	subs	r3, r1, r7
 8000ba0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	2601      	movs	r6, #1
 8000baa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bae:	0c21      	lsrs	r1, r4, #16
 8000bb0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bb8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0xe4>
 8000bc0:	1879      	adds	r1, r7, r1
 8000bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0xe2>
 8000bc8:	428b      	cmp	r3, r1
 8000bca:	f200 80e9 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000bce:	4684      	mov	ip, r0
 8000bd0:	1ac9      	subs	r1, r1, r3
 8000bd2:	b2a3      	uxth	r3, r4
 8000bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bd8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bdc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000be0:	fb08 f800 	mul.w	r8, r8, r0
 8000be4:	45a0      	cmp	r8, r4
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x10c>
 8000be8:	193c      	adds	r4, r7, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x10a>
 8000bf0:	45a0      	cmp	r8, r4
 8000bf2:	f200 80d9 	bhi.w	8000da8 <__udivmoddi4+0x2bc>
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	eba4 0408 	sub.w	r4, r4, r8
 8000bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c00:	e7bf      	b.n	8000b82 <__udivmoddi4+0x96>
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x12e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <__udivmoddi4+0x282>
 8000c0c:	2600      	movs	r6, #0
 8000c0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c12:	4630      	mov	r0, r6
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f683 	clz	r6, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d14a      	bne.n	8000cb8 <__udivmoddi4+0x1cc>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0x140>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80b8 	bhi.w	8000d9c <__udivmoddi4+0x2b0>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	468c      	mov	ip, r1
 8000c36:	2d00      	cmp	r5, #0
 8000c38:	d0a8      	beq.n	8000b8c <__udivmoddi4+0xa0>
 8000c3a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c3e:	e7a5      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000c40:	f1c2 0320 	rsb	r3, r2, #32
 8000c44:	fa20 f603 	lsr.w	r6, r0, r3
 8000c48:	4097      	lsls	r7, r2
 8000c4a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c4e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c52:	40d9      	lsrs	r1, r3
 8000c54:	4330      	orrs	r0, r6
 8000c56:	0c03      	lsrs	r3, r0, #16
 8000c58:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c5c:	fa1f f887 	uxth.w	r8, r7
 8000c60:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb06 f108 	mul.w	r1, r6, r8
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x19c>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c7a:	f080 808d 	bcs.w	8000d98 <__udivmoddi4+0x2ac>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 808a 	bls.w	8000d98 <__udivmoddi4+0x2ac>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b281      	uxth	r1, r0
 8000c8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c98:	fb00 f308 	mul.w	r3, r0, r8
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x1c4>
 8000ca0:	1879      	adds	r1, r7, r1
 8000ca2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ca6:	d273      	bcs.n	8000d90 <__udivmoddi4+0x2a4>
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d971      	bls.n	8000d90 <__udivmoddi4+0x2a4>
 8000cac:	3802      	subs	r0, #2
 8000cae:	4439      	add	r1, r7
 8000cb0:	1acb      	subs	r3, r1, r3
 8000cb2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cb6:	e778      	b.n	8000baa <__udivmoddi4+0xbe>
 8000cb8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cbc:	fa03 f406 	lsl.w	r4, r3, r6
 8000cc0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cc4:	431c      	orrs	r4, r3
 8000cc6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cca:	fa01 f306 	lsl.w	r3, r1, r6
 8000cce:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cd2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cde:	fa1f f884 	uxth.w	r8, r4
 8000ce2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ce6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cea:	fb09 fa08 	mul.w	sl, r9, r8
 8000cee:	458a      	cmp	sl, r1
 8000cf0:	fa02 f206 	lsl.w	r2, r2, r6
 8000cf4:	fa00 f306 	lsl.w	r3, r0, r6
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x220>
 8000cfa:	1861      	adds	r1, r4, r1
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	d248      	bcs.n	8000d94 <__udivmoddi4+0x2a8>
 8000d02:	458a      	cmp	sl, r1
 8000d04:	d946      	bls.n	8000d94 <__udivmoddi4+0x2a8>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4421      	add	r1, r4
 8000d0c:	eba1 010a 	sub.w	r1, r1, sl
 8000d10:	b2bf      	uxth	r7, r7
 8000d12:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d16:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d1a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d1e:	fb00 f808 	mul.w	r8, r0, r8
 8000d22:	45b8      	cmp	r8, r7
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x24a>
 8000d26:	19e7      	adds	r7, r4, r7
 8000d28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2c:	d22e      	bcs.n	8000d8c <__udivmoddi4+0x2a0>
 8000d2e:	45b8      	cmp	r8, r7
 8000d30:	d92c      	bls.n	8000d8c <__udivmoddi4+0x2a0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4427      	add	r7, r4
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	eba7 0708 	sub.w	r7, r7, r8
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	454f      	cmp	r7, r9
 8000d44:	46c6      	mov	lr, r8
 8000d46:	4649      	mov	r1, r9
 8000d48:	d31a      	bcc.n	8000d80 <__udivmoddi4+0x294>
 8000d4a:	d017      	beq.n	8000d7c <__udivmoddi4+0x290>
 8000d4c:	b15d      	cbz	r5, 8000d66 <__udivmoddi4+0x27a>
 8000d4e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d52:	eb67 0701 	sbc.w	r7, r7, r1
 8000d56:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d5a:	40f2      	lsrs	r2, r6
 8000d5c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d60:	40f7      	lsrs	r7, r6
 8000d62:	e9c5 2700 	strd	r2, r7, [r5]
 8000d66:	2600      	movs	r6, #0
 8000d68:	4631      	mov	r1, r6
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e70b      	b.n	8000b8c <__udivmoddi4+0xa0>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e9      	b.n	8000b4c <__udivmoddi4+0x60>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6fd      	b.n	8000b78 <__udivmoddi4+0x8c>
 8000d7c:	4543      	cmp	r3, r8
 8000d7e:	d2e5      	bcs.n	8000d4c <__udivmoddi4+0x260>
 8000d80:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d84:	eb69 0104 	sbc.w	r1, r9, r4
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7df      	b.n	8000d4c <__udivmoddi4+0x260>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e7d2      	b.n	8000d36 <__udivmoddi4+0x24a>
 8000d90:	4660      	mov	r0, ip
 8000d92:	e78d      	b.n	8000cb0 <__udivmoddi4+0x1c4>
 8000d94:	4681      	mov	r9, r0
 8000d96:	e7b9      	b.n	8000d0c <__udivmoddi4+0x220>
 8000d98:	4666      	mov	r6, ip
 8000d9a:	e775      	b.n	8000c88 <__udivmoddi4+0x19c>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	e74a      	b.n	8000c36 <__udivmoddi4+0x14a>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	4439      	add	r1, r7
 8000da6:	e713      	b.n	8000bd0 <__udivmoddi4+0xe4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	443c      	add	r4, r7
 8000dac:	e724      	b.n	8000bf8 <__udivmoddi4+0x10c>
 8000dae:	bf00      	nop

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db8:	f000 fe40 	bl	8001a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbc:	f000 f828 	bl	8000e10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc0:	f000 fa6a 	bl	8001298 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000dc4:	f000 f88e 	bl	8000ee4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000dc8:	f000 f8ee 	bl	8000fa8 <MX_ADC2_Init>
  MX_I2C1_Init();
 8000dcc:	f000 f93e 	bl	800104c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000dd0:	f000 f998 	bl	8001104 <MX_TIM2_Init>
  MX_UART4_Init();
 8000dd4:	f000 f9e2 	bl	800119c <MX_UART4_Init>
  MX_UART5_Init();
 8000dd8:	f000 fa0a 	bl	80011f0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000ddc:	f000 fa32 	bl	8001244 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8000de0:	f000 f962 	bl	80010a8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  tasks_init();
 8000de4:	f008 ff3a 	bl	8009c5c <tasks_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000de8:	f004 f9d4 	bl	8005194 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000dec:	4a05      	ldr	r2, [pc, #20]	; (8000e04 <main+0x50>)
 8000dee:	2100      	movs	r1, #0
 8000df0:	4805      	ldr	r0, [pc, #20]	; (8000e08 <main+0x54>)
 8000df2:	f004 fa39 	bl	8005268 <osThreadNew>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <main+0x58>)
 8000dfa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000dfc:	f004 f9fe 	bl	80051fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <main+0x4c>
 8000e02:	bf00      	nop
 8000e04:	0800a950 	.word	0x0800a950
 8000e08:	0800139d 	.word	0x0800139d
 8000e0c:	20004a0c 	.word	0x20004a0c

08000e10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b094      	sub	sp, #80	; 0x50
 8000e14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e16:	f107 0320 	add.w	r3, r7, #32
 8000e1a:	2230      	movs	r2, #48	; 0x30
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f009 f8ae 	bl	8009f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	4b28      	ldr	r3, [pc, #160]	; (8000edc <SystemClock_Config+0xcc>)
 8000e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3c:	4a27      	ldr	r2, [pc, #156]	; (8000edc <SystemClock_Config+0xcc>)
 8000e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e42:	6413      	str	r3, [r2, #64]	; 0x40
 8000e44:	4b25      	ldr	r3, [pc, #148]	; (8000edc <SystemClock_Config+0xcc>)
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e50:	2300      	movs	r3, #0
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <SystemClock_Config+0xd0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a21      	ldr	r2, [pc, #132]	; (8000ee0 <SystemClock_Config+0xd0>)
 8000e5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <SystemClock_Config+0xd0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e70:	2301      	movs	r3, #1
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e74:	2310      	movs	r3, #16
 8000e76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e80:	2308      	movs	r3, #8
 8000e82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e84:	23a8      	movs	r3, #168	; 0xa8
 8000e86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e90:	f107 0320 	add.w	r3, r7, #32
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 fa55 	bl	8003344 <HAL_RCC_OscConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ea0:	f000 fa96 	bl	80013d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eb4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f002 fcae 	bl	8003824 <HAL_RCC_ClockConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ece:	f000 fa7f 	bl	80013d0 <Error_Handler>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3750      	adds	r7, #80	; 0x50
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40007000 	.word	0x40007000

08000ee4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ef6:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <MX_ADC1_Init+0xb8>)
 8000ef8:	4a29      	ldr	r2, [pc, #164]	; (8000fa0 <MX_ADC1_Init+0xbc>)
 8000efa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000efc:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <MX_ADC1_Init+0xb8>)
 8000efe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f04:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <MX_ADC1_Init+0xb8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f0a:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <MX_ADC1_Init+0xb8>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f10:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <MX_ADC1_Init+0xb8>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <MX_ADC1_Init+0xb8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1e:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <MX_ADC1_Init+0xb8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f24:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <MX_ADC1_Init+0xb8>)
 8000f26:	4a1f      	ldr	r2, [pc, #124]	; (8000fa4 <MX_ADC1_Init+0xc0>)
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <MX_ADC1_Init+0xb8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <MX_ADC1_Init+0xb8>)
 8000f32:	2202      	movs	r2, #2
 8000f34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <MX_ADC1_Init+0xb8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <MX_ADC1_Init+0xb8>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f44:	4815      	ldr	r0, [pc, #84]	; (8000f9c <MX_ADC1_Init+0xb8>)
 8000f46:	f000 fddf 	bl	8001b08 <HAL_ADC_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f50:	f000 fa3e 	bl	80013d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000f54:	2311      	movs	r3, #17
 8000f56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f60:	463b      	mov	r3, r7
 8000f62:	4619      	mov	r1, r3
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <MX_ADC1_Init+0xb8>)
 8000f66:	f000 ff9d 	bl	8001ea4 <HAL_ADC_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f70:	f000 fa2e 	bl	80013d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f80:	463b      	mov	r3, r7
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_ADC1_Init+0xb8>)
 8000f86:	f000 ff8d 	bl	8001ea4 <HAL_ADC_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000f90:	f000 fa1e 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20004b40 	.word	0x20004b40
 8000fa0:	40012000 	.word	0x40012000
 8000fa4:	0f000001 	.word	0x0f000001

08000fa8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_ADC2_Init+0x98>)
 8000fbc:	4a21      	ldr	r2, [pc, #132]	; (8001044 <MX_ADC2_Init+0x9c>)
 8000fbe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_ADC2_Init+0x98>)
 8000fc2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fc6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <MX_ADC2_Init+0x98>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_ADC2_Init+0x98>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_ADC2_Init+0x98>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_ADC2_Init+0x98>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_ADC2_Init+0x98>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_ADC2_Init+0x98>)
 8000fea:	4a17      	ldr	r2, [pc, #92]	; (8001048 <MX_ADC2_Init+0xa0>)
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_ADC2_Init+0x98>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_ADC2_Init+0x98>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_ADC2_Init+0x98>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_ADC2_Init+0x98>)
 8001004:	2201      	movs	r2, #1
 8001006:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <MX_ADC2_Init+0x98>)
 800100a:	f000 fd7d 	bl	8001b08 <HAL_ADC_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001014:	f000 f9dc 	bl	80013d0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001018:	2301      	movs	r3, #1
 800101a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800101c:	2301      	movs	r3, #1
 800101e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_ADC2_Init+0x98>)
 800102a:	f000 ff3b 	bl	8001ea4 <HAL_ADC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001034:	f000 f9cc 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20004a10 	.word	0x20004a10
 8001044:	40012100 	.word	0x40012100
 8001048:	0f000001 	.word	0x0f000001

0800104c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <MX_I2C1_Init+0x50>)
 8001052:	4a13      	ldr	r2, [pc, #76]	; (80010a0 <MX_I2C1_Init+0x54>)
 8001054:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_I2C1_Init+0x50>)
 8001058:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <MX_I2C1_Init+0x58>)
 800105a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <MX_I2C1_Init+0x50>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_I2C1_Init+0x50>)
 8001064:	2200      	movs	r2, #0
 8001066:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_I2C1_Init+0x50>)
 800106a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800106e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <MX_I2C1_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_I2C1_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <MX_I2C1_Init+0x50>)
 800107e:	2200      	movs	r2, #0
 8001080:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_I2C1_Init+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001088:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_I2C1_Init+0x50>)
 800108a:	f001 fbe1 	bl	8002850 <HAL_I2C_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001094:	f000 f99c 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20004a58 	.word	0x20004a58
 80010a0:	40005400 	.word	0x40005400
 80010a4:	000186a0 	.word	0x000186a0

080010a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <MX_I2C2_Init+0x50>)
 80010ae:	4a13      	ldr	r2, [pc, #76]	; (80010fc <MX_I2C2_Init+0x54>)
 80010b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_I2C2_Init+0x50>)
 80010b4:	4a12      	ldr	r2, [pc, #72]	; (8001100 <MX_I2C2_Init+0x58>)
 80010b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_I2C2_Init+0x50>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_I2C2_Init+0x50>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_I2C2_Init+0x50>)
 80010c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <MX_I2C2_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_I2C2_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <MX_I2C2_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_I2C2_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010e4:	4804      	ldr	r0, [pc, #16]	; (80010f8 <MX_I2C2_Init+0x50>)
 80010e6:	f001 fbb3 	bl	8002850 <HAL_I2C_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010f0:	f000 f96e 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20004aac 	.word	0x20004aac
 80010fc:	40005800 	.word	0x40005800
 8001100:	000186a0 	.word	0x000186a0

08001104 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	463b      	mov	r3, r7
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <MX_TIM2_Init+0x94>)
 8001122:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001126:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <MX_TIM2_Init+0x94>)
 800112a:	2201      	movs	r2, #1
 800112c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <MX_TIM2_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 41999;
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <MX_TIM2_Init+0x94>)
 8001136:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800113a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_TIM2_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <MX_TIM2_Init+0x94>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001148:	4813      	ldr	r0, [pc, #76]	; (8001198 <MX_TIM2_Init+0x94>)
 800114a:	f002 fd99 	bl	8003c80 <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001154:	f000 f93c 	bl	80013d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800115e:	f107 0308 	add.w	r3, r7, #8
 8001162:	4619      	mov	r1, r3
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <MX_TIM2_Init+0x94>)
 8001166:	f002 fee2 	bl	8003f2e <HAL_TIM_ConfigClockSource>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001170:	f000 f92e 	bl	80013d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_TIM2_Init+0x94>)
 8001182:	f003 f8fb 	bl	800437c <HAL_TIMEx_MasterConfigSynchronization>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800118c:	f000 f920 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20004c08 	.word	0x20004c08

0800119c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <MX_UART4_Init+0x50>)
 80011a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011a8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80011ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011d4:	f003 f962 	bl	800449c <HAL_UART_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80011de:	f000 f8f7 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20004bc8 	.word	0x20004bc8
 80011ec:	40004c00 	.word	0x40004c00

080011f0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_UART5_Init+0x4c>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <MX_UART5_Init+0x50>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <MX_UART5_Init+0x4c>)
 80011fc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001200:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_UART5_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_UART5_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_UART5_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_UART5_Init+0x4c>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_UART5_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_UART5_Init+0x4c>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_UART5_Init+0x4c>)
 8001228:	f003 f938 	bl	800449c <HAL_UART_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001232:	f000 f8cd 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20004b00 	.word	0x20004b00
 8001240:	40005000 	.word	0x40005000

08001244 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <MX_USART1_UART_Init+0x50>)
 800124c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800124e:	4b10      	ldr	r3, [pc, #64]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 8001250:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001254:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_USART1_UART_Init+0x4c>)
 800127c:	f003 f90e 	bl	800449c <HAL_UART_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001286:	f000 f8a3 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20004b88 	.word	0x20004b88
 8001294:	40011000 	.word	0x40011000

08001298 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	4b37      	ldr	r3, [pc, #220]	; (8001390 <MX_GPIO_Init+0xf8>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a36      	ldr	r2, [pc, #216]	; (8001390 <MX_GPIO_Init+0xf8>)
 80012b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b34      	ldr	r3, [pc, #208]	; (8001390 <MX_GPIO_Init+0xf8>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c6:	61bb      	str	r3, [r7, #24]
 80012c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	4b30      	ldr	r3, [pc, #192]	; (8001390 <MX_GPIO_Init+0xf8>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a2f      	ldr	r2, [pc, #188]	; (8001390 <MX_GPIO_Init+0xf8>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <MX_GPIO_Init+0xf8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b29      	ldr	r3, [pc, #164]	; (8001390 <MX_GPIO_Init+0xf8>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a28      	ldr	r2, [pc, #160]	; (8001390 <MX_GPIO_Init+0xf8>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <MX_GPIO_Init+0xf8>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b22      	ldr	r3, [pc, #136]	; (8001390 <MX_GPIO_Init+0xf8>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a21      	ldr	r2, [pc, #132]	; (8001390 <MX_GPIO_Init+0xf8>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <MX_GPIO_Init+0xf8>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <MX_GPIO_Init+0xf8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a1a      	ldr	r2, [pc, #104]	; (8001390 <MX_GPIO_Init+0xf8>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_GPIO_Init+0xf8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_GPIO_Init+0xf8>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a13      	ldr	r2, [pc, #76]	; (8001390 <MX_GPIO_Init+0xf8>)
 8001344:	f043 0310 	orr.w	r3, r3, #16
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_GPIO_Init+0xf8>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : select_Pin */
  GPIO_InitStruct.Pin = select_Pin;
 8001356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001360:	2301      	movs	r3, #1
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(select_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	480a      	ldr	r0, [pc, #40]	; (8001394 <MX_GPIO_Init+0xfc>)
 800136c:	f001 f8bc 	bl	80024e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : minus_Pin plus_Pin */
  GPIO_InitStruct.Pin = minus_Pin|plus_Pin;
 8001370:	2303      	movs	r3, #3
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001378:	2301      	movs	r3, #1
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_GPIO_Init+0x100>)
 8001384:	f001 f8b0 	bl	80024e8 <HAL_GPIO_Init>

}
 8001388:	bf00      	nop
 800138a:	3730      	adds	r7, #48	; 0x30
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	40020400 	.word	0x40020400
 8001398:	40021000 	.word	0x40021000

0800139c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80013a4:	2001      	movs	r0, #1
 80013a6:	f004 f805 	bl	80053b4 <osDelay>
 80013aa:	e7fb      	b.n	80013a4 <StartDefaultTask+0x8>

080013ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d101      	bne.n	80013c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013be:	f000 fb5f 	bl	8001a80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40010000 	.word	0x40010000

080013d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d4:	b672      	cpsid	i
}
 80013d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <Error_Handler+0x8>
	...

080013dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_MspInit+0x54>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a11      	ldr	r2, [pc, #68]	; (8001430 <HAL_MspInit+0x54>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <HAL_MspInit+0x54>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_MspInit+0x54>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_MspInit+0x54>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_MspInit+0x54>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	210f      	movs	r1, #15
 800141e:	f06f 0001 	mvn.w	r0, #1
 8001422:	f001 f815 	bl	8002450 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800

08001434 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08c      	sub	sp, #48	; 0x30
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a2e      	ldr	r2, [pc, #184]	; (800150c <HAL_ADC_MspInit+0xd8>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d128      	bne.n	80014a8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a2c      	ldr	r2, [pc, #176]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a25      	ldr	r2, [pc, #148]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	617b      	str	r3, [r7, #20]
 800148c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800148e:	2301      	movs	r3, #1
 8001490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001492:	2303      	movs	r3, #3
 8001494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4619      	mov	r1, r3
 80014a0:	481c      	ldr	r0, [pc, #112]	; (8001514 <HAL_ADC_MspInit+0xe0>)
 80014a2:	f001 f821 	bl	80024e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80014a6:	e02c      	b.n	8001502 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a1a      	ldr	r2, [pc, #104]	; (8001518 <HAL_ADC_MspInit+0xe4>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d127      	bne.n	8001502 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a15      	ldr	r2, [pc, #84]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 80014bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_ADC_MspInit+0xdc>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ee:	2303      	movs	r3, #3
 80014f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <HAL_ADC_MspInit+0xe0>)
 80014fe:	f000 fff3 	bl	80024e8 <HAL_GPIO_Init>
}
 8001502:	bf00      	nop
 8001504:	3730      	adds	r7, #48	; 0x30
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40012000 	.word	0x40012000
 8001510:	40023800 	.word	0x40023800
 8001514:	40020000 	.word	0x40020000
 8001518:	40012100 	.word	0x40012100

0800151c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08c      	sub	sp, #48	; 0x30
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 031c 	add.w	r3, r7, #28
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a32      	ldr	r2, [pc, #200]	; (8001604 <HAL_I2C_MspInit+0xe8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d12c      	bne.n	8001598 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
 8001542:	4b31      	ldr	r3, [pc, #196]	; (8001608 <HAL_I2C_MspInit+0xec>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a30      	ldr	r2, [pc, #192]	; (8001608 <HAL_I2C_MspInit+0xec>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b2e      	ldr	r3, [pc, #184]	; (8001608 <HAL_I2C_MspInit+0xec>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800155a:	23c0      	movs	r3, #192	; 0xc0
 800155c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155e:	2312      	movs	r3, #18
 8001560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001562:	2301      	movs	r3, #1
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800156a:	2304      	movs	r3, #4
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	4825      	ldr	r0, [pc, #148]	; (800160c <HAL_I2C_MspInit+0xf0>)
 8001576:	f000 ffb7 	bl	80024e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_I2C_MspInit+0xec>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a21      	ldr	r2, [pc, #132]	; (8001608 <HAL_I2C_MspInit+0xec>)
 8001584:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <HAL_I2C_MspInit+0xec>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001596:	e031      	b.n	80015fc <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a1c      	ldr	r2, [pc, #112]	; (8001610 <HAL_I2C_MspInit+0xf4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d12c      	bne.n	80015fc <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_I2C_MspInit+0xec>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a17      	ldr	r2, [pc, #92]	; (8001608 <HAL_I2C_MspInit+0xec>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <HAL_I2C_MspInit+0xec>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c4:	2312      	movs	r3, #18
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015d0:	2304      	movs	r3, #4
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	480c      	ldr	r0, [pc, #48]	; (800160c <HAL_I2C_MspInit+0xf0>)
 80015dc:	f000 ff84 	bl	80024e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_I2C_MspInit+0xec>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_I2C_MspInit+0xec>)
 80015ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015ee:	6413      	str	r3, [r2, #64]	; 0x40
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_I2C_MspInit+0xec>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3730      	adds	r7, #48	; 0x30
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	40005400 	.word	0x40005400
 8001608:	40023800 	.word	0x40023800
 800160c:	40020400 	.word	0x40020400
 8001610:	40005800 	.word	0x40005800

08001614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001624:	d115      	bne.n	8001652 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_TIM_Base_MspInit+0x48>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <HAL_TIM_Base_MspInit+0x48>)
 8001630:	f043 0301 	orr.w	r3, r3, #1
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_TIM_Base_MspInit+0x48>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2105      	movs	r1, #5
 8001646:	201c      	movs	r0, #28
 8001648:	f000 ff02 	bl	8002450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800164c:	201c      	movs	r0, #28
 800164e:	f000 ff1b 	bl	8002488 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800

08001660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08e      	sub	sp, #56	; 0x38
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a63      	ldr	r2, [pc, #396]	; (800180c <HAL_UART_MspInit+0x1ac>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d135      	bne.n	80016ee <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
 8001686:	4b62      	ldr	r3, [pc, #392]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a61      	ldr	r2, [pc, #388]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 800168c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b5f      	ldr	r3, [pc, #380]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800169a:	623b      	str	r3, [r7, #32]
 800169c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
 80016a2:	4b5b      	ldr	r3, [pc, #364]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a5a      	ldr	r2, [pc, #360]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b58      	ldr	r3, [pc, #352]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	61fb      	str	r3, [r7, #28]
 80016b8:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c0:	2302      	movs	r3, #2
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016cc:	2308      	movs	r3, #8
 80016ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d4:	4619      	mov	r1, r3
 80016d6:	484f      	ldr	r0, [pc, #316]	; (8001814 <HAL_UART_MspInit+0x1b4>)
 80016d8:	f000 ff06 	bl	80024e8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80016dc:	2200      	movs	r2, #0
 80016de:	2105      	movs	r1, #5
 80016e0:	2034      	movs	r0, #52	; 0x34
 80016e2:	f000 feb5 	bl	8002450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80016e6:	2034      	movs	r0, #52	; 0x34
 80016e8:	f000 fece 	bl	8002488 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016ec:	e08a      	b.n	8001804 <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==UART5)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a49      	ldr	r2, [pc, #292]	; (8001818 <HAL_UART_MspInit+0x1b8>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d153      	bne.n	80017a0 <HAL_UART_MspInit+0x140>
    __HAL_RCC_UART5_CLK_ENABLE();
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]
 80016fc:	4b44      	ldr	r3, [pc, #272]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	4a43      	ldr	r2, [pc, #268]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 8001702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001706:	6413      	str	r3, [r2, #64]	; 0x40
 8001708:	4b41      	ldr	r3, [pc, #260]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001710:	61bb      	str	r3, [r7, #24]
 8001712:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	4b3d      	ldr	r3, [pc, #244]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171c:	4a3c      	ldr	r2, [pc, #240]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 800171e:	f043 0304 	orr.w	r3, r3, #4
 8001722:	6313      	str	r3, [r2, #48]	; 0x30
 8001724:	4b3a      	ldr	r3, [pc, #232]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	4b36      	ldr	r3, [pc, #216]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	4a35      	ldr	r2, [pc, #212]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 800173a:	f043 0308 	orr.w	r3, r3, #8
 800173e:	6313      	str	r3, [r2, #48]	; 0x30
 8001740:	4b33      	ldr	r3, [pc, #204]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800174c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001756:	2301      	movs	r3, #1
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800175e:	2308      	movs	r3, #8
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	4619      	mov	r1, r3
 8001768:	482a      	ldr	r0, [pc, #168]	; (8001814 <HAL_UART_MspInit+0x1b4>)
 800176a:	f000 febd 	bl	80024e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800176e:	2304      	movs	r3, #4
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001776:	2301      	movs	r3, #1
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800177e:	2308      	movs	r3, #8
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	4824      	ldr	r0, [pc, #144]	; (800181c <HAL_UART_MspInit+0x1bc>)
 800178a:	f000 fead 	bl	80024e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2105      	movs	r1, #5
 8001792:	2035      	movs	r0, #53	; 0x35
 8001794:	f000 fe5c 	bl	8002450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001798:	2035      	movs	r0, #53	; 0x35
 800179a:	f000 fe75 	bl	8002488 <HAL_NVIC_EnableIRQ>
}
 800179e:	e031      	b.n	8001804 <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <HAL_UART_MspInit+0x1c0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d12c      	bne.n	8001804 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART1_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a17      	ldr	r2, [pc, #92]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 80017b4:	f043 0310 	orr.w	r3, r3, #16
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a10      	ldr	r2, [pc, #64]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_UART_MspInit+0x1b0>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017f4:	2307      	movs	r3, #7
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	4809      	ldr	r0, [pc, #36]	; (8001824 <HAL_UART_MspInit+0x1c4>)
 8001800:	f000 fe72 	bl	80024e8 <HAL_GPIO_Init>
}
 8001804:	bf00      	nop
 8001806:	3738      	adds	r7, #56	; 0x38
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40004c00 	.word	0x40004c00
 8001810:	40023800 	.word	0x40023800
 8001814:	40020800 	.word	0x40020800
 8001818:	40005000 	.word	0x40005000
 800181c:	40020c00 	.word	0x40020c00
 8001820:	40011000 	.word	0x40011000
 8001824:	40020000 	.word	0x40020000

08001828 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08c      	sub	sp, #48	; 0x30
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	2019      	movs	r0, #25
 800183e:	f000 fe07 	bl	8002450 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001842:	2019      	movs	r0, #25
 8001844:	f000 fe20 	bl	8002488 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <HAL_InitTick+0xa4>)
 800184e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001850:	4a1e      	ldr	r2, [pc, #120]	; (80018cc <HAL_InitTick+0xa4>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6453      	str	r3, [r2, #68]	; 0x44
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <HAL_InitTick+0xa4>)
 800185a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001864:	f107 0210 	add.w	r2, r7, #16
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	4611      	mov	r1, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f002 f9d4 	bl	8003c1c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001874:	f002 f9be 	bl	8003bf4 <HAL_RCC_GetPCLK2Freq>
 8001878:	4603      	mov	r3, r0
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001880:	4a13      	ldr	r2, [pc, #76]	; (80018d0 <HAL_InitTick+0xa8>)
 8001882:	fba2 2303 	umull	r2, r3, r2, r3
 8001886:	0c9b      	lsrs	r3, r3, #18
 8001888:	3b01      	subs	r3, #1
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <HAL_InitTick+0xac>)
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <HAL_InitTick+0xb0>)
 8001890:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_InitTick+0xac>)
 8001894:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001898:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800189a:	4a0e      	ldr	r2, [pc, #56]	; (80018d4 <HAL_InitTick+0xac>)
 800189c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <HAL_InitTick+0xac>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_InitTick+0xac>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <HAL_InitTick+0xac>)
 80018ae:	f002 f9e7 	bl	8003c80 <HAL_TIM_Base_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d104      	bne.n	80018c2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80018b8:	4806      	ldr	r0, [pc, #24]	; (80018d4 <HAL_InitTick+0xac>)
 80018ba:	f002 fa0c 	bl	8003cd6 <HAL_TIM_Base_Start_IT>
 80018be:	4603      	mov	r3, r0
 80018c0:	e000      	b.n	80018c4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3730      	adds	r7, #48	; 0x30
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40023800 	.word	0x40023800
 80018d0:	431bde83 	.word	0x431bde83
 80018d4:	20004c48 	.word	0x20004c48
 80018d8:	40010000 	.word	0x40010000

080018dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <NMI_Handler+0x4>

080018e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <MemManage_Handler+0x4>

080018ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <BusFault_Handler+0x4>

080018f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <UsageFault_Handler+0x4>

080018fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fa:	b480      	push	{r7}
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800190c:	4802      	ldr	r0, [pc, #8]	; (8001918 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800190e:	f002 fa06 	bl	8003d1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20004c48 	.word	0x20004c48

0800191c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001920:	4803      	ldr	r0, [pc, #12]	; (8001930 <TIM2_IRQHandler+0x14>)
 8001922:	f002 f9fc 	bl	8003d1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  buttonCounterIncrease();
 8001926:	f006 fd7f 	bl	8008428 <buttonCounterIncrease>
  /* USER CODE END TIM2_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20004c08 	.word	0x20004c08

08001934 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <UART4_IRQHandler+0x10>)
 800193a:	f002 fe51 	bl	80045e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20004bc8 	.word	0x20004bc8

08001948 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <UART5_IRQHandler+0x10>)
 800194e:	f002 fe47 	bl	80045e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20004b00 	.word	0x20004b00

0800195c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001964:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <_sbrk+0x5c>)
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <_sbrk+0x60>)
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d102      	bne.n	800197e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <_sbrk+0x64>)
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <_sbrk+0x68>)
 800197c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	429a      	cmp	r2, r3
 800198a:	d207      	bcs.n	800199c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800198c:	f008 fac0 	bl	8009f10 <__errno>
 8001990:	4603      	mov	r3, r0
 8001992:	220c      	movs	r2, #12
 8001994:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
 800199a:	e009      	b.n	80019b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <_sbrk+0x64>)
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4413      	add	r3, r2
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <_sbrk+0x64>)
 80019ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ae:	68fb      	ldr	r3, [r7, #12]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20020000 	.word	0x20020000
 80019bc:	00000400 	.word	0x00000400
 80019c0:	20000094 	.word	0x20000094
 80019c4:	20004d68 	.word	0x20004d68

080019c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <SystemInit+0x28>)
 80019ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019d2:	4a07      	ldr	r2, [pc, #28]	; (80019f0 <SystemInit+0x28>)
 80019d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <SystemInit+0x28>)
 80019de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019e2:	609a      	str	r2, [r3, #8]
#endif
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <Reset_Handler>:
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */  

CopyDataInit:
  ldr  r3, =_sidata
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80019f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019fa:	3104      	adds	r1, #4

080019fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019fc:	480a      	ldr	r0, [pc, #40]	; (8001a28 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80019fe:	4b0b      	ldr	r3, [pc, #44]	; (8001a2c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001a00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a04:	d3f6      	bcc.n	80019f4 <Reset_Handler>
  ldr  r2, =_sbss
 8001a06:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001a08:	e002      	b.n	8001a10 <LoopFillZerobss>

08001a0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a0c:	f842 3b04 	str.w	r3, [r2], #4

08001a10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001a12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a14:	d3f9      	bcc.n	8001a0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a16:	f7ff ffd7 	bl	80019c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a1a:	f008 fa7f 	bl	8009f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a1e:	f7ff f9c9 	bl	8000db4 <main>
  bx  lr    
 8001a22:	4770      	bx	lr
  ldr  r3, =_sidata
 8001a24:	0800a9f0 	.word	0x0800a9f0
  ldr  r0, =_sdata
 8001a28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a2c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001a30:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001a34:	20004d64 	.word	0x20004d64

08001a38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a38:	e7fe      	b.n	8001a38 <ADC_IRQHandler>
	...

08001a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a40:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0d      	ldr	r2, [pc, #52]	; (8001a7c <HAL_Init+0x40>)
 8001a46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_Init+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <HAL_Init+0x40>)
 8001a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_Init+0x40>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <HAL_Init+0x40>)
 8001a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a64:	2003      	movs	r0, #3
 8001a66:	f000 fce8 	bl	800243a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f7ff fedc 	bl	8001828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a70:	f7ff fcb4 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023c00 	.word	0x40023c00

08001a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x20>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_IncTick+0x24>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <HAL_IncTick+0x24>)
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000008 	.word	0x20000008
 8001aa4:	20004c88 	.word	0x20004c88

08001aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <HAL_GetTick+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20004c88 	.word	0x20004c88

08001ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac8:	f7ff ffee 	bl	8001aa8 <HAL_GetTick>
 8001acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad8:	d005      	beq.n	8001ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_Delay+0x44>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ae6:	bf00      	nop
 8001ae8:	f7ff ffde 	bl	8001aa8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d8f7      	bhi.n	8001ae8 <HAL_Delay+0x28>
  {
  }
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000008 	.word	0x20000008

08001b08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e033      	b.n	8001b86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d109      	bne.n	8001b3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff fc84 	bl	8001434 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d118      	bne.n	8001b78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b4e:	f023 0302 	bic.w	r3, r3, #2
 8001b52:	f043 0202 	orr.w	r2, r3, #2
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 fac4 	bl	80020e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f023 0303 	bic.w	r3, r3, #3
 8001b6e:	f043 0201 	orr.w	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	641a      	str	r2, [r3, #64]	; 0x40
 8001b76:	e001      	b.n	8001b7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_ADC_Start+0x1a>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e0a5      	b.n	8001cf6 <HAL_ADC_Start+0x166>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d018      	beq.n	8001bf2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd0:	4b4c      	ldr	r3, [pc, #304]	; (8001d04 <HAL_ADC_Start+0x174>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a4c      	ldr	r2, [pc, #304]	; (8001d08 <HAL_ADC_Start+0x178>)
 8001bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bda:	0c9a      	lsrs	r2, r3, #18
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001be4:	e002      	b.n	8001bec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f9      	bne.n	8001be6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d179      	bne.n	8001cf4 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c08:	f023 0301 	bic.w	r3, r3, #1
 8001c0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c3e:	d106      	bne.n	8001c4e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c44:	f023 0206 	bic.w	r2, r3, #6
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	645a      	str	r2, [r3, #68]	; 0x44
 8001c4c:	e002      	b.n	8001c54 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_ADC_Start+0x17c>)
 8001c5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c68:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d12a      	bne.n	8001ccc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a25      	ldr	r2, [pc, #148]	; (8001d10 <HAL_ADC_Start+0x180>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d015      	beq.n	8001cac <HAL_ADC_Start+0x11c>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <HAL_ADC_Start+0x184>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d105      	bne.n	8001c96 <HAL_ADC_Start+0x106>
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_ADC_Start+0x17c>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 031f 	and.w	r3, r3, #31
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00a      	beq.n	8001cac <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <HAL_ADC_Start+0x188>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d129      	bne.n	8001cf4 <HAL_ADC_Start+0x164>
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <HAL_ADC_Start+0x17c>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0310 	and.w	r3, r3, #16
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d123      	bne.n	8001cf4 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d11c      	bne.n	8001cf4 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	e013      	b.n	8001cf4 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0f      	ldr	r2, [pc, #60]	; (8001d10 <HAL_ADC_Start+0x180>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_ADC_Start+0x164>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d107      	bne.n	8001cf4 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cf2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000000 	.word	0x20000000
 8001d08:	431bde83 	.word	0x431bde83
 8001d0c:	40012300 	.word	0x40012300
 8001d10:	40012000 	.word	0x40012000
 8001d14:	40012100 	.word	0x40012100
 8001d18:	40012200 	.word	0x40012200

08001d1c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_ADC_Stop+0x16>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e021      	b.n	8001d76 <HAL_ADC_Stop+0x5a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d109      	bne.n	8001d6c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d60:	f023 0301 	bic.w	r3, r3, #1
 8001d64:	f043 0201 	orr.w	r2, r3, #1
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9e:	d113      	bne.n	8001dc8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dae:	d10b      	bne.n	8001dc8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f043 0220 	orr.w	r2, r3, #32
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e05c      	b.n	8001e82 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001dc8:	f7ff fe6e 	bl	8001aa8 <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001dce:	e01a      	b.n	8001e06 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd6:	d016      	beq.n	8001e06 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d007      	beq.n	8001dee <HAL_ADC_PollForConversion+0x6c>
 8001dde:	f7ff fe63 	bl	8001aa8 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	683a      	ldr	r2, [r7, #0]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d20b      	bcs.n	8001e06 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f043 0204 	orr.w	r2, r3, #4
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e03d      	b.n	8001e82 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d1dd      	bne.n	8001dd0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0212 	mvn.w	r2, #18
 8001e1c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d123      	bne.n	8001e80 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d11f      	bne.n	8001e80 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d006      	beq.n	8001e5c <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d111      	bne.n	8001e80 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d105      	bne.n	8001e80 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f043 0201 	orr.w	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x1c>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e105      	b.n	80020cc <HAL_ADC_ConfigChannel+0x228>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b09      	cmp	r3, #9
 8001ece:	d925      	bls.n	8001f1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68d9      	ldr	r1, [r3, #12]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	4613      	mov	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3b1e      	subs	r3, #30
 8001ee6:	2207      	movs	r2, #7
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43da      	mvns	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68d9      	ldr	r1, [r3, #12]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	4603      	mov	r3, r0
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4403      	add	r3, r0
 8001f0e:	3b1e      	subs	r3, #30
 8001f10:	409a      	lsls	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	e022      	b.n	8001f62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6919      	ldr	r1, [r3, #16]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	2207      	movs	r2, #7
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	400a      	ands	r2, r1
 8001f3e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6919      	ldr	r1, [r3, #16]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	4618      	mov	r0, r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4403      	add	r3, r0
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d824      	bhi.n	8001fb4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	3b05      	subs	r3, #5
 8001f7c:	221f      	movs	r2, #31
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43da      	mvns	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	400a      	ands	r2, r1
 8001f8a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3b05      	subs	r3, #5
 8001fa6:	fa00 f203 	lsl.w	r2, r0, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8001fb2:	e04c      	b.n	800204e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b0c      	cmp	r3, #12
 8001fba:	d824      	bhi.n	8002006 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	3b23      	subs	r3, #35	; 0x23
 8001fce:	221f      	movs	r2, #31
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43da      	mvns	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	400a      	ands	r2, r1
 8001fdc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	4618      	mov	r0, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	685a      	ldr	r2, [r3, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3b23      	subs	r3, #35	; 0x23
 8001ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	631a      	str	r2, [r3, #48]	; 0x30
 8002004:	e023      	b.n	800204e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	3b41      	subs	r3, #65	; 0x41
 8002018:	221f      	movs	r2, #31
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	400a      	ands	r2, r1
 8002026:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	4618      	mov	r0, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	4413      	add	r3, r2
 8002040:	3b41      	subs	r3, #65	; 0x41
 8002042:	fa00 f203 	lsl.w	r2, r0, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800204e:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <HAL_ADC_ConfigChannel+0x234>)
 8002050:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a21      	ldr	r2, [pc, #132]	; (80020dc <HAL_ADC_ConfigChannel+0x238>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d109      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1cc>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b12      	cmp	r3, #18
 8002062:	d105      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a19      	ldr	r2, [pc, #100]	; (80020dc <HAL_ADC_ConfigChannel+0x238>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d123      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x21e>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b10      	cmp	r3, #16
 8002080:	d003      	beq.n	800208a <HAL_ADC_ConfigChannel+0x1e6>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b11      	cmp	r3, #17
 8002088:	d11b      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b10      	cmp	r3, #16
 800209c:	d111      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800209e:	4b10      	ldr	r3, [pc, #64]	; (80020e0 <HAL_ADC_ConfigChannel+0x23c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <HAL_ADC_ConfigChannel+0x240>)
 80020a4:	fba2 2303 	umull	r2, r3, r2, r3
 80020a8:	0c9a      	lsrs	r2, r3, #18
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020b4:	e002      	b.n	80020bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f9      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	40012300 	.word	0x40012300
 80020dc:	40012000 	.word	0x40012000
 80020e0:	20000000 	.word	0x20000000
 80020e4:	431bde83 	.word	0x431bde83

080020e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020f0:	4b79      	ldr	r3, [pc, #484]	; (80022d8 <ADC_Init+0x1f0>)
 80020f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	431a      	orrs	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685a      	ldr	r2, [r3, #4]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800211c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	021a      	lsls	r2, r3, #8
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002140:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6859      	ldr	r1, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002162:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6899      	ldr	r1, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	4a58      	ldr	r2, [pc, #352]	; (80022dc <ADC_Init+0x1f4>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d022      	beq.n	80021c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800218e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6899      	ldr	r1, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6899      	ldr	r1, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	e00f      	b.n	80021e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0202 	bic.w	r2, r2, #2
 80021f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6899      	ldr	r1, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7e1b      	ldrb	r3, [r3, #24]
 8002200:	005a      	lsls	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01b      	beq.n	800224c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002222:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002232:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6859      	ldr	r1, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	3b01      	subs	r3, #1
 8002240:	035a      	lsls	r2, r3, #13
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	e007      	b.n	800225c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800225a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800226a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	3b01      	subs	r3, #1
 8002278:	051a      	lsls	r2, r3, #20
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002290:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6899      	ldr	r1, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800229e:	025a      	lsls	r2, r3, #9
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6899      	ldr	r1, [r3, #8]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	029a      	lsls	r2, r3, #10
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	609a      	str	r2, [r3, #8]
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	40012300 	.word	0x40012300
 80022dc:	0f000001 	.word	0x0f000001

080022e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f003 0307 	and.w	r3, r3, #7
 80022ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022fc:	4013      	ands	r3, r2
 80022fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800230c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002312:	4a04      	ldr	r2, [pc, #16]	; (8002324 <__NVIC_SetPriorityGrouping+0x44>)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	60d3      	str	r3, [r2, #12]
}
 8002318:	bf00      	nop
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <__NVIC_GetPriorityGrouping+0x18>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	f003 0307 	and.w	r3, r3, #7
}
 8002336:	4618      	mov	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	2b00      	cmp	r3, #0
 8002354:	db0b      	blt.n	800236e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	f003 021f 	and.w	r2, r3, #31
 800235c:	4907      	ldr	r1, [pc, #28]	; (800237c <__NVIC_EnableIRQ+0x38>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	2001      	movs	r0, #1
 8002366:	fa00 f202 	lsl.w	r2, r0, r2
 800236a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000e100 	.word	0xe000e100

08002380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	6039      	str	r1, [r7, #0]
 800238a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	2b00      	cmp	r3, #0
 8002392:	db0a      	blt.n	80023aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	b2da      	uxtb	r2, r3
 8002398:	490c      	ldr	r1, [pc, #48]	; (80023cc <__NVIC_SetPriority+0x4c>)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	0112      	lsls	r2, r2, #4
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	440b      	add	r3, r1
 80023a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a8:	e00a      	b.n	80023c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4908      	ldr	r1, [pc, #32]	; (80023d0 <__NVIC_SetPriority+0x50>)
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	3b04      	subs	r3, #4
 80023b8:	0112      	lsls	r2, r2, #4
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	440b      	add	r3, r1
 80023be:	761a      	strb	r2, [r3, #24]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000e100 	.word	0xe000e100
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f1c3 0307 	rsb	r3, r3, #7
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	bf28      	it	cs
 80023f2:	2304      	movcs	r3, #4
 80023f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3304      	adds	r3, #4
 80023fa:	2b06      	cmp	r3, #6
 80023fc:	d902      	bls.n	8002404 <NVIC_EncodePriority+0x30>
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	3b03      	subs	r3, #3
 8002402:	e000      	b.n	8002406 <NVIC_EncodePriority+0x32>
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	f04f 32ff 	mov.w	r2, #4294967295
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43da      	mvns	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	401a      	ands	r2, r3
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800241c:	f04f 31ff 	mov.w	r1, #4294967295
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	fa01 f303 	lsl.w	r3, r1, r3
 8002426:	43d9      	mvns	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	4313      	orrs	r3, r2
         );
}
 800242e:	4618      	mov	r0, r3
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff ff4c 	bl	80022e0 <__NVIC_SetPriorityGrouping>
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002462:	f7ff ff61 	bl	8002328 <__NVIC_GetPriorityGrouping>
 8002466:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	68b9      	ldr	r1, [r7, #8]
 800246c:	6978      	ldr	r0, [r7, #20]
 800246e:	f7ff ffb1 	bl	80023d4 <NVIC_EncodePriority>
 8002472:	4602      	mov	r2, r0
 8002474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ff80 	bl	8002380 <__NVIC_SetPriority>
}
 8002480:	bf00      	nop
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ff54 	bl	8002344 <__NVIC_EnableIRQ>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d004      	beq.n	80024c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2280      	movs	r2, #128	; 0x80
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e00c      	b.n	80024dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2205      	movs	r2, #5
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0201 	bic.w	r2, r2, #1
 80024d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
 8002502:	e16b      	b.n	80027dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	429a      	cmp	r2, r3
 800251e:	f040 815a 	bne.w	80027d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d00b      	beq.n	8002542 <HAL_GPIO_Init+0x5a>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d007      	beq.n	8002542 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002536:	2b11      	cmp	r3, #17
 8002538:	d003      	beq.n	8002542 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b12      	cmp	r3, #18
 8002540:	d130      	bne.n	80025a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	2203      	movs	r2, #3
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	43db      	mvns	r3, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4013      	ands	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002578:	2201      	movs	r2, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 0201 	and.w	r2, r3, #1
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2203      	movs	r2, #3
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0xfc>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b12      	cmp	r3, #18
 80025e2:	d123      	bne.n	800262c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	08da      	lsrs	r2, r3, #3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3208      	adds	r2, #8
 80025ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	220f      	movs	r2, #15
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	08da      	lsrs	r2, r3, #3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3208      	adds	r2, #8
 8002626:	69b9      	ldr	r1, [r7, #24]
 8002628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	2203      	movs	r2, #3
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0203 	and.w	r2, r3, #3
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80b4 	beq.w	80027d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	4b60      	ldr	r3, [pc, #384]	; (80027f4 <HAL_GPIO_Init+0x30c>)
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	4a5f      	ldr	r2, [pc, #380]	; (80027f4 <HAL_GPIO_Init+0x30c>)
 8002678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800267c:	6453      	str	r3, [r2, #68]	; 0x44
 800267e:	4b5d      	ldr	r3, [pc, #372]	; (80027f4 <HAL_GPIO_Init+0x30c>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800268a:	4a5b      	ldr	r2, [pc, #364]	; (80027f8 <HAL_GPIO_Init+0x310>)
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002696:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	220f      	movs	r2, #15
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a52      	ldr	r2, [pc, #328]	; (80027fc <HAL_GPIO_Init+0x314>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d02b      	beq.n	800270e <HAL_GPIO_Init+0x226>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a51      	ldr	r2, [pc, #324]	; (8002800 <HAL_GPIO_Init+0x318>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d025      	beq.n	800270a <HAL_GPIO_Init+0x222>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a50      	ldr	r2, [pc, #320]	; (8002804 <HAL_GPIO_Init+0x31c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d01f      	beq.n	8002706 <HAL_GPIO_Init+0x21e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a4f      	ldr	r2, [pc, #316]	; (8002808 <HAL_GPIO_Init+0x320>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d019      	beq.n	8002702 <HAL_GPIO_Init+0x21a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4e      	ldr	r2, [pc, #312]	; (800280c <HAL_GPIO_Init+0x324>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d013      	beq.n	80026fe <HAL_GPIO_Init+0x216>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a4d      	ldr	r2, [pc, #308]	; (8002810 <HAL_GPIO_Init+0x328>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00d      	beq.n	80026fa <HAL_GPIO_Init+0x212>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a4c      	ldr	r2, [pc, #304]	; (8002814 <HAL_GPIO_Init+0x32c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d007      	beq.n	80026f6 <HAL_GPIO_Init+0x20e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a4b      	ldr	r2, [pc, #300]	; (8002818 <HAL_GPIO_Init+0x330>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d101      	bne.n	80026f2 <HAL_GPIO_Init+0x20a>
 80026ee:	2307      	movs	r3, #7
 80026f0:	e00e      	b.n	8002710 <HAL_GPIO_Init+0x228>
 80026f2:	2308      	movs	r3, #8
 80026f4:	e00c      	b.n	8002710 <HAL_GPIO_Init+0x228>
 80026f6:	2306      	movs	r3, #6
 80026f8:	e00a      	b.n	8002710 <HAL_GPIO_Init+0x228>
 80026fa:	2305      	movs	r3, #5
 80026fc:	e008      	b.n	8002710 <HAL_GPIO_Init+0x228>
 80026fe:	2304      	movs	r3, #4
 8002700:	e006      	b.n	8002710 <HAL_GPIO_Init+0x228>
 8002702:	2303      	movs	r3, #3
 8002704:	e004      	b.n	8002710 <HAL_GPIO_Init+0x228>
 8002706:	2302      	movs	r3, #2
 8002708:	e002      	b.n	8002710 <HAL_GPIO_Init+0x228>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_GPIO_Init+0x228>
 800270e:	2300      	movs	r3, #0
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	f002 0203 	and.w	r2, r2, #3
 8002716:	0092      	lsls	r2, r2, #2
 8002718:	4093      	lsls	r3, r2
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002720:	4935      	ldr	r1, [pc, #212]	; (80027f8 <HAL_GPIO_Init+0x310>)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	089b      	lsrs	r3, r3, #2
 8002726:	3302      	adds	r3, #2
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800272e:	4b3b      	ldr	r3, [pc, #236]	; (800281c <HAL_GPIO_Init+0x334>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002752:	4a32      	ldr	r2, [pc, #200]	; (800281c <HAL_GPIO_Init+0x334>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002758:	4b30      	ldr	r3, [pc, #192]	; (800281c <HAL_GPIO_Init+0x334>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800277c:	4a27      	ldr	r2, [pc, #156]	; (800281c <HAL_GPIO_Init+0x334>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002782:	4b26      	ldr	r3, [pc, #152]	; (800281c <HAL_GPIO_Init+0x334>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027a6:	4a1d      	ldr	r2, [pc, #116]	; (800281c <HAL_GPIO_Init+0x334>)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_GPIO_Init+0x334>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027d0:	4a12      	ldr	r2, [pc, #72]	; (800281c <HAL_GPIO_Init+0x334>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3301      	adds	r3, #1
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	2b0f      	cmp	r3, #15
 80027e0:	f67f ae90 	bls.w	8002504 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	3724      	adds	r7, #36	; 0x24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40013800 	.word	0x40013800
 80027fc:	40020000 	.word	0x40020000
 8002800:	40020400 	.word	0x40020400
 8002804:	40020800 	.word	0x40020800
 8002808:	40020c00 	.word	0x40020c00
 800280c:	40021000 	.word	0x40021000
 8002810:	40021400 	.word	0x40021400
 8002814:	40021800 	.word	0x40021800
 8002818:	40021c00 	.word	0x40021c00
 800281c:	40013c00 	.word	0x40013c00

08002820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	887b      	ldrh	r3, [r7, #2]
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
 800283c:	e001      	b.n	8002842 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e12b      	b.n	8002aba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe fe50 	bl	800151c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2224      	movs	r2, #36	; 0x24
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028b4:	f001 f98a 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 80028b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4a81      	ldr	r2, [pc, #516]	; (8002ac4 <HAL_I2C_Init+0x274>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d807      	bhi.n	80028d4 <HAL_I2C_Init+0x84>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a80      	ldr	r2, [pc, #512]	; (8002ac8 <HAL_I2C_Init+0x278>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	bf94      	ite	ls
 80028cc:	2301      	movls	r3, #1
 80028ce:	2300      	movhi	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	e006      	b.n	80028e2 <HAL_I2C_Init+0x92>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4a7d      	ldr	r2, [pc, #500]	; (8002acc <HAL_I2C_Init+0x27c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	bf94      	ite	ls
 80028dc:	2301      	movls	r3, #1
 80028de:	2300      	movhi	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e0e7      	b.n	8002aba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4a78      	ldr	r2, [pc, #480]	; (8002ad0 <HAL_I2C_Init+0x280>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	0c9b      	lsrs	r3, r3, #18
 80028f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	430a      	orrs	r2, r1
 8002908:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a6a      	ldr	r2, [pc, #424]	; (8002ac4 <HAL_I2C_Init+0x274>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d802      	bhi.n	8002924 <HAL_I2C_Init+0xd4>
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	3301      	adds	r3, #1
 8002922:	e009      	b.n	8002938 <HAL_I2C_Init+0xe8>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800292a:	fb02 f303 	mul.w	r3, r2, r3
 800292e:	4a69      	ldr	r2, [pc, #420]	; (8002ad4 <HAL_I2C_Init+0x284>)
 8002930:	fba2 2303 	umull	r2, r3, r2, r3
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	3301      	adds	r3, #1
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	430b      	orrs	r3, r1
 800293e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800294a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	495c      	ldr	r1, [pc, #368]	; (8002ac4 <HAL_I2C_Init+0x274>)
 8002954:	428b      	cmp	r3, r1
 8002956:	d819      	bhi.n	800298c <HAL_I2C_Init+0x13c>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1e59      	subs	r1, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	fbb1 f3f3 	udiv	r3, r1, r3
 8002966:	1c59      	adds	r1, r3, #1
 8002968:	f640 73fc 	movw	r3, #4092	; 0xffc
 800296c:	400b      	ands	r3, r1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_I2C_Init+0x138>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	1e59      	subs	r1, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002980:	3301      	adds	r3, #1
 8002982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002986:	e051      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 8002988:	2304      	movs	r3, #4
 800298a:	e04f      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d111      	bne.n	80029b8 <HAL_I2C_Init+0x168>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1e58      	subs	r0, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	440b      	add	r3, r1
 80029a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	e012      	b.n	80029de <HAL_I2C_Init+0x18e>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1e58      	subs	r0, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6859      	ldr	r1, [r3, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	0099      	lsls	r1, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80029ce:	3301      	adds	r3, #1
 80029d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	bf0c      	ite	eq
 80029d8:	2301      	moveq	r3, #1
 80029da:	2300      	movne	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_I2C_Init+0x196>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e022      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10e      	bne.n	8002a0c <HAL_I2C_Init+0x1bc>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1e58      	subs	r0, r3, #1
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	440b      	add	r3, r1
 80029fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a00:	3301      	adds	r3, #1
 8002a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a0a:	e00f      	b.n	8002a2c <HAL_I2C_Init+0x1dc>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1e58      	subs	r0, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6859      	ldr	r1, [r3, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	0099      	lsls	r1, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a22:	3301      	adds	r3, #1
 8002a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	6809      	ldr	r1, [r1, #0]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002a5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6911      	ldr	r1, [r2, #16]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	68d2      	ldr	r2, [r2, #12]
 8002a66:	4311      	orrs	r1, r2
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0201 	orr.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	000186a0 	.word	0x000186a0
 8002ac8:	001e847f 	.word	0x001e847f
 8002acc:	003d08ff 	.word	0x003d08ff
 8002ad0:	431bde83 	.word	0x431bde83
 8002ad4:	10624dd3 	.word	0x10624dd3

08002ad8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	817b      	strh	r3, [r7, #10]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aec:	f7fe ffdc 	bl	8001aa8 <HAL_GetTick>
 8002af0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	f040 80e0 	bne.w	8002cc0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2319      	movs	r3, #25
 8002b06:	2201      	movs	r2, #1
 8002b08:	4970      	ldr	r1, [pc, #448]	; (8002ccc <HAL_I2C_Master_Transmit+0x1f4>)
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fa92 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b16:	2302      	movs	r3, #2
 8002b18:	e0d3      	b.n	8002cc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_I2C_Master_Transmit+0x50>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e0cc      	b.n	8002cc2 <HAL_I2C_Master_Transmit+0x1ea>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d007      	beq.n	8002b4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2221      	movs	r2, #33	; 0x21
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2210      	movs	r2, #16
 8002b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	893a      	ldrh	r2, [r7, #8]
 8002b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4a50      	ldr	r2, [pc, #320]	; (8002cd0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002b8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b90:	8979      	ldrh	r1, [r7, #10]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	6a3a      	ldr	r2, [r7, #32]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f9ca 	bl	8002f30 <I2C_MasterRequestWrite>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e08d      	b.n	8002cc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002bbc:	e066      	b.n	8002c8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	6a39      	ldr	r1, [r7, #32]
 8002bc2:	68f8      	ldr	r0, [r7, #12]
 8002bc4:	f000 fb0c 	bl	80031e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00d      	beq.n	8002bea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d107      	bne.n	8002be6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002be4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e06b      	b.n	8002cc2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	781a      	ldrb	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c12:	3b01      	subs	r3, #1
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695b      	ldr	r3, [r3, #20]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d11b      	bne.n	8002c60 <HAL_I2C_Master_Transmit+0x188>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d017      	beq.n	8002c60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	781a      	ldrb	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	6a39      	ldr	r1, [r7, #32]
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fafc 	bl	8003262 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00d      	beq.n	8002c8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d107      	bne.n	8002c88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e01a      	b.n	8002cc2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d194      	bne.n	8002bbe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e000      	b.n	8002cc2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002cc0:	2302      	movs	r3, #2
  }
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	00100002 	.word	0x00100002
 8002cd0:	ffff0000 	.word	0xffff0000

08002cd4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08a      	sub	sp, #40	; 0x28
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ce4:	f7fe fee0 	bl	8001aa8 <HAL_GetTick>
 8002ce8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002cea:	2301      	movs	r3, #1
 8002cec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b20      	cmp	r3, #32
 8002cf8:	f040 8111 	bne.w	8002f1e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	2319      	movs	r3, #25
 8002d02:	2201      	movs	r2, #1
 8002d04:	4988      	ldr	r1, [pc, #544]	; (8002f28 <HAL_I2C_IsDeviceReady+0x254>)
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f994 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d12:	2302      	movs	r3, #2
 8002d14:	e104      	b.n	8002f20 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_I2C_IsDeviceReady+0x50>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e0fd      	b.n	8002f20 <HAL_I2C_IsDeviceReady+0x24c>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d007      	beq.n	8002d4a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0201 	orr.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2224      	movs	r2, #36	; 0x24
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4a70      	ldr	r2, [pc, #448]	; (8002f2c <HAL_I2C_IsDeviceReady+0x258>)
 8002d6c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d7c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f952 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00d      	beq.n	8002db2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002da4:	d103      	bne.n	8002dae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e0b6      	b.n	8002f20 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002db2:	897b      	ldrh	r3, [r7, #10]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	461a      	mov	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dc0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002dc2:	f7fe fe71 	bl	8001aa8 <HAL_GetTick>
 8002dc6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	bf0c      	ite	eq
 8002dd6:	2301      	moveq	r3, #1
 8002dd8:	2300      	movne	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dec:	bf0c      	ite	eq
 8002dee:	2301      	moveq	r3, #1
 8002df0:	2300      	movne	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002df6:	e025      	b.n	8002e44 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002df8:	f7fe fe56 	bl	8001aa8 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d302      	bcc.n	8002e0e <HAL_I2C_IsDeviceReady+0x13a>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	22a0      	movs	r2, #160	; 0xa0
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	bf0c      	ite	eq
 8002e24:	2301      	moveq	r3, #1
 8002e26:	2300      	movne	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2ba0      	cmp	r3, #160	; 0xa0
 8002e4e:	d005      	beq.n	8002e5c <HAL_I2C_IsDeviceReady+0x188>
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d102      	bne.n	8002e5c <HAL_I2C_IsDeviceReady+0x188>
 8002e56:	7dbb      	ldrb	r3, [r7, #22]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0cd      	beq.n	8002df8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d129      	bne.n	8002ec6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e80:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	2319      	movs	r3, #25
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4921      	ldr	r1, [pc, #132]	; (8002f28 <HAL_I2C_IsDeviceReady+0x254>)
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f8c6 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e036      	b.n	8002f20 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e02c      	b.n	8002f20 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ede:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	2319      	movs	r3, #25
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	490f      	ldr	r1, [pc, #60]	; (8002f28 <HAL_I2C_IsDeviceReady+0x254>)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f8a2 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e012      	b.n	8002f20 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	3301      	adds	r3, #1
 8002efe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	f4ff af32 	bcc.w	8002d6e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2220      	movs	r2, #32
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f1e:	2302      	movs	r3, #2
  }
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3720      	adds	r7, #32
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	00100002 	.word	0x00100002
 8002f2c:	ffff0000 	.word	0xffff0000

08002f30 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	603b      	str	r3, [r7, #0]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d006      	beq.n	8002f5a <I2C_MasterRequestWrite+0x2a>
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d003      	beq.n	8002f5a <I2C_MasterRequestWrite+0x2a>
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f58:	d108      	bne.n	8002f6c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	e00b      	b.n	8002f84 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	2b12      	cmp	r3, #18
 8002f72:	d107      	bne.n	8002f84 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f82:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f84f 	bl	8003034 <I2C_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00d      	beq.n	8002fb8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002faa:	d103      	bne.n	8002fb4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e035      	b.n	8003024 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fc0:	d108      	bne.n	8002fd4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fc2:	897b      	ldrh	r3, [r7, #10]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fd0:	611a      	str	r2, [r3, #16]
 8002fd2:	e01b      	b.n	800300c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fd4:	897b      	ldrh	r3, [r7, #10]
 8002fd6:	11db      	asrs	r3, r3, #7
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	f003 0306 	and.w	r3, r3, #6
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f063 030f 	orn	r3, r3, #15
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	490e      	ldr	r1, [pc, #56]	; (800302c <I2C_MasterRequestWrite+0xfc>)
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 f875 	bl	80030e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e010      	b.n	8003024 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003002:	897b      	ldrh	r3, [r7, #10]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	4907      	ldr	r1, [pc, #28]	; (8003030 <I2C_MasterRequestWrite+0x100>)
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f865 	bl	80030e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	00010008 	.word	0x00010008
 8003030:	00010002 	.word	0x00010002

08003034 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003044:	e025      	b.n	8003092 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d021      	beq.n	8003092 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304e:	f7fe fd2b 	bl	8001aa8 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d302      	bcc.n	8003064 <I2C_WaitOnFlagUntilTimeout+0x30>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d116      	bne.n	8003092 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f043 0220 	orr.w	r2, r3, #32
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e023      	b.n	80030da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	0c1b      	lsrs	r3, r3, #16
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b01      	cmp	r3, #1
 800309a:	d10d      	bne.n	80030b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	43da      	mvns	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4013      	ands	r3, r2
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	bf0c      	ite	eq
 80030ae:	2301      	moveq	r3, #1
 80030b0:	2300      	movne	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	e00c      	b.n	80030d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	43da      	mvns	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4013      	ands	r3, r2
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	bf0c      	ite	eq
 80030ca:	2301      	moveq	r3, #1
 80030cc:	2300      	movne	r3, #0
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d0b6      	beq.n	8003046 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	60f8      	str	r0, [r7, #12]
 80030ea:	60b9      	str	r1, [r7, #8]
 80030ec:	607a      	str	r2, [r7, #4]
 80030ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030f0:	e051      	b.n	8003196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003100:	d123      	bne.n	800314a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003110:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800311a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f043 0204 	orr.w	r2, r3, #4
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e046      	b.n	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003150:	d021      	beq.n	8003196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003152:	f7fe fca9 	bl	8001aa8 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	429a      	cmp	r2, r3
 8003160:	d302      	bcc.n	8003168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d116      	bne.n	8003196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f043 0220 	orr.w	r2, r3, #32
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e020      	b.n	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	d10c      	bne.n	80031ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	43da      	mvns	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4013      	ands	r3, r2
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf14      	ite	ne
 80031b2:	2301      	movne	r3, #1
 80031b4:	2300      	moveq	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	e00b      	b.n	80031d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	43da      	mvns	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4013      	ands	r3, r2
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf14      	ite	ne
 80031cc:	2301      	movne	r3, #1
 80031ce:	2300      	moveq	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d18d      	bne.n	80030f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ec:	e02d      	b.n	800324a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 f878 	bl	80032e4 <I2C_IsAcknowledgeFailed>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e02d      	b.n	800325a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d021      	beq.n	800324a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003206:	f7fe fc4f 	bl	8001aa8 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	429a      	cmp	r2, r3
 8003214:	d302      	bcc.n	800321c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d116      	bne.n	800324a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f043 0220 	orr.w	r2, r3, #32
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e007      	b.n	800325a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003254:	2b80      	cmp	r3, #128	; 0x80
 8003256:	d1ca      	bne.n	80031ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b084      	sub	sp, #16
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800326e:	e02d      	b.n	80032cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f837 	bl	80032e4 <I2C_IsAcknowledgeFailed>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e02d      	b.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d021      	beq.n	80032cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003288:	f7fe fc0e 	bl	8001aa8 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	429a      	cmp	r2, r3
 8003296:	d302      	bcc.n	800329e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d116      	bne.n	80032cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f043 0220 	orr.w	r2, r3, #32
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e007      	b.n	80032dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695b      	ldr	r3, [r3, #20]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d1ca      	bne.n	8003270 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032fa:	d11b      	bne.n	8003334 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003304:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	f043 0204 	orr.w	r2, r3, #4
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e25b      	b.n	800380e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d075      	beq.n	800344e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003362:	4ba3      	ldr	r3, [pc, #652]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 030c 	and.w	r3, r3, #12
 800336a:	2b04      	cmp	r3, #4
 800336c:	d00c      	beq.n	8003388 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336e:	4ba0      	ldr	r3, [pc, #640]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003376:	2b08      	cmp	r3, #8
 8003378:	d112      	bne.n	80033a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800337a:	4b9d      	ldr	r3, [pc, #628]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003386:	d10b      	bne.n	80033a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003388:	4b99      	ldr	r3, [pc, #612]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d05b      	beq.n	800344c <HAL_RCC_OscConfig+0x108>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d157      	bne.n	800344c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e236      	b.n	800380e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a8:	d106      	bne.n	80033b8 <HAL_RCC_OscConfig+0x74>
 80033aa:	4b91      	ldr	r3, [pc, #580]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a90      	ldr	r2, [pc, #576]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e01d      	b.n	80033f4 <HAL_RCC_OscConfig+0xb0>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0x98>
 80033c2:	4b8b      	ldr	r3, [pc, #556]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a8a      	ldr	r2, [pc, #552]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b88      	ldr	r3, [pc, #544]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a87      	ldr	r2, [pc, #540]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e00b      	b.n	80033f4 <HAL_RCC_OscConfig+0xb0>
 80033dc:	4b84      	ldr	r3, [pc, #528]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a83      	ldr	r2, [pc, #524]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b81      	ldr	r3, [pc, #516]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a80      	ldr	r2, [pc, #512]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80033ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fe fb54 	bl	8001aa8 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003404:	f7fe fb50 	bl	8001aa8 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	; 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e1fb      	b.n	800380e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b76      	ldr	r3, [pc, #472]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0xc0>
 8003422:	e014      	b.n	800344e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fe fb40 	bl	8001aa8 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800342c:	f7fe fb3c 	bl	8001aa8 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e1e7      	b.n	800380e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343e:	4b6c      	ldr	r3, [pc, #432]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0xe8>
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d063      	beq.n	8003522 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800345a:	4b65      	ldr	r3, [pc, #404]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00b      	beq.n	800347e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003466:	4b62      	ldr	r3, [pc, #392]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800346e:	2b08      	cmp	r3, #8
 8003470:	d11c      	bne.n	80034ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003472:	4b5f      	ldr	r3, [pc, #380]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d116      	bne.n	80034ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347e:	4b5c      	ldr	r3, [pc, #368]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <HAL_RCC_OscConfig+0x152>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d001      	beq.n	8003496 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e1bb      	b.n	800380e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003496:	4b56      	ldr	r3, [pc, #344]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4952      	ldr	r1, [pc, #328]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034aa:	e03a      	b.n	8003522 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d020      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b4:	4b4f      	ldr	r3, [pc, #316]	; (80035f4 <HAL_RCC_OscConfig+0x2b0>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ba:	f7fe faf5 	bl	8001aa8 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c2:	f7fe faf1 	bl	8001aa8 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e19c      	b.n	800380e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d4:	4b46      	ldr	r3, [pc, #280]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e0:	4b43      	ldr	r3, [pc, #268]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4940      	ldr	r1, [pc, #256]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	600b      	str	r3, [r1, #0]
 80034f4:	e015      	b.n	8003522 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f6:	4b3f      	ldr	r3, [pc, #252]	; (80035f4 <HAL_RCC_OscConfig+0x2b0>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fc:	f7fe fad4 	bl	8001aa8 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003504:	f7fe fad0 	bl	8001aa8 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e17b      	b.n	800380e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003516:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f0      	bne.n	8003504 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0308 	and.w	r3, r3, #8
 800352a:	2b00      	cmp	r3, #0
 800352c:	d030      	beq.n	8003590 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d016      	beq.n	8003564 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003536:	4b30      	ldr	r3, [pc, #192]	; (80035f8 <HAL_RCC_OscConfig+0x2b4>)
 8003538:	2201      	movs	r2, #1
 800353a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe fab4 	bl	8001aa8 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003544:	f7fe fab0 	bl	8001aa8 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e15b      	b.n	800380e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003556:	4b26      	ldr	r3, [pc, #152]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0x200>
 8003562:	e015      	b.n	8003590 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003564:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <HAL_RCC_OscConfig+0x2b4>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356a:	f7fe fa9d 	bl	8001aa8 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003572:	f7fe fa99 	bl	8001aa8 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e144      	b.n	800380e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003584:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 8003586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80a0 	beq.w	80036de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800359e:	2300      	movs	r3, #0
 80035a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a2:	4b13      	ldr	r3, [pc, #76]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10f      	bne.n	80035ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <HAL_RCC_OscConfig+0x2ac>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	60bb      	str	r3, [r7, #8]
 80035c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ca:	2301      	movs	r3, #1
 80035cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_OscConfig+0x2b8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d121      	bne.n	800361e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035da:	4b08      	ldr	r3, [pc, #32]	; (80035fc <HAL_RCC_OscConfig+0x2b8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a07      	ldr	r2, [pc, #28]	; (80035fc <HAL_RCC_OscConfig+0x2b8>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e6:	f7fe fa5f 	bl	8001aa8 <HAL_GetTick>
 80035ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ec:	e011      	b.n	8003612 <HAL_RCC_OscConfig+0x2ce>
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800
 80035f4:	42470000 	.word	0x42470000
 80035f8:	42470e80 	.word	0x42470e80
 80035fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003600:	f7fe fa52 	bl	8001aa8 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e0fd      	b.n	800380e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003612:	4b81      	ldr	r3, [pc, #516]	; (8003818 <HAL_RCC_OscConfig+0x4d4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d106      	bne.n	8003634 <HAL_RCC_OscConfig+0x2f0>
 8003626:	4b7d      	ldr	r3, [pc, #500]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	4a7c      	ldr	r2, [pc, #496]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 800362c:	f043 0301 	orr.w	r3, r3, #1
 8003630:	6713      	str	r3, [r2, #112]	; 0x70
 8003632:	e01c      	b.n	800366e <HAL_RCC_OscConfig+0x32a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	2b05      	cmp	r3, #5
 800363a:	d10c      	bne.n	8003656 <HAL_RCC_OscConfig+0x312>
 800363c:	4b77      	ldr	r3, [pc, #476]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	4a76      	ldr	r2, [pc, #472]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 8003642:	f043 0304 	orr.w	r3, r3, #4
 8003646:	6713      	str	r3, [r2, #112]	; 0x70
 8003648:	4b74      	ldr	r3, [pc, #464]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	4a73      	ldr	r2, [pc, #460]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	6713      	str	r3, [r2, #112]	; 0x70
 8003654:	e00b      	b.n	800366e <HAL_RCC_OscConfig+0x32a>
 8003656:	4b71      	ldr	r3, [pc, #452]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	4a70      	ldr	r2, [pc, #448]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 800365c:	f023 0301 	bic.w	r3, r3, #1
 8003660:	6713      	str	r3, [r2, #112]	; 0x70
 8003662:	4b6e      	ldr	r3, [pc, #440]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a6d      	ldr	r2, [pc, #436]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 8003668:	f023 0304 	bic.w	r3, r3, #4
 800366c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d015      	beq.n	80036a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003676:	f7fe fa17 	bl	8001aa8 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800367c:	e00a      	b.n	8003694 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367e:	f7fe fa13 	bl	8001aa8 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f241 3288 	movw	r2, #5000	; 0x1388
 800368c:	4293      	cmp	r3, r2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e0bc      	b.n	800380e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003694:	4b61      	ldr	r3, [pc, #388]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0ee      	beq.n	800367e <HAL_RCC_OscConfig+0x33a>
 80036a0:	e014      	b.n	80036cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a2:	f7fe fa01 	bl	8001aa8 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a8:	e00a      	b.n	80036c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036aa:	f7fe f9fd 	bl	8001aa8 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e0a6      	b.n	800380e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c0:	4b56      	ldr	r3, [pc, #344]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1ee      	bne.n	80036aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d105      	bne.n	80036de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036d2:	4b52      	ldr	r3, [pc, #328]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	4a51      	ldr	r2, [pc, #324]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 80036d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 8092 	beq.w	800380c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036e8:	4b4c      	ldr	r3, [pc, #304]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 030c 	and.w	r3, r3, #12
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d05c      	beq.n	80037ae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d141      	bne.n	8003780 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fc:	4b48      	ldr	r3, [pc, #288]	; (8003820 <HAL_RCC_OscConfig+0x4dc>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003702:	f7fe f9d1 	bl	8001aa8 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003708:	e008      	b.n	800371c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800370a:	f7fe f9cd 	bl	8001aa8 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e078      	b.n	800380e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371c:	4b3f      	ldr	r3, [pc, #252]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f0      	bne.n	800370a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	019b      	lsls	r3, r3, #6
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	085b      	lsrs	r3, r3, #1
 8003740:	3b01      	subs	r3, #1
 8003742:	041b      	lsls	r3, r3, #16
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	061b      	lsls	r3, r3, #24
 800374c:	4933      	ldr	r1, [pc, #204]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 800374e:	4313      	orrs	r3, r2
 8003750:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003752:	4b33      	ldr	r3, [pc, #204]	; (8003820 <HAL_RCC_OscConfig+0x4dc>)
 8003754:	2201      	movs	r2, #1
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fe f9a6 	bl	8001aa8 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003760:	f7fe f9a2 	bl	8001aa8 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e04d      	b.n	800380e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003772:	4b2a      	ldr	r3, [pc, #168]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0x41c>
 800377e:	e045      	b.n	800380c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003780:	4b27      	ldr	r3, [pc, #156]	; (8003820 <HAL_RCC_OscConfig+0x4dc>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003786:	f7fe f98f 	bl	8001aa8 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378e:	f7fe f98b 	bl	8001aa8 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e036      	b.n	800380e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a0:	4b1e      	ldr	r3, [pc, #120]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f0      	bne.n	800378e <HAL_RCC_OscConfig+0x44a>
 80037ac:	e02e      	b.n	800380c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e029      	b.n	800380e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037ba:	4b18      	ldr	r3, [pc, #96]	; (800381c <HAL_RCC_OscConfig+0x4d8>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d11c      	bne.n	8003808 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d8:	429a      	cmp	r2, r3
 80037da:	d115      	bne.n	8003808 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037e2:	4013      	ands	r3, r2
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d10d      	bne.n	8003808 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d106      	bne.n	8003808 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e000      	b.n	800380e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40007000 	.word	0x40007000
 800381c:	40023800 	.word	0x40023800
 8003820:	42470060 	.word	0x42470060

08003824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0cc      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003838:	4b68      	ldr	r3, [pc, #416]	; (80039dc <HAL_RCC_ClockConfig+0x1b8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d90c      	bls.n	8003860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003846:	4b65      	ldr	r3, [pc, #404]	; (80039dc <HAL_RCC_ClockConfig+0x1b8>)
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b63      	ldr	r3, [pc, #396]	; (80039dc <HAL_RCC_ClockConfig+0x1b8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0b8      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d020      	beq.n	80038ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003878:	4b59      	ldr	r3, [pc, #356]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	4a58      	ldr	r2, [pc, #352]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003890:	4b53      	ldr	r3, [pc, #332]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	4a52      	ldr	r2, [pc, #328]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800389a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800389c:	4b50      	ldr	r3, [pc, #320]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	494d      	ldr	r1, [pc, #308]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d044      	beq.n	8003944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d107      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c2:	4b47      	ldr	r3, [pc, #284]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d119      	bne.n	8003902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e07f      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d003      	beq.n	80038e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d107      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e2:	4b3f      	ldr	r3, [pc, #252]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d109      	bne.n	8003902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e06f      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f2:	4b3b      	ldr	r3, [pc, #236]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e067      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003902:	4b37      	ldr	r3, [pc, #220]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f023 0203 	bic.w	r2, r3, #3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4934      	ldr	r1, [pc, #208]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003910:	4313      	orrs	r3, r2
 8003912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003914:	f7fe f8c8 	bl	8001aa8 <HAL_GetTick>
 8003918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391a:	e00a      	b.n	8003932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800391c:	f7fe f8c4 	bl	8001aa8 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f241 3288 	movw	r2, #5000	; 0x1388
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e04f      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003932:	4b2b      	ldr	r3, [pc, #172]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 020c 	and.w	r2, r3, #12
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	429a      	cmp	r2, r3
 8003942:	d1eb      	bne.n	800391c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003944:	4b25      	ldr	r3, [pc, #148]	; (80039dc <HAL_RCC_ClockConfig+0x1b8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 030f 	and.w	r3, r3, #15
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d20c      	bcs.n	800396c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003952:	4b22      	ldr	r3, [pc, #136]	; (80039dc <HAL_RCC_ClockConfig+0x1b8>)
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b20      	ldr	r3, [pc, #128]	; (80039dc <HAL_RCC_ClockConfig+0x1b8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e032      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003978:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4916      	ldr	r1, [pc, #88]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	4313      	orrs	r3, r2
 8003988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003996:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	490e      	ldr	r1, [pc, #56]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039aa:	f000 f821 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 80039ae:	4602      	mov	r2, r0
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	490a      	ldr	r1, [pc, #40]	; (80039e4 <HAL_RCC_ClockConfig+0x1c0>)
 80039bc:	5ccb      	ldrb	r3, [r1, r3]
 80039be:	fa22 f303 	lsr.w	r3, r2, r3
 80039c2:	4a09      	ldr	r2, [pc, #36]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039c6:	4b09      	ldr	r3, [pc, #36]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fd ff2c 	bl	8001828 <HAL_InitTick>

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40023c00 	.word	0x40023c00
 80039e0:	40023800 	.word	0x40023800
 80039e4:	0800a974 	.word	0x0800a974
 80039e8:	20000000 	.word	0x20000000
 80039ec:	20000004 	.word	0x20000004

080039f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80039f4:	b084      	sub	sp, #16
 80039f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	607b      	str	r3, [r7, #4]
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	2300      	movs	r3, #0
 8003a02:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a08:	4b67      	ldr	r3, [pc, #412]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 030c 	and.w	r3, r3, #12
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d00d      	beq.n	8003a30 <HAL_RCC_GetSysClockFreq+0x40>
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	f200 80bd 	bhi.w	8003b94 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <HAL_RCC_GetSysClockFreq+0x34>
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d003      	beq.n	8003a2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a22:	e0b7      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a24:	4b61      	ldr	r3, [pc, #388]	; (8003bac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a26:	60bb      	str	r3, [r7, #8]
       break;
 8003a28:	e0b7      	b.n	8003b9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a2a:	4b61      	ldr	r3, [pc, #388]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003a2c:	60bb      	str	r3, [r7, #8]
      break;
 8003a2e:	e0b4      	b.n	8003b9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a30:	4b5d      	ldr	r3, [pc, #372]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d04d      	beq.n	8003ae2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a46:	4b58      	ldr	r3, [pc, #352]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	099b      	lsrs	r3, r3, #6
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003a56:	f04f 0100 	mov.w	r1, #0
 8003a5a:	ea02 0800 	and.w	r8, r2, r0
 8003a5e:	ea03 0901 	and.w	r9, r3, r1
 8003a62:	4640      	mov	r0, r8
 8003a64:	4649      	mov	r1, r9
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	014b      	lsls	r3, r1, #5
 8003a70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a74:	0142      	lsls	r2, r0, #5
 8003a76:	4610      	mov	r0, r2
 8003a78:	4619      	mov	r1, r3
 8003a7a:	ebb0 0008 	subs.w	r0, r0, r8
 8003a7e:	eb61 0109 	sbc.w	r1, r1, r9
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	018b      	lsls	r3, r1, #6
 8003a8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a90:	0182      	lsls	r2, r0, #6
 8003a92:	1a12      	subs	r2, r2, r0
 8003a94:	eb63 0301 	sbc.w	r3, r3, r1
 8003a98:	f04f 0000 	mov.w	r0, #0
 8003a9c:	f04f 0100 	mov.w	r1, #0
 8003aa0:	00d9      	lsls	r1, r3, #3
 8003aa2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003aa6:	00d0      	lsls	r0, r2, #3
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	eb12 0208 	adds.w	r2, r2, r8
 8003ab0:	eb43 0309 	adc.w	r3, r3, r9
 8003ab4:	f04f 0000 	mov.w	r0, #0
 8003ab8:	f04f 0100 	mov.w	r1, #0
 8003abc:	0259      	lsls	r1, r3, #9
 8003abe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003ac2:	0250      	lsls	r0, r2, #9
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4619      	mov	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	f7fc fff2 	bl	8000abc <__aeabi_uldivmod>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4613      	mov	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	e04a      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae2:	4b31      	ldr	r3, [pc, #196]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	099b      	lsrs	r3, r3, #6
 8003ae8:	461a      	mov	r2, r3
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003af2:	f04f 0100 	mov.w	r1, #0
 8003af6:	ea02 0400 	and.w	r4, r2, r0
 8003afa:	ea03 0501 	and.w	r5, r3, r1
 8003afe:	4620      	mov	r0, r4
 8003b00:	4629      	mov	r1, r5
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	014b      	lsls	r3, r1, #5
 8003b0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b10:	0142      	lsls	r2, r0, #5
 8003b12:	4610      	mov	r0, r2
 8003b14:	4619      	mov	r1, r3
 8003b16:	1b00      	subs	r0, r0, r4
 8003b18:	eb61 0105 	sbc.w	r1, r1, r5
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	018b      	lsls	r3, r1, #6
 8003b26:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b2a:	0182      	lsls	r2, r0, #6
 8003b2c:	1a12      	subs	r2, r2, r0
 8003b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b32:	f04f 0000 	mov.w	r0, #0
 8003b36:	f04f 0100 	mov.w	r1, #0
 8003b3a:	00d9      	lsls	r1, r3, #3
 8003b3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b40:	00d0      	lsls	r0, r2, #3
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	1912      	adds	r2, r2, r4
 8003b48:	eb45 0303 	adc.w	r3, r5, r3
 8003b4c:	f04f 0000 	mov.w	r0, #0
 8003b50:	f04f 0100 	mov.w	r1, #0
 8003b54:	0299      	lsls	r1, r3, #10
 8003b56:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b5a:	0290      	lsls	r0, r2, #10
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4610      	mov	r0, r2
 8003b62:	4619      	mov	r1, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	461a      	mov	r2, r3
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	f7fc ffa6 	bl	8000abc <__aeabi_uldivmod>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4613      	mov	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b78:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	0c1b      	lsrs	r3, r3, #16
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	3301      	adds	r3, #1
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b90:	60bb      	str	r3, [r7, #8]
      break;
 8003b92:	e002      	b.n	8003b9a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003b96:	60bb      	str	r3, [r7, #8]
      break;
 8003b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	00f42400 	.word	0x00f42400
 8003bb0:	007a1200 	.word	0x007a1200

08003bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb8:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bba:	681b      	ldr	r3, [r3, #0]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000000 	.word	0x20000000

08003bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bd0:	f7ff fff0 	bl	8003bb4 <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	0a9b      	lsrs	r3, r3, #10
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4903      	ldr	r1, [pc, #12]	; (8003bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	0800a984 	.word	0x0800a984

08003bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bf8:	f7ff ffdc 	bl	8003bb4 <HAL_RCC_GetHCLKFreq>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	0b5b      	lsrs	r3, r3, #13
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4903      	ldr	r1, [pc, #12]	; (8003c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c0a:	5ccb      	ldrb	r3, [r1, r3]
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40023800 	.word	0x40023800
 8003c18:	0800a984 	.word	0x0800a984

08003c1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	220f      	movs	r2, #15
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c2c:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <HAL_RCC_GetClockConfig+0x5c>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 0203 	and.w	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <HAL_RCC_GetClockConfig+0x5c>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c44:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <HAL_RCC_GetClockConfig+0x5c>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c50:	4b09      	ldr	r3, [pc, #36]	; (8003c78 <HAL_RCC_GetClockConfig+0x5c>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	08db      	lsrs	r3, r3, #3
 8003c56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c5e:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <HAL_RCC_GetClockConfig+0x60>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 020f 	and.w	r2, r3, #15
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	601a      	str	r2, [r3, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	40023c00 	.word	0x40023c00

08003c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e01d      	b.n	8003cce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7fd fcb4 	bl	8001614 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f000 fa22 	bl	8004108 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b085      	sub	sp, #20
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0201 	orr.w	r2, r2, #1
 8003cec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b06      	cmp	r3, #6
 8003cfe:	d007      	beq.n	8003d10 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b082      	sub	sp, #8
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d122      	bne.n	8003d7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0302 	and.w	r3, r3, #2
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d11b      	bne.n	8003d7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f06f 0202 	mvn.w	r2, #2
 8003d4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f9b2 	bl	80040ca <HAL_TIM_IC_CaptureCallback>
 8003d66:	e005      	b.n	8003d74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f9a4 	bl	80040b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f9b5 	bl	80040de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b04      	cmp	r3, #4
 8003d86:	d122      	bne.n	8003dce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b04      	cmp	r3, #4
 8003d94:	d11b      	bne.n	8003dce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f06f 0204 	mvn.w	r2, #4
 8003d9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f988 	bl	80040ca <HAL_TIM_IC_CaptureCallback>
 8003dba:	e005      	b.n	8003dc8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f97a 	bl	80040b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f98b 	bl	80040de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f003 0308 	and.w	r3, r3, #8
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d122      	bne.n	8003e22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b08      	cmp	r3, #8
 8003de8:	d11b      	bne.n	8003e22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f06f 0208 	mvn.w	r2, #8
 8003df2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2204      	movs	r2, #4
 8003df8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f95e 	bl	80040ca <HAL_TIM_IC_CaptureCallback>
 8003e0e:	e005      	b.n	8003e1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f950 	bl	80040b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f961 	bl	80040de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d122      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b10      	cmp	r3, #16
 8003e3c:	d11b      	bne.n	8003e76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f06f 0210 	mvn.w	r2, #16
 8003e46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2208      	movs	r2, #8
 8003e4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f934 	bl	80040ca <HAL_TIM_IC_CaptureCallback>
 8003e62:	e005      	b.n	8003e70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f926 	bl	80040b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f937 	bl	80040de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d10e      	bne.n	8003ea2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d107      	bne.n	8003ea2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f06f 0201 	mvn.w	r2, #1
 8003e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7fd fa85 	bl	80013ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eac:	2b80      	cmp	r3, #128	; 0x80
 8003eae:	d10e      	bne.n	8003ece <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eba:	2b80      	cmp	r3, #128	; 0x80
 8003ebc:	d107      	bne.n	8003ece <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fadd 	bl	8004488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed8:	2b40      	cmp	r3, #64	; 0x40
 8003eda:	d10e      	bne.n	8003efa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee6:	2b40      	cmp	r3, #64	; 0x40
 8003ee8:	d107      	bne.n	8003efa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f8fc 	bl	80040f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	d10e      	bne.n	8003f26 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d107      	bne.n	8003f26 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f06f 0220 	mvn.w	r2, #32
 8003f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 faa7 	bl	8004474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_TIM_ConfigClockSource+0x18>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e0b3      	b.n	80040ae <HAL_TIM_ConfigClockSource+0x180>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2202      	movs	r2, #2
 8003f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f64:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f6c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f7e:	d03e      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0xd0>
 8003f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f84:	f200 8087 	bhi.w	8004096 <HAL_TIM_ConfigClockSource+0x168>
 8003f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f8c:	f000 8085 	beq.w	800409a <HAL_TIM_ConfigClockSource+0x16c>
 8003f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f94:	d87f      	bhi.n	8004096 <HAL_TIM_ConfigClockSource+0x168>
 8003f96:	2b70      	cmp	r3, #112	; 0x70
 8003f98:	d01a      	beq.n	8003fd0 <HAL_TIM_ConfigClockSource+0xa2>
 8003f9a:	2b70      	cmp	r3, #112	; 0x70
 8003f9c:	d87b      	bhi.n	8004096 <HAL_TIM_ConfigClockSource+0x168>
 8003f9e:	2b60      	cmp	r3, #96	; 0x60
 8003fa0:	d050      	beq.n	8004044 <HAL_TIM_ConfigClockSource+0x116>
 8003fa2:	2b60      	cmp	r3, #96	; 0x60
 8003fa4:	d877      	bhi.n	8004096 <HAL_TIM_ConfigClockSource+0x168>
 8003fa6:	2b50      	cmp	r3, #80	; 0x50
 8003fa8:	d03c      	beq.n	8004024 <HAL_TIM_ConfigClockSource+0xf6>
 8003faa:	2b50      	cmp	r3, #80	; 0x50
 8003fac:	d873      	bhi.n	8004096 <HAL_TIM_ConfigClockSource+0x168>
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d058      	beq.n	8004064 <HAL_TIM_ConfigClockSource+0x136>
 8003fb2:	2b40      	cmp	r3, #64	; 0x40
 8003fb4:	d86f      	bhi.n	8004096 <HAL_TIM_ConfigClockSource+0x168>
 8003fb6:	2b30      	cmp	r3, #48	; 0x30
 8003fb8:	d064      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x156>
 8003fba:	2b30      	cmp	r3, #48	; 0x30
 8003fbc:	d86b      	bhi.n	8004096 <HAL_TIM_ConfigClockSource+0x168>
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	d060      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x156>
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d867      	bhi.n	8004096 <HAL_TIM_ConfigClockSource+0x168>
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d05c      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x156>
 8003fca:	2b10      	cmp	r3, #16
 8003fcc:	d05a      	beq.n	8004084 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003fce:	e062      	b.n	8004096 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	6899      	ldr	r1, [r3, #8]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f000 f9ac 	bl	800433c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ff2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	609a      	str	r2, [r3, #8]
      break;
 8003ffc:	e04e      	b.n	800409c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6818      	ldr	r0, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6899      	ldr	r1, [r3, #8]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f000 f995 	bl	800433c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004020:	609a      	str	r2, [r3, #8]
      break;
 8004022:	e03b      	b.n	800409c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	6859      	ldr	r1, [r3, #4]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	461a      	mov	r2, r3
 8004032:	f000 f909 	bl	8004248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2150      	movs	r1, #80	; 0x50
 800403c:	4618      	mov	r0, r3
 800403e:	f000 f962 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004042:	e02b      	b.n	800409c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	6859      	ldr	r1, [r3, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	461a      	mov	r2, r3
 8004052:	f000 f928 	bl	80042a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2160      	movs	r1, #96	; 0x60
 800405c:	4618      	mov	r0, r3
 800405e:	f000 f952 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004062:	e01b      	b.n	800409c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	6859      	ldr	r1, [r3, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	461a      	mov	r2, r3
 8004072:	f000 f8e9 	bl	8004248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2140      	movs	r1, #64	; 0x40
 800407c:	4618      	mov	r0, r3
 800407e:	f000 f942 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004082:	e00b      	b.n	800409c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4619      	mov	r1, r3
 800408e:	4610      	mov	r0, r2
 8004090:	f000 f939 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004094:	e002      	b.n	800409c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004096:	bf00      	nop
 8004098:	e000      	b.n	800409c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800409a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a40      	ldr	r2, [pc, #256]	; (800421c <TIM_Base_SetConfig+0x114>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d013      	beq.n	8004148 <TIM_Base_SetConfig+0x40>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004126:	d00f      	beq.n	8004148 <TIM_Base_SetConfig+0x40>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a3d      	ldr	r2, [pc, #244]	; (8004220 <TIM_Base_SetConfig+0x118>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00b      	beq.n	8004148 <TIM_Base_SetConfig+0x40>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a3c      	ldr	r2, [pc, #240]	; (8004224 <TIM_Base_SetConfig+0x11c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d007      	beq.n	8004148 <TIM_Base_SetConfig+0x40>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a3b      	ldr	r2, [pc, #236]	; (8004228 <TIM_Base_SetConfig+0x120>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_Base_SetConfig+0x40>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a3a      	ldr	r2, [pc, #232]	; (800422c <TIM_Base_SetConfig+0x124>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d108      	bne.n	800415a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a2f      	ldr	r2, [pc, #188]	; (800421c <TIM_Base_SetConfig+0x114>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d02b      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004168:	d027      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a2c      	ldr	r2, [pc, #176]	; (8004220 <TIM_Base_SetConfig+0x118>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d023      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a2b      	ldr	r2, [pc, #172]	; (8004224 <TIM_Base_SetConfig+0x11c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01f      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a2a      	ldr	r2, [pc, #168]	; (8004228 <TIM_Base_SetConfig+0x120>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01b      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a29      	ldr	r2, [pc, #164]	; (800422c <TIM_Base_SetConfig+0x124>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d017      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a28      	ldr	r2, [pc, #160]	; (8004230 <TIM_Base_SetConfig+0x128>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d013      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a27      	ldr	r2, [pc, #156]	; (8004234 <TIM_Base_SetConfig+0x12c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00f      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a26      	ldr	r2, [pc, #152]	; (8004238 <TIM_Base_SetConfig+0x130>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00b      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a25      	ldr	r2, [pc, #148]	; (800423c <TIM_Base_SetConfig+0x134>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d007      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a24      	ldr	r2, [pc, #144]	; (8004240 <TIM_Base_SetConfig+0x138>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d003      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a23      	ldr	r2, [pc, #140]	; (8004244 <TIM_Base_SetConfig+0x13c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d108      	bne.n	80041cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a0a      	ldr	r2, [pc, #40]	; (800421c <TIM_Base_SetConfig+0x114>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <TIM_Base_SetConfig+0xf8>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a0c      	ldr	r2, [pc, #48]	; (800422c <TIM_Base_SetConfig+0x124>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d103      	bne.n	8004208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	615a      	str	r2, [r3, #20]
}
 800420e:	bf00      	nop
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40000400 	.word	0x40000400
 8004224:	40000800 	.word	0x40000800
 8004228:	40000c00 	.word	0x40000c00
 800422c:	40010400 	.word	0x40010400
 8004230:	40014000 	.word	0x40014000
 8004234:	40014400 	.word	0x40014400
 8004238:	40014800 	.word	0x40014800
 800423c:	40001800 	.word	0x40001800
 8004240:	40001c00 	.word	0x40001c00
 8004244:	40002000 	.word	0x40002000

08004248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f023 0201 	bic.w	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f023 030a 	bic.w	r3, r3, #10
 8004284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	621a      	str	r2, [r3, #32]
}
 800429a:	bf00      	nop
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b087      	sub	sp, #28
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	f023 0210 	bic.w	r2, r3, #16
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	031b      	lsls	r3, r3, #12
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	f043 0307 	orr.w	r3, r3, #7
 8004328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	609a      	str	r2, [r3, #8]
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004356:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	021a      	lsls	r2, r3, #8
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	431a      	orrs	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4313      	orrs	r3, r2
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	609a      	str	r2, [r3, #8]
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004390:	2302      	movs	r3, #2
 8004392:	e05a      	b.n	800444a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a21      	ldr	r2, [pc, #132]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d022      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e0:	d01d      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a1d      	ldr	r2, [pc, #116]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d018      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1b      	ldr	r2, [pc, #108]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d013      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1a      	ldr	r2, [pc, #104]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00e      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a18      	ldr	r2, [pc, #96]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d009      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a17      	ldr	r2, [pc, #92]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d004      	beq.n	800441e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a15      	ldr	r2, [pc, #84]	; (8004470 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d10c      	bne.n	8004438 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004424:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	4313      	orrs	r3, r2
 800442e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40010000 	.word	0x40010000
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40010400 	.word	0x40010400
 800446c:	40014000 	.word	0x40014000
 8004470:	40001800 	.word	0x40001800

08004474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e03f      	b.n	800452e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fd f8cc 	bl	8001660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2224      	movs	r2, #36	; 0x24
 80044cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fab3 	bl	8004a4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695a      	ldr	r2, [r3, #20]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004504:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004514:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	4613      	mov	r3, r2
 8004542:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b20      	cmp	r3, #32
 800454e:	d140      	bne.n	80045d2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <HAL_UART_Receive_IT+0x26>
 8004556:	88fb      	ldrh	r3, [r7, #6]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e039      	b.n	80045d4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <HAL_UART_Receive_IT+0x38>
 800456a:	2302      	movs	r3, #2
 800456c:	e032      	b.n	80045d4 <HAL_UART_Receive_IT+0x9e>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	68ba      	ldr	r2, [r7, #8]
 800457a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	88fa      	ldrh	r2, [r7, #6]
 8004580:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	88fa      	ldrh	r2, [r7, #6]
 8004586:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2222      	movs	r2, #34	; 0x22
 8004592:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ac:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	695a      	ldr	r2, [r3, #20]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0201 	orr.w	r2, r2, #1
 80045bc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0220 	orr.w	r2, r2, #32
 80045cc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e000      	b.n	80045d4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80045d2:	2302      	movs	r3, #2
  }
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004600:	2300      	movs	r3, #0
 8004602:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10d      	bne.n	8004632 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d008      	beq.n	8004632 <HAL_UART_IRQHandler+0x52>
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	f003 0320 	and.w	r3, r3, #32
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f98c 	bl	8004948 <UART_Receive_IT>
      return;
 8004630:	e0d0      	b.n	80047d4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 80b0 	beq.w	800479a <HAL_UART_IRQHandler+0x1ba>
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d105      	bne.n	8004650 <HAL_UART_IRQHandler+0x70>
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 80a5 	beq.w	800479a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_UART_IRQHandler+0x90>
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004668:	f043 0201 	orr.w	r2, r3, #1
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_UART_IRQHandler+0xb0>
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004688:	f043 0202 	orr.w	r2, r3, #2
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_UART_IRQHandler+0xd0>
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a8:	f043 0204 	orr.w	r2, r3, #4
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00f      	beq.n	80046da <HAL_UART_IRQHandler+0xfa>
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d104      	bne.n	80046ce <HAL_UART_IRQHandler+0xee>
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	f043 0208 	orr.w	r2, r3, #8
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d077      	beq.n	80047d2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d007      	beq.n	80046fc <HAL_UART_IRQHandler+0x11c>
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f926 	bl	8004948 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b40      	cmp	r3, #64	; 0x40
 8004708:	bf0c      	ite	eq
 800470a:	2301      	moveq	r3, #1
 800470c:	2300      	movne	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d102      	bne.n	8004724 <HAL_UART_IRQHandler+0x144>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d031      	beq.n	8004788 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f86f 	bl	8004808 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004734:	2b40      	cmp	r3, #64	; 0x40
 8004736:	d123      	bne.n	8004780 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695a      	ldr	r2, [r3, #20]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004746:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474c:	2b00      	cmp	r3, #0
 800474e:	d013      	beq.n	8004778 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004754:	4a21      	ldr	r2, [pc, #132]	; (80047dc <HAL_UART_IRQHandler+0x1fc>)
 8004756:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800475c:	4618      	mov	r0, r3
 800475e:	f7fd fea1 	bl	80024a4 <HAL_DMA_Abort_IT>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d016      	beq.n	8004796 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800476c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004772:	4610      	mov	r0, r2
 8004774:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004776:	e00e      	b.n	8004796 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f83b 	bl	80047f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800477e:	e00a      	b.n	8004796 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f837 	bl	80047f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004786:	e006      	b.n	8004796 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f833 	bl	80047f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004794:	e01d      	b.n	80047d2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004796:	bf00      	nop
    return;
 8004798:	e01b      	b.n	80047d2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_UART_IRQHandler+0x1d6>
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d003      	beq.n	80047b6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f85c 	bl	800486c <UART_Transmit_IT>
    return;
 80047b4:	e00e      	b.n	80047d4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d009      	beq.n	80047d4 <HAL_UART_IRQHandler+0x1f4>
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d004      	beq.n	80047d4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f8a4 	bl	8004918 <UART_EndTransmit_IT>
    return;
 80047d0:	e000      	b.n	80047d4 <HAL_UART_IRQHandler+0x1f4>
    return;
 80047d2:	bf00      	nop
  }
}
 80047d4:	3720      	adds	r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	08004845 	.word	0x08004845

080047e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800481e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695a      	ldr	r2, [r3, #20]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f7ff ffc8 	bl	80047f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004864:	bf00      	nop
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b21      	cmp	r3, #33	; 0x21
 800487e:	d144      	bne.n	800490a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004888:	d11a      	bne.n	80048c0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800489e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d105      	bne.n	80048b4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	1c9a      	adds	r2, r3, #2
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	621a      	str	r2, [r3, #32]
 80048b2:	e00e      	b.n	80048d2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	621a      	str	r2, [r3, #32]
 80048be:	e008      	b.n	80048d2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	1c59      	adds	r1, r3, #1
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6211      	str	r1, [r2, #32]
 80048ca:	781a      	ldrb	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29b      	uxth	r3, r3
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	4619      	mov	r1, r3
 80048e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10f      	bne.n	8004906 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004904:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	e000      	b.n	800490c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800490a:	2302      	movs	r3, #2
  }
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800492e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff ff51 	bl	80047e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b22      	cmp	r3, #34	; 0x22
 800495a:	d171      	bne.n	8004a40 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004964:	d123      	bne.n	80049ae <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10e      	bne.n	8004992 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	b29b      	uxth	r3, r3
 800497c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	1c9a      	adds	r2, r3, #2
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	629a      	str	r2, [r3, #40]	; 0x28
 8004990:	e029      	b.n	80049e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	b29b      	uxth	r3, r3
 800499a:	b2db      	uxtb	r3, r3
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	629a      	str	r2, [r3, #40]	; 0x28
 80049ac:	e01b      	b.n	80049e6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10a      	bne.n	80049cc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6858      	ldr	r0, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c0:	1c59      	adds	r1, r3, #1
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6291      	str	r1, [r2, #40]	; 0x28
 80049c6:	b2c2      	uxtb	r2, r0
 80049c8:	701a      	strb	r2, [r3, #0]
 80049ca:	e00c      	b.n	80049e6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	1c58      	adds	r0, r3, #1
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	6288      	str	r0, [r1, #40]	; 0x28
 80049de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	4619      	mov	r1, r3
 80049f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d120      	bne.n	8004a3c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0220 	bic.w	r2, r2, #32
 8004a08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	695a      	ldr	r2, [r3, #20]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0201 	bic.w	r2, r2, #1
 8004a28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f004 fe97 	bl	8009766 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	e002      	b.n	8004a42 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	e000      	b.n	8004a42 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004a40:	2302      	movs	r3, #2
  }
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a50:	b0bd      	sub	sp, #244	; 0xf4
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a68:	68d9      	ldr	r1, [r3, #12]
 8004a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	ea40 0301 	orr.w	r3, r0, r1
 8004a74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8004a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004aa4:	f021 010c 	bic.w	r1, r1, #12
 8004aa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004ab2:	430b      	orrs	r3, r1
 8004ab4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac6:	6999      	ldr	r1, [r3, #24]
 8004ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	ea40 0301 	orr.w	r3, r0, r1
 8004ad2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ade:	f040 81a5 	bne.w	8004e2c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	4bcd      	ldr	r3, [pc, #820]	; (8004e20 <UART_SetConfig+0x3d4>)
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d006      	beq.n	8004afc <UART_SetConfig+0xb0>
 8004aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4bcb      	ldr	r3, [pc, #812]	; (8004e24 <UART_SetConfig+0x3d8>)
 8004af6:	429a      	cmp	r2, r3
 8004af8:	f040 80cb 	bne.w	8004c92 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004afc:	f7ff f87a 	bl	8003bf4 <HAL_RCC_GetPCLK2Freq>
 8004b00:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b08:	461c      	mov	r4, r3
 8004b0a:	f04f 0500 	mov.w	r5, #0
 8004b0e:	4622      	mov	r2, r4
 8004b10:	462b      	mov	r3, r5
 8004b12:	1891      	adds	r1, r2, r2
 8004b14:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004b18:	415b      	adcs	r3, r3
 8004b1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004b1e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004b22:	1912      	adds	r2, r2, r4
 8004b24:	eb45 0303 	adc.w	r3, r5, r3
 8004b28:	f04f 0000 	mov.w	r0, #0
 8004b2c:	f04f 0100 	mov.w	r1, #0
 8004b30:	00d9      	lsls	r1, r3, #3
 8004b32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b36:	00d0      	lsls	r0, r2, #3
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	1911      	adds	r1, r2, r4
 8004b3e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8004b42:	416b      	adcs	r3, r5
 8004b44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	1891      	adds	r1, r2, r2
 8004b56:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004b5a:	415b      	adcs	r3, r3
 8004b5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b60:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004b64:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004b68:	f7fb ffa8 	bl	8000abc <__aeabi_uldivmod>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4bad      	ldr	r3, [pc, #692]	; (8004e28 <UART_SetConfig+0x3dc>)
 8004b72:	fba3 2302 	umull	r2, r3, r3, r2
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	011e      	lsls	r6, r3, #4
 8004b7a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b7e:	461c      	mov	r4, r3
 8004b80:	f04f 0500 	mov.w	r5, #0
 8004b84:	4622      	mov	r2, r4
 8004b86:	462b      	mov	r3, r5
 8004b88:	1891      	adds	r1, r2, r2
 8004b8a:	67b9      	str	r1, [r7, #120]	; 0x78
 8004b8c:	415b      	adcs	r3, r3
 8004b8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b90:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004b94:	1912      	adds	r2, r2, r4
 8004b96:	eb45 0303 	adc.w	r3, r5, r3
 8004b9a:	f04f 0000 	mov.w	r0, #0
 8004b9e:	f04f 0100 	mov.w	r1, #0
 8004ba2:	00d9      	lsls	r1, r3, #3
 8004ba4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ba8:	00d0      	lsls	r0, r2, #3
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	1911      	adds	r1, r2, r4
 8004bb0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004bb4:	416b      	adcs	r3, r5
 8004bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	1891      	adds	r1, r2, r2
 8004bc8:	6739      	str	r1, [r7, #112]	; 0x70
 8004bca:	415b      	adcs	r3, r3
 8004bcc:	677b      	str	r3, [r7, #116]	; 0x74
 8004bce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004bd2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004bd6:	f7fb ff71 	bl	8000abc <__aeabi_uldivmod>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4b92      	ldr	r3, [pc, #584]	; (8004e28 <UART_SetConfig+0x3dc>)
 8004be0:	fba3 1302 	umull	r1, r3, r3, r2
 8004be4:	095b      	lsrs	r3, r3, #5
 8004be6:	2164      	movs	r1, #100	; 0x64
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	3332      	adds	r3, #50	; 0x32
 8004bf2:	4a8d      	ldr	r2, [pc, #564]	; (8004e28 <UART_SetConfig+0x3dc>)
 8004bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf8:	095b      	lsrs	r3, r3, #5
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c00:	441e      	add	r6, r3
 8004c02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c06:	4618      	mov	r0, r3
 8004c08:	f04f 0100 	mov.w	r1, #0
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	1894      	adds	r4, r2, r2
 8004c12:	66bc      	str	r4, [r7, #104]	; 0x68
 8004c14:	415b      	adcs	r3, r3
 8004c16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c18:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004c1c:	1812      	adds	r2, r2, r0
 8004c1e:	eb41 0303 	adc.w	r3, r1, r3
 8004c22:	f04f 0400 	mov.w	r4, #0
 8004c26:	f04f 0500 	mov.w	r5, #0
 8004c2a:	00dd      	lsls	r5, r3, #3
 8004c2c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c30:	00d4      	lsls	r4, r2, #3
 8004c32:	4622      	mov	r2, r4
 8004c34:	462b      	mov	r3, r5
 8004c36:	1814      	adds	r4, r2, r0
 8004c38:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004c3c:	414b      	adcs	r3, r1
 8004c3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	1891      	adds	r1, r2, r2
 8004c50:	6639      	str	r1, [r7, #96]	; 0x60
 8004c52:	415b      	adcs	r3, r3
 8004c54:	667b      	str	r3, [r7, #100]	; 0x64
 8004c56:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004c5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c5e:	f7fb ff2d 	bl	8000abc <__aeabi_uldivmod>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4b70      	ldr	r3, [pc, #448]	; (8004e28 <UART_SetConfig+0x3dc>)
 8004c68:	fba3 1302 	umull	r1, r3, r3, r2
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	2164      	movs	r1, #100	; 0x64
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	3332      	adds	r3, #50	; 0x32
 8004c7a:	4a6b      	ldr	r2, [pc, #428]	; (8004e28 <UART_SetConfig+0x3dc>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	f003 0207 	and.w	r2, r3, #7
 8004c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4432      	add	r2, r6
 8004c8e:	609a      	str	r2, [r3, #8]
 8004c90:	e26d      	b.n	800516e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c92:	f7fe ff9b 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8004c96:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c9e:	461c      	mov	r4, r3
 8004ca0:	f04f 0500 	mov.w	r5, #0
 8004ca4:	4622      	mov	r2, r4
 8004ca6:	462b      	mov	r3, r5
 8004ca8:	1891      	adds	r1, r2, r2
 8004caa:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cac:	415b      	adcs	r3, r3
 8004cae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cb0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cb4:	1912      	adds	r2, r2, r4
 8004cb6:	eb45 0303 	adc.w	r3, r5, r3
 8004cba:	f04f 0000 	mov.w	r0, #0
 8004cbe:	f04f 0100 	mov.w	r1, #0
 8004cc2:	00d9      	lsls	r1, r3, #3
 8004cc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cc8:	00d0      	lsls	r0, r2, #3
 8004cca:	4602      	mov	r2, r0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	1911      	adds	r1, r2, r4
 8004cd0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004cd4:	416b      	adcs	r3, r5
 8004cd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	1891      	adds	r1, r2, r2
 8004ce8:	6539      	str	r1, [r7, #80]	; 0x50
 8004cea:	415b      	adcs	r3, r3
 8004cec:	657b      	str	r3, [r7, #84]	; 0x54
 8004cee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004cf2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004cf6:	f7fb fee1 	bl	8000abc <__aeabi_uldivmod>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4b4a      	ldr	r3, [pc, #296]	; (8004e28 <UART_SetConfig+0x3dc>)
 8004d00:	fba3 2302 	umull	r2, r3, r3, r2
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	011e      	lsls	r6, r3, #4
 8004d08:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d0c:	461c      	mov	r4, r3
 8004d0e:	f04f 0500 	mov.w	r5, #0
 8004d12:	4622      	mov	r2, r4
 8004d14:	462b      	mov	r3, r5
 8004d16:	1891      	adds	r1, r2, r2
 8004d18:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d1a:	415b      	adcs	r3, r3
 8004d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d1e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d22:	1912      	adds	r2, r2, r4
 8004d24:	eb45 0303 	adc.w	r3, r5, r3
 8004d28:	f04f 0000 	mov.w	r0, #0
 8004d2c:	f04f 0100 	mov.w	r1, #0
 8004d30:	00d9      	lsls	r1, r3, #3
 8004d32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d36:	00d0      	lsls	r0, r2, #3
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	1911      	adds	r1, r2, r4
 8004d3e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004d42:	416b      	adcs	r3, r5
 8004d44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	1891      	adds	r1, r2, r2
 8004d56:	6439      	str	r1, [r7, #64]	; 0x40
 8004d58:	415b      	adcs	r3, r3
 8004d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d60:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004d64:	f7fb feaa 	bl	8000abc <__aeabi_uldivmod>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4b2e      	ldr	r3, [pc, #184]	; (8004e28 <UART_SetConfig+0x3dc>)
 8004d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	2164      	movs	r1, #100	; 0x64
 8004d76:	fb01 f303 	mul.w	r3, r1, r3
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	3332      	adds	r3, #50	; 0x32
 8004d80:	4a29      	ldr	r2, [pc, #164]	; (8004e28 <UART_SetConfig+0x3dc>)
 8004d82:	fba2 2303 	umull	r2, r3, r2, r3
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d8e:	441e      	add	r6, r3
 8004d90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d94:	4618      	mov	r0, r3
 8004d96:	f04f 0100 	mov.w	r1, #0
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	1894      	adds	r4, r2, r2
 8004da0:	63bc      	str	r4, [r7, #56]	; 0x38
 8004da2:	415b      	adcs	r3, r3
 8004da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004da6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004daa:	1812      	adds	r2, r2, r0
 8004dac:	eb41 0303 	adc.w	r3, r1, r3
 8004db0:	f04f 0400 	mov.w	r4, #0
 8004db4:	f04f 0500 	mov.w	r5, #0
 8004db8:	00dd      	lsls	r5, r3, #3
 8004dba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004dbe:	00d4      	lsls	r4, r2, #3
 8004dc0:	4622      	mov	r2, r4
 8004dc2:	462b      	mov	r3, r5
 8004dc4:	1814      	adds	r4, r2, r0
 8004dc6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8004dca:	414b      	adcs	r3, r1
 8004dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	1891      	adds	r1, r2, r2
 8004dde:	6339      	str	r1, [r7, #48]	; 0x30
 8004de0:	415b      	adcs	r3, r3
 8004de2:	637b      	str	r3, [r7, #52]	; 0x34
 8004de4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004de8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dec:	f7fb fe66 	bl	8000abc <__aeabi_uldivmod>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <UART_SetConfig+0x3dc>)
 8004df6:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	2164      	movs	r1, #100	; 0x64
 8004dfe:	fb01 f303 	mul.w	r3, r1, r3
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	3332      	adds	r3, #50	; 0x32
 8004e08:	4a07      	ldr	r2, [pc, #28]	; (8004e28 <UART_SetConfig+0x3dc>)
 8004e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	f003 0207 	and.w	r2, r3, #7
 8004e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4432      	add	r2, r6
 8004e1c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004e1e:	e1a6      	b.n	800516e <UART_SetConfig+0x722>
 8004e20:	40011000 	.word	0x40011000
 8004e24:	40011400 	.word	0x40011400
 8004e28:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4bd1      	ldr	r3, [pc, #836]	; (8005178 <UART_SetConfig+0x72c>)
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d006      	beq.n	8004e46 <UART_SetConfig+0x3fa>
 8004e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4bcf      	ldr	r3, [pc, #828]	; (800517c <UART_SetConfig+0x730>)
 8004e40:	429a      	cmp	r2, r3
 8004e42:	f040 80ca 	bne.w	8004fda <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e46:	f7fe fed5 	bl	8003bf4 <HAL_RCC_GetPCLK2Freq>
 8004e4a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e4e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e52:	461c      	mov	r4, r3
 8004e54:	f04f 0500 	mov.w	r5, #0
 8004e58:	4622      	mov	r2, r4
 8004e5a:	462b      	mov	r3, r5
 8004e5c:	1891      	adds	r1, r2, r2
 8004e5e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e60:	415b      	adcs	r3, r3
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e68:	1912      	adds	r2, r2, r4
 8004e6a:	eb45 0303 	adc.w	r3, r5, r3
 8004e6e:	f04f 0000 	mov.w	r0, #0
 8004e72:	f04f 0100 	mov.w	r1, #0
 8004e76:	00d9      	lsls	r1, r3, #3
 8004e78:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e7c:	00d0      	lsls	r0, r2, #3
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	eb12 0a04 	adds.w	sl, r2, r4
 8004e86:	eb43 0b05 	adc.w	fp, r3, r5
 8004e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f04f 0100 	mov.w	r1, #0
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	008b      	lsls	r3, r1, #2
 8004ea0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ea4:	0082      	lsls	r2, r0, #2
 8004ea6:	4650      	mov	r0, sl
 8004ea8:	4659      	mov	r1, fp
 8004eaa:	f7fb fe07 	bl	8000abc <__aeabi_uldivmod>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4bb3      	ldr	r3, [pc, #716]	; (8005180 <UART_SetConfig+0x734>)
 8004eb4:	fba3 2302 	umull	r2, r3, r3, r2
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	011e      	lsls	r6, r3, #4
 8004ebc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f04f 0100 	mov.w	r1, #0
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	1894      	adds	r4, r2, r2
 8004ecc:	623c      	str	r4, [r7, #32]
 8004ece:	415b      	adcs	r3, r3
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ed6:	1812      	adds	r2, r2, r0
 8004ed8:	eb41 0303 	adc.w	r3, r1, r3
 8004edc:	f04f 0400 	mov.w	r4, #0
 8004ee0:	f04f 0500 	mov.w	r5, #0
 8004ee4:	00dd      	lsls	r5, r3, #3
 8004ee6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004eea:	00d4      	lsls	r4, r2, #3
 8004eec:	4622      	mov	r2, r4
 8004eee:	462b      	mov	r3, r5
 8004ef0:	1814      	adds	r4, r2, r0
 8004ef2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004ef6:	414b      	adcs	r3, r1
 8004ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f04f 0100 	mov.w	r1, #0
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	008b      	lsls	r3, r1, #2
 8004f12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f16:	0082      	lsls	r2, r0, #2
 8004f18:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004f1c:	f7fb fdce 	bl	8000abc <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4b96      	ldr	r3, [pc, #600]	; (8005180 <UART_SetConfig+0x734>)
 8004f26:	fba3 1302 	umull	r1, r3, r3, r2
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	2164      	movs	r1, #100	; 0x64
 8004f2e:	fb01 f303 	mul.w	r3, r1, r3
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	3332      	adds	r3, #50	; 0x32
 8004f38:	4a91      	ldr	r2, [pc, #580]	; (8005180 <UART_SetConfig+0x734>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f44:	441e      	add	r6, r3
 8004f46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f04f 0100 	mov.w	r1, #0
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	1894      	adds	r4, r2, r2
 8004f56:	61bc      	str	r4, [r7, #24]
 8004f58:	415b      	adcs	r3, r3
 8004f5a:	61fb      	str	r3, [r7, #28]
 8004f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f60:	1812      	adds	r2, r2, r0
 8004f62:	eb41 0303 	adc.w	r3, r1, r3
 8004f66:	f04f 0400 	mov.w	r4, #0
 8004f6a:	f04f 0500 	mov.w	r5, #0
 8004f6e:	00dd      	lsls	r5, r3, #3
 8004f70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f74:	00d4      	lsls	r4, r2, #3
 8004f76:	4622      	mov	r2, r4
 8004f78:	462b      	mov	r3, r5
 8004f7a:	1814      	adds	r4, r2, r0
 8004f7c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004f80:	414b      	adcs	r3, r1
 8004f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f04f 0100 	mov.w	r1, #0
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	008b      	lsls	r3, r1, #2
 8004f9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fa0:	0082      	lsls	r2, r0, #2
 8004fa2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004fa6:	f7fb fd89 	bl	8000abc <__aeabi_uldivmod>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4b74      	ldr	r3, [pc, #464]	; (8005180 <UART_SetConfig+0x734>)
 8004fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fb4:	095b      	lsrs	r3, r3, #5
 8004fb6:	2164      	movs	r1, #100	; 0x64
 8004fb8:	fb01 f303 	mul.w	r3, r1, r3
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	011b      	lsls	r3, r3, #4
 8004fc0:	3332      	adds	r3, #50	; 0x32
 8004fc2:	4a6f      	ldr	r2, [pc, #444]	; (8005180 <UART_SetConfig+0x734>)
 8004fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	f003 020f 	and.w	r2, r3, #15
 8004fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4432      	add	r2, r6
 8004fd6:	609a      	str	r2, [r3, #8]
 8004fd8:	e0c9      	b.n	800516e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fda:	f7fe fdf7 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8004fde:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fe2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004fe6:	461c      	mov	r4, r3
 8004fe8:	f04f 0500 	mov.w	r5, #0
 8004fec:	4622      	mov	r2, r4
 8004fee:	462b      	mov	r3, r5
 8004ff0:	1891      	adds	r1, r2, r2
 8004ff2:	6139      	str	r1, [r7, #16]
 8004ff4:	415b      	adcs	r3, r3
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ffc:	1912      	adds	r2, r2, r4
 8004ffe:	eb45 0303 	adc.w	r3, r5, r3
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f04f 0100 	mov.w	r1, #0
 800500a:	00d9      	lsls	r1, r3, #3
 800500c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005010:	00d0      	lsls	r0, r2, #3
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	eb12 0804 	adds.w	r8, r2, r4
 800501a:	eb43 0905 	adc.w	r9, r3, r5
 800501e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	4618      	mov	r0, r3
 8005026:	f04f 0100 	mov.w	r1, #0
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	008b      	lsls	r3, r1, #2
 8005034:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005038:	0082      	lsls	r2, r0, #2
 800503a:	4640      	mov	r0, r8
 800503c:	4649      	mov	r1, r9
 800503e:	f7fb fd3d 	bl	8000abc <__aeabi_uldivmod>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4b4e      	ldr	r3, [pc, #312]	; (8005180 <UART_SetConfig+0x734>)
 8005048:	fba3 2302 	umull	r2, r3, r3, r2
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	011e      	lsls	r6, r3, #4
 8005050:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005054:	4618      	mov	r0, r3
 8005056:	f04f 0100 	mov.w	r1, #0
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	1894      	adds	r4, r2, r2
 8005060:	60bc      	str	r4, [r7, #8]
 8005062:	415b      	adcs	r3, r3
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800506a:	1812      	adds	r2, r2, r0
 800506c:	eb41 0303 	adc.w	r3, r1, r3
 8005070:	f04f 0400 	mov.w	r4, #0
 8005074:	f04f 0500 	mov.w	r5, #0
 8005078:	00dd      	lsls	r5, r3, #3
 800507a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800507e:	00d4      	lsls	r4, r2, #3
 8005080:	4622      	mov	r2, r4
 8005082:	462b      	mov	r3, r5
 8005084:	1814      	adds	r4, r2, r0
 8005086:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800508a:	414b      	adcs	r3, r1
 800508c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	4618      	mov	r0, r3
 8005098:	f04f 0100 	mov.w	r1, #0
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	008b      	lsls	r3, r1, #2
 80050a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80050aa:	0082      	lsls	r2, r0, #2
 80050ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80050b0:	f7fb fd04 	bl	8000abc <__aeabi_uldivmod>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4b31      	ldr	r3, [pc, #196]	; (8005180 <UART_SetConfig+0x734>)
 80050ba:	fba3 1302 	umull	r1, r3, r3, r2
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	2164      	movs	r1, #100	; 0x64
 80050c2:	fb01 f303 	mul.w	r3, r1, r3
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	3332      	adds	r3, #50	; 0x32
 80050cc:	4a2c      	ldr	r2, [pc, #176]	; (8005180 <UART_SetConfig+0x734>)
 80050ce:	fba2 2303 	umull	r2, r3, r2, r3
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050d8:	441e      	add	r6, r3
 80050da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050de:	4618      	mov	r0, r3
 80050e0:	f04f 0100 	mov.w	r1, #0
 80050e4:	4602      	mov	r2, r0
 80050e6:	460b      	mov	r3, r1
 80050e8:	1894      	adds	r4, r2, r2
 80050ea:	603c      	str	r4, [r7, #0]
 80050ec:	415b      	adcs	r3, r3
 80050ee:	607b      	str	r3, [r7, #4]
 80050f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050f4:	1812      	adds	r2, r2, r0
 80050f6:	eb41 0303 	adc.w	r3, r1, r3
 80050fa:	f04f 0400 	mov.w	r4, #0
 80050fe:	f04f 0500 	mov.w	r5, #0
 8005102:	00dd      	lsls	r5, r3, #3
 8005104:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005108:	00d4      	lsls	r4, r2, #3
 800510a:	4622      	mov	r2, r4
 800510c:	462b      	mov	r3, r5
 800510e:	1814      	adds	r4, r2, r0
 8005110:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8005114:	414b      	adcs	r3, r1
 8005116:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800511a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	4618      	mov	r0, r3
 8005122:	f04f 0100 	mov.w	r1, #0
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	008b      	lsls	r3, r1, #2
 8005130:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005134:	0082      	lsls	r2, r0, #2
 8005136:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800513a:	f7fb fcbf 	bl	8000abc <__aeabi_uldivmod>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <UART_SetConfig+0x734>)
 8005144:	fba3 1302 	umull	r1, r3, r3, r2
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	2164      	movs	r1, #100	; 0x64
 800514c:	fb01 f303 	mul.w	r3, r1, r3
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	3332      	adds	r3, #50	; 0x32
 8005156:	4a0a      	ldr	r2, [pc, #40]	; (8005180 <UART_SetConfig+0x734>)
 8005158:	fba2 2303 	umull	r2, r3, r2, r3
 800515c:	095b      	lsrs	r3, r3, #5
 800515e:	f003 020f 	and.w	r2, r3, #15
 8005162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4432      	add	r2, r6
 800516a:	609a      	str	r2, [r3, #8]
}
 800516c:	e7ff      	b.n	800516e <UART_SetConfig+0x722>
 800516e:	bf00      	nop
 8005170:	37f4      	adds	r7, #244	; 0xf4
 8005172:	46bd      	mov	sp, r7
 8005174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005178:	40011000 	.word	0x40011000
 800517c:	40011400 	.word	0x40011400
 8005180:	51eb851f 	.word	0x51eb851f

08005184 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005188:	bf00      	nop
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
	...

08005194 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800519a:	f3ef 8305 	mrs	r3, IPSR
 800519e:	60bb      	str	r3, [r7, #8]
  return(result);
 80051a0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10f      	bne.n	80051c6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051a6:	f3ef 8310 	mrs	r3, PRIMASK
 80051aa:	607b      	str	r3, [r7, #4]
  return(result);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d105      	bne.n	80051be <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051b2:	f3ef 8311 	mrs	r3, BASEPRI
 80051b6:	603b      	str	r3, [r7, #0]
  return(result);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <osKernelInitialize+0x3a>
 80051be:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <osKernelInitialize+0x64>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d103      	bne.n	80051ce <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80051c6:	f06f 0305 	mvn.w	r3, #5
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	e00c      	b.n	80051e8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80051ce:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <osKernelInitialize+0x64>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d105      	bne.n	80051e2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80051d6:	4b08      	ldr	r3, [pc, #32]	; (80051f8 <osKernelInitialize+0x64>)
 80051d8:	2201      	movs	r2, #1
 80051da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	e002      	b.n	80051e8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80051e2:	f04f 33ff 	mov.w	r3, #4294967295
 80051e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80051e8:	68fb      	ldr	r3, [r7, #12]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	20000098 	.word	0x20000098

080051fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005202:	f3ef 8305 	mrs	r3, IPSR
 8005206:	60bb      	str	r3, [r7, #8]
  return(result);
 8005208:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10f      	bne.n	800522e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800520e:	f3ef 8310 	mrs	r3, PRIMASK
 8005212:	607b      	str	r3, [r7, #4]
  return(result);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d105      	bne.n	8005226 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800521a:	f3ef 8311 	mrs	r3, BASEPRI
 800521e:	603b      	str	r3, [r7, #0]
  return(result);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d007      	beq.n	8005236 <osKernelStart+0x3a>
 8005226:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <osKernelStart+0x68>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d103      	bne.n	8005236 <osKernelStart+0x3a>
    stat = osErrorISR;
 800522e:	f06f 0305 	mvn.w	r3, #5
 8005232:	60fb      	str	r3, [r7, #12]
 8005234:	e010      	b.n	8005258 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <osKernelStart+0x68>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d109      	bne.n	8005252 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800523e:	f7ff ffa1 	bl	8005184 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005242:	4b08      	ldr	r3, [pc, #32]	; (8005264 <osKernelStart+0x68>)
 8005244:	2202      	movs	r2, #2
 8005246:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005248:	f001 f9ec 	bl	8006624 <vTaskStartScheduler>
      stat = osOK;
 800524c:	2300      	movs	r3, #0
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	e002      	b.n	8005258 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005252:	f04f 33ff 	mov.w	r3, #4294967295
 8005256:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005258:	68fb      	ldr	r3, [r7, #12]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000098 	.word	0x20000098

08005268 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005268:	b580      	push	{r7, lr}
 800526a:	b090      	sub	sp, #64	; 0x40
 800526c:	af04      	add	r7, sp, #16
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005274:	2300      	movs	r3, #0
 8005276:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005278:	f3ef 8305 	mrs	r3, IPSR
 800527c:	61fb      	str	r3, [r7, #28]
  return(result);
 800527e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005280:	2b00      	cmp	r3, #0
 8005282:	f040 808f 	bne.w	80053a4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005286:	f3ef 8310 	mrs	r3, PRIMASK
 800528a:	61bb      	str	r3, [r7, #24]
  return(result);
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d105      	bne.n	800529e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005292:	f3ef 8311 	mrs	r3, BASEPRI
 8005296:	617b      	str	r3, [r7, #20]
  return(result);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <osThreadNew+0x3e>
 800529e:	4b44      	ldr	r3, [pc, #272]	; (80053b0 <osThreadNew+0x148>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d07e      	beq.n	80053a4 <osThreadNew+0x13c>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d07b      	beq.n	80053a4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80052b0:	2318      	movs	r3, #24
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80052b8:	f04f 33ff 	mov.w	r3, #4294967295
 80052bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d045      	beq.n	8005350 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d002      	beq.n	80052d2 <osThreadNew+0x6a>
        name = attr->name;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d008      	beq.n	80052f8 <osThreadNew+0x90>
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	2b38      	cmp	r3, #56	; 0x38
 80052ea:	d805      	bhi.n	80052f8 <osThreadNew+0x90>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <osThreadNew+0x94>
        return (NULL);
 80052f8:	2300      	movs	r3, #0
 80052fa:	e054      	b.n	80053a6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	089b      	lsrs	r3, r3, #2
 800530a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00e      	beq.n	8005332 <osThreadNew+0xca>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	2b5b      	cmp	r3, #91	; 0x5b
 800531a:	d90a      	bls.n	8005332 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005320:	2b00      	cmp	r3, #0
 8005322:	d006      	beq.n	8005332 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	695b      	ldr	r3, [r3, #20]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <osThreadNew+0xca>
        mem = 1;
 800532c:	2301      	movs	r3, #1
 800532e:	623b      	str	r3, [r7, #32]
 8005330:	e010      	b.n	8005354 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10c      	bne.n	8005354 <osThreadNew+0xec>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d108      	bne.n	8005354 <osThreadNew+0xec>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d104      	bne.n	8005354 <osThreadNew+0xec>
          mem = 0;
 800534a:	2300      	movs	r3, #0
 800534c:	623b      	str	r3, [r7, #32]
 800534e:	e001      	b.n	8005354 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d110      	bne.n	800537c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005362:	9202      	str	r2, [sp, #8]
 8005364:	9301      	str	r3, [sp, #4]
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800536e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 ff81 	bl	8006278 <xTaskCreateStatic>
 8005376:	4603      	mov	r3, r0
 8005378:	613b      	str	r3, [r7, #16]
 800537a:	e013      	b.n	80053a4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d110      	bne.n	80053a4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	b29a      	uxth	r2, r3
 8005386:	f107 0310 	add.w	r3, r7, #16
 800538a:	9301      	str	r3, [sp, #4]
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	9300      	str	r3, [sp, #0]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 ffcc 	bl	8006332 <xTaskCreate>
 800539a:	4603      	mov	r3, r0
 800539c:	2b01      	cmp	r3, #1
 800539e:	d001      	beq.n	80053a4 <osThreadNew+0x13c>
          hTask = NULL;
 80053a0:	2300      	movs	r3, #0
 80053a2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80053a4:	693b      	ldr	r3, [r7, #16]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3730      	adds	r7, #48	; 0x30
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20000098 	.word	0x20000098

080053b4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b086      	sub	sp, #24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053bc:	f3ef 8305 	mrs	r3, IPSR
 80053c0:	613b      	str	r3, [r7, #16]
  return(result);
 80053c2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10f      	bne.n	80053e8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c8:	f3ef 8310 	mrs	r3, PRIMASK
 80053cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d105      	bne.n	80053e0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053d4:	f3ef 8311 	mrs	r3, BASEPRI
 80053d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d007      	beq.n	80053f0 <osDelay+0x3c>
 80053e0:	4b0a      	ldr	r3, [pc, #40]	; (800540c <osDelay+0x58>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d103      	bne.n	80053f0 <osDelay+0x3c>
    stat = osErrorISR;
 80053e8:	f06f 0305 	mvn.w	r3, #5
 80053ec:	617b      	str	r3, [r7, #20]
 80053ee:	e007      	b.n	8005400 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <osDelay+0x4c>
      vTaskDelay(ticks);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f001 f8de 	bl	80065bc <vTaskDelay>
    }
  }

  return (stat);
 8005400:	697b      	ldr	r3, [r7, #20]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000098 	.word	0x20000098

08005410 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4a07      	ldr	r2, [pc, #28]	; (800543c <vApplicationGetIdleTaskMemory+0x2c>)
 8005420:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	4a06      	ldr	r2, [pc, #24]	; (8005440 <vApplicationGetIdleTaskMemory+0x30>)
 8005426:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2280      	movs	r2, #128	; 0x80
 800542c:	601a      	str	r2, [r3, #0]
}
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	2000009c 	.word	0x2000009c
 8005440:	200000f8 	.word	0x200000f8

08005444 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a07      	ldr	r2, [pc, #28]	; (8005470 <vApplicationGetTimerTaskMemory+0x2c>)
 8005454:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4a06      	ldr	r2, [pc, #24]	; (8005474 <vApplicationGetTimerTaskMemory+0x30>)
 800545a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005462:	601a      	str	r2, [r3, #0]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	200002f8 	.word	0x200002f8
 8005474:	20000354 	.word	0x20000354

08005478 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f103 0208 	add.w	r2, r3, #8
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f04f 32ff 	mov.w	r2, #4294967295
 8005490:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f103 0208 	add.w	r2, r3, #8
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f103 0208 	add.w	r2, r3, #8
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054d2:	b480      	push	{r7}
 80054d4:	b085      	sub	sp, #20
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	601a      	str	r2, [r3, #0]
}
 800550e:	bf00      	nop
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800551a:	b480      	push	{r7}
 800551c:	b085      	sub	sp, #20
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005530:	d103      	bne.n	800553a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	e00c      	b.n	8005554 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	3308      	adds	r3, #8
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	e002      	b.n	8005548 <vListInsert+0x2e>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	429a      	cmp	r2, r3
 8005552:	d2f6      	bcs.n	8005542 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	1c5a      	adds	r2, r3, #1
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	601a      	str	r2, [r3, #0]
}
 8005580:	bf00      	nop
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6892      	ldr	r2, [r2, #8]
 80055a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6852      	ldr	r2, [r2, #4]
 80055ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d103      	bne.n	80055c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	1e5a      	subs	r2, r3, #1
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10a      	bne.n	800560a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005606:	bf00      	nop
 8005608:	e7fe      	b.n	8005608 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800560a:	f002 faab 	bl	8007b64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800561a:	fb01 f303 	mul.w	r3, r1, r3
 800561e:	441a      	add	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563a:	3b01      	subs	r3, #1
 800563c:	68f9      	ldr	r1, [r7, #12]
 800563e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005640:	fb01 f303 	mul.w	r3, r1, r3
 8005644:	441a      	add	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	22ff      	movs	r2, #255	; 0xff
 800564e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	22ff      	movs	r2, #255	; 0xff
 8005656:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d114      	bne.n	800568a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01a      	beq.n	800569e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3310      	adds	r3, #16
 800566c:	4618      	mov	r0, r3
 800566e:	f001 fa63 	bl	8006b38 <xTaskRemoveFromEventList>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d012      	beq.n	800569e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005678:	4b0c      	ldr	r3, [pc, #48]	; (80056ac <xQueueGenericReset+0xcc>)
 800567a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	e009      	b.n	800569e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3310      	adds	r3, #16
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff fef2 	bl	8005478 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3324      	adds	r3, #36	; 0x24
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff feed 	bl	8005478 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800569e:	f002 fa91 	bl	8007bc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80056a2:	2301      	movs	r3, #1
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	e000ed04 	.word	0xe000ed04

080056b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08e      	sub	sp, #56	; 0x38
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10a      	bne.n	80056da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80056c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80056d6:	bf00      	nop
 80056d8:	e7fe      	b.n	80056d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10a      	bne.n	80056f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80056f2:	bf00      	nop
 80056f4:	e7fe      	b.n	80056f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <xQueueGenericCreateStatic+0x52>
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <xQueueGenericCreateStatic+0x56>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <xQueueGenericCreateStatic+0x58>
 8005706:	2300      	movs	r3, #0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	623b      	str	r3, [r7, #32]
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d102      	bne.n	800572e <xQueueGenericCreateStatic+0x7e>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <xQueueGenericCreateStatic+0x82>
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <xQueueGenericCreateStatic+0x84>
 8005732:	2300      	movs	r3, #0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10a      	bne.n	800574e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	61fb      	str	r3, [r7, #28]
}
 800574a:	bf00      	nop
 800574c:	e7fe      	b.n	800574c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800574e:	2350      	movs	r3, #80	; 0x50
 8005750:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2b50      	cmp	r3, #80	; 0x50
 8005756:	d00a      	beq.n	800576e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	61bb      	str	r3, [r7, #24]
}
 800576a:	bf00      	nop
 800576c:	e7fe      	b.n	800576c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800576e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00d      	beq.n	8005796 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005782:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	4613      	mov	r3, r2
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 f845 	bl	8005820 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005798:	4618      	mov	r0, r3
 800579a:	3730      	adds	r7, #48	; 0x30
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08a      	sub	sp, #40	; 0x28
 80057a4:	af02      	add	r7, sp, #8
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	4613      	mov	r3, r2
 80057ac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <xQueueGenericCreate+0x2a>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	613b      	str	r3, [r7, #16]
}
 80057c6:	bf00      	nop
 80057c8:	e7fe      	b.n	80057c8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d102      	bne.n	80057d6 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80057d0:	2300      	movs	r3, #0
 80057d2:	61fb      	str	r3, [r7, #28]
 80057d4:	e004      	b.n	80057e0 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	fb02 f303 	mul.w	r3, r2, r3
 80057de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	3350      	adds	r3, #80	; 0x50
 80057e4:	4618      	mov	r0, r3
 80057e6:	f002 fadf 	bl	8007da8 <pvPortMalloc>
 80057ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d011      	beq.n	8005816 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	3350      	adds	r3, #80	; 0x50
 80057fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005804:	79fa      	ldrb	r2, [r7, #7]
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	4613      	mov	r3, r2
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	68b9      	ldr	r1, [r7, #8]
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 f805 	bl	8005820 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005816:	69bb      	ldr	r3, [r7, #24]
	}
 8005818:	4618      	mov	r0, r3
 800581a:	3720      	adds	r7, #32
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d103      	bne.n	800583c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	e002      	b.n	8005842 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800584e:	2101      	movs	r1, #1
 8005850:	69b8      	ldr	r0, [r7, #24]
 8005852:	f7ff fec5 	bl	80055e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	78fa      	ldrb	r2, [r7, #3]
 800585a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800585e:	bf00      	nop
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b08e      	sub	sp, #56	; 0x38
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005876:	2300      	movs	r3, #0
 8005878:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10a      	bne.n	800589a <xQueueGenericSend+0x32>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005896:	bf00      	nop
 8005898:	e7fe      	b.n	8005898 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d103      	bne.n	80058a8 <xQueueGenericSend+0x40>
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <xQueueGenericSend+0x44>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <xQueueGenericSend+0x46>
 80058ac:	2300      	movs	r3, #0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10a      	bne.n	80058c8 <xQueueGenericSend+0x60>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80058c4:	bf00      	nop
 80058c6:	e7fe      	b.n	80058c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d103      	bne.n	80058d6 <xQueueGenericSend+0x6e>
 80058ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <xQueueGenericSend+0x72>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e000      	b.n	80058dc <xQueueGenericSend+0x74>
 80058da:	2300      	movs	r3, #0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	623b      	str	r3, [r7, #32]
}
 80058f2:	bf00      	nop
 80058f4:	e7fe      	b.n	80058f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058f6:	f001 fadd 	bl	8006eb4 <xTaskGetSchedulerState>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d102      	bne.n	8005906 <xQueueGenericSend+0x9e>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d101      	bne.n	800590a <xQueueGenericSend+0xa2>
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <xQueueGenericSend+0xa4>
 800590a:	2300      	movs	r3, #0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <xQueueGenericSend+0xbe>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	61fb      	str	r3, [r7, #28]
}
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005926:	f002 f91d 	bl	8007b64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	429a      	cmp	r2, r3
 8005934:	d302      	bcc.n	800593c <xQueueGenericSend+0xd4>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d129      	bne.n	8005990 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005942:	f000 fb2b 	bl	8005f9c <prvCopyDataToQueue>
 8005946:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	d010      	beq.n	8005972 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	3324      	adds	r3, #36	; 0x24
 8005954:	4618      	mov	r0, r3
 8005956:	f001 f8ef 	bl	8006b38 <xTaskRemoveFromEventList>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d013      	beq.n	8005988 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005960:	4b3f      	ldr	r3, [pc, #252]	; (8005a60 <xQueueGenericSend+0x1f8>)
 8005962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	e00a      	b.n	8005988 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005978:	4b39      	ldr	r3, [pc, #228]	; (8005a60 <xQueueGenericSend+0x1f8>)
 800597a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005988:	f002 f91c 	bl	8007bc4 <vPortExitCritical>
				return pdPASS;
 800598c:	2301      	movs	r3, #1
 800598e:	e063      	b.n	8005a58 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d103      	bne.n	800599e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005996:	f002 f915 	bl	8007bc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800599a:	2300      	movs	r3, #0
 800599c:	e05c      	b.n	8005a58 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800599e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059a4:	f107 0314 	add.w	r3, r7, #20
 80059a8:	4618      	mov	r0, r3
 80059aa:	f001 f929 	bl	8006c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059ae:	2301      	movs	r3, #1
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059b2:	f002 f907 	bl	8007bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059b6:	f000 fe9b 	bl	80066f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059ba:	f002 f8d3 	bl	8007b64 <vPortEnterCritical>
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059c4:	b25b      	sxtb	r3, r3
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ca:	d103      	bne.n	80059d4 <xQueueGenericSend+0x16c>
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059da:	b25b      	sxtb	r3, r3
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e0:	d103      	bne.n	80059ea <xQueueGenericSend+0x182>
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059ea:	f002 f8eb 	bl	8007bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059ee:	1d3a      	adds	r2, r7, #4
 80059f0:	f107 0314 	add.w	r3, r7, #20
 80059f4:	4611      	mov	r1, r2
 80059f6:	4618      	mov	r0, r3
 80059f8:	f001 f918 	bl	8006c2c <xTaskCheckForTimeOut>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d124      	bne.n	8005a4c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a04:	f000 fbc2 	bl	800618c <prvIsQueueFull>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d018      	beq.n	8005a40 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a10:	3310      	adds	r3, #16
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	4611      	mov	r1, r2
 8005a16:	4618      	mov	r0, r3
 8005a18:	f001 f83e 	bl	8006a98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a1e:	f000 fb4d 	bl	80060bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a22:	f000 fe73 	bl	800670c <xTaskResumeAll>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f47f af7c 	bne.w	8005926 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005a2e:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <xQueueGenericSend+0x1f8>)
 8005a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	e772      	b.n	8005926 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a42:	f000 fb3b 	bl	80060bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a46:	f000 fe61 	bl	800670c <xTaskResumeAll>
 8005a4a:	e76c      	b.n	8005926 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a4e:	f000 fb35 	bl	80060bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a52:	f000 fe5b 	bl	800670c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3738      	adds	r7, #56	; 0x38
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	e000ed04 	.word	0xe000ed04

08005a64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08e      	sub	sp, #56	; 0x38
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10a      	bne.n	8005a92 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a8e:	bf00      	nop
 8005a90:	e7fe      	b.n	8005a90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d103      	bne.n	8005aa0 <xQueueGenericSendFromISR+0x3c>
 8005a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <xQueueGenericSendFromISR+0x40>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e000      	b.n	8005aa6 <xQueueGenericSendFromISR+0x42>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10a      	bne.n	8005ac0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	623b      	str	r3, [r7, #32]
}
 8005abc:	bf00      	nop
 8005abe:	e7fe      	b.n	8005abe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d103      	bne.n	8005ace <xQueueGenericSendFromISR+0x6a>
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <xQueueGenericSendFromISR+0x6e>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <xQueueGenericSendFromISR+0x70>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	61fb      	str	r3, [r7, #28]
}
 8005aea:	bf00      	nop
 8005aec:	e7fe      	b.n	8005aec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005aee:	f002 f91b 	bl	8007d28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005af2:	f3ef 8211 	mrs	r2, BASEPRI
 8005af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afa:	f383 8811 	msr	BASEPRI, r3
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f3bf 8f4f 	dsb	sy
 8005b06:	61ba      	str	r2, [r7, #24]
 8005b08:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b0a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d302      	bcc.n	8005b20 <xQueueGenericSendFromISR+0xbc>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d12c      	bne.n	8005b7a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b2a:	683a      	ldr	r2, [r7, #0]
 8005b2c:	68b9      	ldr	r1, [r7, #8]
 8005b2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b30:	f000 fa34 	bl	8005f9c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b34:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3c:	d112      	bne.n	8005b64 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d016      	beq.n	8005b74 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	3324      	adds	r3, #36	; 0x24
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fff4 	bl	8006b38 <xTaskRemoveFromEventList>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00e      	beq.n	8005b74 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00b      	beq.n	8005b74 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	e007      	b.n	8005b74 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b68:	3301      	adds	r3, #1
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	b25a      	sxtb	r2, r3
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005b74:	2301      	movs	r3, #1
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005b78:	e001      	b.n	8005b7e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b80:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005b88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3738      	adds	r7, #56	; 0x38
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08c      	sub	sp, #48	; 0x30
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <xQueueReceive+0x30>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	623b      	str	r3, [r7, #32]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d103      	bne.n	8005bd2 <xQueueReceive+0x3e>
 8005bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <xQueueReceive+0x42>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <xQueueReceive+0x44>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <xQueueReceive+0x5e>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	61fb      	str	r3, [r7, #28]
}
 8005bee:	bf00      	nop
 8005bf0:	e7fe      	b.n	8005bf0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bf2:	f001 f95f 	bl	8006eb4 <xTaskGetSchedulerState>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d102      	bne.n	8005c02 <xQueueReceive+0x6e>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <xQueueReceive+0x72>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e000      	b.n	8005c08 <xQueueReceive+0x74>
 8005c06:	2300      	movs	r3, #0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <xQueueReceive+0x8e>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	61bb      	str	r3, [r7, #24]
}
 8005c1e:	bf00      	nop
 8005c20:	e7fe      	b.n	8005c20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c22:	f001 ff9f 	bl	8007b64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d01f      	beq.n	8005c72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c32:	68b9      	ldr	r1, [r7, #8]
 8005c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c36:	f000 fa1b 	bl	8006070 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3c:	1e5a      	subs	r2, r3, #1
 8005c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00f      	beq.n	8005c6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4c:	3310      	adds	r3, #16
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 ff72 	bl	8006b38 <xTaskRemoveFromEventList>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d007      	beq.n	8005c6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005c5a:	4b3d      	ldr	r3, [pc, #244]	; (8005d50 <xQueueReceive+0x1bc>)
 8005c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005c6a:	f001 ffab 	bl	8007bc4 <vPortExitCritical>
				return pdPASS;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e069      	b.n	8005d46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d103      	bne.n	8005c80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c78:	f001 ffa4 	bl	8007bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e062      	b.n	8005d46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c86:	f107 0310 	add.w	r3, r7, #16
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 ffb8 	bl	8006c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c90:	2301      	movs	r3, #1
 8005c92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c94:	f001 ff96 	bl	8007bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c98:	f000 fd2a 	bl	80066f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c9c:	f001 ff62 	bl	8007b64 <vPortEnterCritical>
 8005ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ca6:	b25b      	sxtb	r3, r3
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cac:	d103      	bne.n	8005cb6 <xQueueReceive+0x122>
 8005cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cbc:	b25b      	sxtb	r3, r3
 8005cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc2:	d103      	bne.n	8005ccc <xQueueReceive+0x138>
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ccc:	f001 ff7a 	bl	8007bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cd0:	1d3a      	adds	r2, r7, #4
 8005cd2:	f107 0310 	add.w	r3, r7, #16
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 ffa7 	bl	8006c2c <xTaskCheckForTimeOut>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d123      	bne.n	8005d2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ce6:	f000 fa3b 	bl	8006160 <prvIsQueueEmpty>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d017      	beq.n	8005d20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf2:	3324      	adds	r3, #36	; 0x24
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fecd 	bl	8006a98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d00:	f000 f9dc 	bl	80060bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d04:	f000 fd02 	bl	800670c <xTaskResumeAll>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d189      	bne.n	8005c22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005d0e:	4b10      	ldr	r3, [pc, #64]	; (8005d50 <xQueueReceive+0x1bc>)
 8005d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	e780      	b.n	8005c22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d22:	f000 f9cb 	bl	80060bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d26:	f000 fcf1 	bl	800670c <xTaskResumeAll>
 8005d2a:	e77a      	b.n	8005c22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d2e:	f000 f9c5 	bl	80060bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d32:	f000 fceb 	bl	800670c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d38:	f000 fa12 	bl	8006160 <prvIsQueueEmpty>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f43f af6f 	beq.w	8005c22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3730      	adds	r7, #48	; 0x30
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	e000ed04 	.word	0xe000ed04

08005d54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08e      	sub	sp, #56	; 0x38
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005d66:	2300      	movs	r3, #0
 8005d68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	623b      	str	r3, [r7, #32]
}
 8005d82:	bf00      	nop
 8005d84:	e7fe      	b.n	8005d84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	61fb      	str	r3, [r7, #28]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005da4:	f001 f886 	bl	8006eb4 <xTaskGetSchedulerState>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d102      	bne.n	8005db4 <xQueueSemaphoreTake+0x60>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <xQueueSemaphoreTake+0x64>
 8005db4:	2301      	movs	r3, #1
 8005db6:	e000      	b.n	8005dba <xQueueSemaphoreTake+0x66>
 8005db8:	2300      	movs	r3, #0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10a      	bne.n	8005dd4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	61bb      	str	r3, [r7, #24]
}
 8005dd0:	bf00      	nop
 8005dd2:	e7fe      	b.n	8005dd2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dd4:	f001 fec6 	bl	8007b64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d024      	beq.n	8005e2e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de6:	1e5a      	subs	r2, r3, #1
 8005de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d104      	bne.n	8005dfe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005df4:	f001 f9d4 	bl	80071a0 <pvTaskIncrementMutexHeldCount>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dfc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00f      	beq.n	8005e26 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e08:	3310      	adds	r3, #16
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fe94 	bl	8006b38 <xTaskRemoveFromEventList>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e16:	4b54      	ldr	r3, [pc, #336]	; (8005f68 <xQueueSemaphoreTake+0x214>)
 8005e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e26:	f001 fecd 	bl	8007bc4 <vPortExitCritical>
				return pdPASS;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e097      	b.n	8005f5e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d111      	bne.n	8005e58 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	617b      	str	r3, [r7, #20]
}
 8005e4c:	bf00      	nop
 8005e4e:	e7fe      	b.n	8005e4e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005e50:	f001 feb8 	bl	8007bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e54:	2300      	movs	r3, #0
 8005e56:	e082      	b.n	8005f5e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e5e:	f107 030c 	add.w	r3, r7, #12
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fecc 	bl	8006c00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e6c:	f001 feaa 	bl	8007bc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e70:	f000 fc3e 	bl	80066f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e74:	f001 fe76 	bl	8007b64 <vPortEnterCritical>
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e7e:	b25b      	sxtb	r3, r3
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e84:	d103      	bne.n	8005e8e <xQueueSemaphoreTake+0x13a>
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e94:	b25b      	sxtb	r3, r3
 8005e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9a:	d103      	bne.n	8005ea4 <xQueueSemaphoreTake+0x150>
 8005e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ea4:	f001 fe8e 	bl	8007bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ea8:	463a      	mov	r2, r7
 8005eaa:	f107 030c 	add.w	r3, r7, #12
 8005eae:	4611      	mov	r1, r2
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 febb 	bl	8006c2c <xTaskCheckForTimeOut>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d132      	bne.n	8005f22 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ebc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ebe:	f000 f94f 	bl	8006160 <prvIsQueueEmpty>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d026      	beq.n	8005f16 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d109      	bne.n	8005ee4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005ed0:	f001 fe48 	bl	8007b64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f001 f809 	bl	8006ef0 <xTaskPriorityInherit>
 8005ede:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005ee0:	f001 fe70 	bl	8007bc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee6:	3324      	adds	r3, #36	; 0x24
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	4611      	mov	r1, r2
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fdd3 	bl	8006a98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ef2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ef4:	f000 f8e2 	bl	80060bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ef8:	f000 fc08 	bl	800670c <xTaskResumeAll>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f47f af68 	bne.w	8005dd4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005f04:	4b18      	ldr	r3, [pc, #96]	; (8005f68 <xQueueSemaphoreTake+0x214>)
 8005f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	f3bf 8f4f 	dsb	sy
 8005f10:	f3bf 8f6f 	isb	sy
 8005f14:	e75e      	b.n	8005dd4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005f16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f18:	f000 f8d0 	bl	80060bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f1c:	f000 fbf6 	bl	800670c <xTaskResumeAll>
 8005f20:	e758      	b.n	8005dd4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005f22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f24:	f000 f8ca 	bl	80060bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f28:	f000 fbf0 	bl	800670c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f2e:	f000 f917 	bl	8006160 <prvIsQueueEmpty>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f43f af4d 	beq.w	8005dd4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00d      	beq.n	8005f5c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005f40:	f001 fe10 	bl	8007b64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005f46:	f000 f811 	bl	8005f6c <prvGetDisinheritPriorityAfterTimeout>
 8005f4a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f52:	4618      	mov	r0, r3
 8005f54:	f001 f8a2 	bl	800709c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005f58:	f001 fe34 	bl	8007bc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3738      	adds	r7, #56	; 0x38
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	e000ed04 	.word	0xe000ed04

08005f6c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d006      	beq.n	8005f8a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	e001      	b.n	8005f8e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
	}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10d      	bne.n	8005fd6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d14d      	bne.n	800605e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 fffa 	bl	8006fc0 <xTaskPriorityDisinherit>
 8005fcc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	609a      	str	r2, [r3, #8]
 8005fd4:	e043      	b.n	800605e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d119      	bne.n	8006010 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6858      	ldr	r0, [r3, #4]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	68b9      	ldr	r1, [r7, #8]
 8005fe8:	f003 ffbc 	bl	8009f64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff4:	441a      	add	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	429a      	cmp	r2, r3
 8006004:	d32b      	bcc.n	800605e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	605a      	str	r2, [r3, #4]
 800600e:	e026      	b.n	800605e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	68d8      	ldr	r0, [r3, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006018:	461a      	mov	r2, r3
 800601a:	68b9      	ldr	r1, [r7, #8]
 800601c:	f003 ffa2 	bl	8009f64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006028:	425b      	negs	r3, r3
 800602a:	441a      	add	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	68da      	ldr	r2, [r3, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	d207      	bcs.n	800604c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006044:	425b      	negs	r3, r3
 8006046:	441a      	add	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b02      	cmp	r3, #2
 8006050:	d105      	bne.n	800605e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	3b01      	subs	r3, #1
 800605c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006066:	697b      	ldr	r3, [r7, #20]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d018      	beq.n	80060b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	441a      	add	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	429a      	cmp	r2, r3
 800609a:	d303      	bcc.n	80060a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68d9      	ldr	r1, [r3, #12]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	461a      	mov	r2, r3
 80060ae:	6838      	ldr	r0, [r7, #0]
 80060b0:	f003 ff58 	bl	8009f64 <memcpy>
	}
}
 80060b4:	bf00      	nop
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80060c4:	f001 fd4e 	bl	8007b64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060d0:	e011      	b.n	80060f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d012      	beq.n	8006100 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	3324      	adds	r3, #36	; 0x24
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fd2a 	bl	8006b38 <xTaskRemoveFromEventList>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80060ea:	f000 fe01 	bl	8006cf0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	dce9      	bgt.n	80060d2 <prvUnlockQueue+0x16>
 80060fe:	e000      	b.n	8006102 <prvUnlockQueue+0x46>
					break;
 8006100:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	22ff      	movs	r2, #255	; 0xff
 8006106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800610a:	f001 fd5b 	bl	8007bc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800610e:	f001 fd29 	bl	8007b64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006118:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800611a:	e011      	b.n	8006140 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d012      	beq.n	800614a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3310      	adds	r3, #16
 8006128:	4618      	mov	r0, r3
 800612a:	f000 fd05 	bl	8006b38 <xTaskRemoveFromEventList>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006134:	f000 fddc 	bl	8006cf0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006138:	7bbb      	ldrb	r3, [r7, #14]
 800613a:	3b01      	subs	r3, #1
 800613c:	b2db      	uxtb	r3, r3
 800613e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006144:	2b00      	cmp	r3, #0
 8006146:	dce9      	bgt.n	800611c <prvUnlockQueue+0x60>
 8006148:	e000      	b.n	800614c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800614a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	22ff      	movs	r2, #255	; 0xff
 8006150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006154:	f001 fd36 	bl	8007bc4 <vPortExitCritical>
}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006168:	f001 fcfc 	bl	8007b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	2b00      	cmp	r3, #0
 8006172:	d102      	bne.n	800617a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006174:	2301      	movs	r3, #1
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	e001      	b.n	800617e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800617e:	f001 fd21 	bl	8007bc4 <vPortExitCritical>

	return xReturn;
 8006182:	68fb      	ldr	r3, [r7, #12]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006194:	f001 fce6 	bl	8007b64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d102      	bne.n	80061aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80061a4:	2301      	movs	r3, #1
 80061a6:	60fb      	str	r3, [r7, #12]
 80061a8:	e001      	b.n	80061ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061ae:	f001 fd09 	bl	8007bc4 <vPortExitCritical>

	return xReturn;
 80061b2:	68fb      	ldr	r3, [r7, #12]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	e014      	b.n	80061f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80061cc:	4a0f      	ldr	r2, [pc, #60]	; (800620c <vQueueAddToRegistry+0x50>)
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10b      	bne.n	80061f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80061d8:	490c      	ldr	r1, [pc, #48]	; (800620c <vQueueAddToRegistry+0x50>)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80061e2:	4a0a      	ldr	r2, [pc, #40]	; (800620c <vQueueAddToRegistry+0x50>)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	4413      	add	r3, r2
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80061ee:	e006      	b.n	80061fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3301      	adds	r3, #1
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b07      	cmp	r3, #7
 80061fa:	d9e7      	bls.n	80061cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	3714      	adds	r7, #20
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	20004c8c 	.word	0x20004c8c

08006210 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006220:	f001 fca0 	bl	8007b64 <vPortEnterCritical>
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800622a:	b25b      	sxtb	r3, r3
 800622c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006230:	d103      	bne.n	800623a <vQueueWaitForMessageRestricted+0x2a>
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006240:	b25b      	sxtb	r3, r3
 8006242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006246:	d103      	bne.n	8006250 <vQueueWaitForMessageRestricted+0x40>
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006250:	f001 fcb8 	bl	8007bc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	2b00      	cmp	r3, #0
 800625a:	d106      	bne.n	800626a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	3324      	adds	r3, #36	; 0x24
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	68b9      	ldr	r1, [r7, #8]
 8006264:	4618      	mov	r0, r3
 8006266:	f000 fc3b 	bl	8006ae0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800626a:	6978      	ldr	r0, [r7, #20]
 800626c:	f7ff ff26 	bl	80060bc <prvUnlockQueue>
	}
 8006270:	bf00      	nop
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08e      	sub	sp, #56	; 0x38
 800627c:	af04      	add	r7, sp, #16
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10a      	bne.n	80062a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	623b      	str	r3, [r7, #32]
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80062a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <xTaskCreateStatic+0x46>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	61fb      	str	r3, [r7, #28]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80062be:	235c      	movs	r3, #92	; 0x5c
 80062c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	2b5c      	cmp	r3, #92	; 0x5c
 80062c6:	d00a      	beq.n	80062de <xTaskCreateStatic+0x66>
	__asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	61bb      	str	r3, [r7, #24]
}
 80062da:	bf00      	nop
 80062dc:	e7fe      	b.n	80062dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80062de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d01e      	beq.n	8006324 <xTaskCreateStatic+0xac>
 80062e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d01b      	beq.n	8006324 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	2202      	movs	r2, #2
 80062fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062fe:	2300      	movs	r3, #0
 8006300:	9303      	str	r3, [sp, #12]
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	9302      	str	r3, [sp, #8]
 8006306:	f107 0314 	add.w	r3, r7, #20
 800630a:	9301      	str	r3, [sp, #4]
 800630c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	68b9      	ldr	r1, [r7, #8]
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 f850 	bl	80063bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800631c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800631e:	f000 f8dd 	bl	80064dc <prvAddNewTaskToReadyList>
 8006322:	e001      	b.n	8006328 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006324:	2300      	movs	r3, #0
 8006326:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006328:	697b      	ldr	r3, [r7, #20]
	}
 800632a:	4618      	mov	r0, r3
 800632c:	3728      	adds	r7, #40	; 0x28
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006332:	b580      	push	{r7, lr}
 8006334:	b08c      	sub	sp, #48	; 0x30
 8006336:	af04      	add	r7, sp, #16
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	603b      	str	r3, [r7, #0]
 800633e:	4613      	mov	r3, r2
 8006340:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006342:	88fb      	ldrh	r3, [r7, #6]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4618      	mov	r0, r3
 8006348:	f001 fd2e 	bl	8007da8 <pvPortMalloc>
 800634c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00e      	beq.n	8006372 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006354:	205c      	movs	r0, #92	; 0x5c
 8006356:	f001 fd27 	bl	8007da8 <pvPortMalloc>
 800635a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
 8006368:	e005      	b.n	8006376 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800636a:	6978      	ldr	r0, [r7, #20]
 800636c:	f001 fde0 	bl	8007f30 <vPortFree>
 8006370:	e001      	b.n	8006376 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006372:	2300      	movs	r3, #0
 8006374:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d017      	beq.n	80063ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006384:	88fa      	ldrh	r2, [r7, #6]
 8006386:	2300      	movs	r3, #0
 8006388:	9303      	str	r3, [sp, #12]
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	9302      	str	r3, [sp, #8]
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	9301      	str	r3, [sp, #4]
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68b9      	ldr	r1, [r7, #8]
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f000 f80e 	bl	80063bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063a0:	69f8      	ldr	r0, [r7, #28]
 80063a2:	f000 f89b 	bl	80064dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80063a6:	2301      	movs	r3, #1
 80063a8:	61bb      	str	r3, [r7, #24]
 80063aa:	e002      	b.n	80063b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063ac:	f04f 33ff 	mov.w	r3, #4294967295
 80063b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063b2:	69bb      	ldr	r3, [r7, #24]
	}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3720      	adds	r7, #32
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80063ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	461a      	mov	r2, r3
 80063d4:	21a5      	movs	r1, #165	; 0xa5
 80063d6:	f003 fdd3 	bl	8009f80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80063e4:	3b01      	subs	r3, #1
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	f023 0307 	bic.w	r3, r3, #7
 80063f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <prvInitialiseNewTask+0x58>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	617b      	str	r3, [r7, #20]
}
 8006410:	bf00      	nop
 8006412:	e7fe      	b.n	8006412 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d01f      	beq.n	800645a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800641a:	2300      	movs	r3, #0
 800641c:	61fb      	str	r3, [r7, #28]
 800641e:	e012      	b.n	8006446 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	4413      	add	r3, r2
 8006426:	7819      	ldrb	r1, [r3, #0]
 8006428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	4413      	add	r3, r2
 800642e:	3334      	adds	r3, #52	; 0x34
 8006430:	460a      	mov	r2, r1
 8006432:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	4413      	add	r3, r2
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d006      	beq.n	800644e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	3301      	adds	r3, #1
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	2b0f      	cmp	r3, #15
 800644a:	d9e9      	bls.n	8006420 <prvInitialiseNewTask+0x64>
 800644c:	e000      	b.n	8006450 <prvInitialiseNewTask+0x94>
			{
				break;
 800644e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006452:	2200      	movs	r2, #0
 8006454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006458:	e003      	b.n	8006462 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	2b37      	cmp	r3, #55	; 0x37
 8006466:	d901      	bls.n	800646c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006468:	2337      	movs	r3, #55	; 0x37
 800646a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006470:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006476:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	2200      	movs	r2, #0
 800647c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	3304      	adds	r3, #4
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff f818 	bl	80054b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	3318      	adds	r3, #24
 800648c:	4618      	mov	r0, r3
 800648e:	f7ff f813 	bl	80054b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006496:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	2200      	movs	r2, #0
 80064ac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064b6:	683a      	ldr	r2, [r7, #0]
 80064b8:	68f9      	ldr	r1, [r7, #12]
 80064ba:	69b8      	ldr	r0, [r7, #24]
 80064bc:	f001 fa26 	bl	800790c <pxPortInitialiseStack>
 80064c0:	4602      	mov	r2, r0
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064d2:	bf00      	nop
 80064d4:	3720      	adds	r7, #32
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064e4:	f001 fb3e 	bl	8007b64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064e8:	4b2d      	ldr	r3, [pc, #180]	; (80065a0 <prvAddNewTaskToReadyList+0xc4>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3301      	adds	r3, #1
 80064ee:	4a2c      	ldr	r2, [pc, #176]	; (80065a0 <prvAddNewTaskToReadyList+0xc4>)
 80064f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064f2:	4b2c      	ldr	r3, [pc, #176]	; (80065a4 <prvAddNewTaskToReadyList+0xc8>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d109      	bne.n	800650e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064fa:	4a2a      	ldr	r2, [pc, #168]	; (80065a4 <prvAddNewTaskToReadyList+0xc8>)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006500:	4b27      	ldr	r3, [pc, #156]	; (80065a0 <prvAddNewTaskToReadyList+0xc4>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d110      	bne.n	800652a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006508:	f000 fc16 	bl	8006d38 <prvInitialiseTaskLists>
 800650c:	e00d      	b.n	800652a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800650e:	4b26      	ldr	r3, [pc, #152]	; (80065a8 <prvAddNewTaskToReadyList+0xcc>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006516:	4b23      	ldr	r3, [pc, #140]	; (80065a4 <prvAddNewTaskToReadyList+0xc8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	429a      	cmp	r2, r3
 8006522:	d802      	bhi.n	800652a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006524:	4a1f      	ldr	r2, [pc, #124]	; (80065a4 <prvAddNewTaskToReadyList+0xc8>)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800652a:	4b20      	ldr	r3, [pc, #128]	; (80065ac <prvAddNewTaskToReadyList+0xd0>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3301      	adds	r3, #1
 8006530:	4a1e      	ldr	r2, [pc, #120]	; (80065ac <prvAddNewTaskToReadyList+0xd0>)
 8006532:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006534:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <prvAddNewTaskToReadyList+0xd0>)
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006540:	4b1b      	ldr	r3, [pc, #108]	; (80065b0 <prvAddNewTaskToReadyList+0xd4>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	429a      	cmp	r2, r3
 8006546:	d903      	bls.n	8006550 <prvAddNewTaskToReadyList+0x74>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	4a18      	ldr	r2, [pc, #96]	; (80065b0 <prvAddNewTaskToReadyList+0xd4>)
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4a15      	ldr	r2, [pc, #84]	; (80065b4 <prvAddNewTaskToReadyList+0xd8>)
 800655e:	441a      	add	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	3304      	adds	r3, #4
 8006564:	4619      	mov	r1, r3
 8006566:	4610      	mov	r0, r2
 8006568:	f7fe ffb3 	bl	80054d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800656c:	f001 fb2a 	bl	8007bc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006570:	4b0d      	ldr	r3, [pc, #52]	; (80065a8 <prvAddNewTaskToReadyList+0xcc>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00e      	beq.n	8006596 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006578:	4b0a      	ldr	r3, [pc, #40]	; (80065a4 <prvAddNewTaskToReadyList+0xc8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006582:	429a      	cmp	r2, r3
 8006584:	d207      	bcs.n	8006596 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006586:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <prvAddNewTaskToReadyList+0xdc>)
 8006588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006596:	bf00      	nop
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	20000c28 	.word	0x20000c28
 80065a4:	20000754 	.word	0x20000754
 80065a8:	20000c34 	.word	0x20000c34
 80065ac:	20000c44 	.word	0x20000c44
 80065b0:	20000c30 	.word	0x20000c30
 80065b4:	20000758 	.word	0x20000758
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065c4:	2300      	movs	r3, #0
 80065c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d017      	beq.n	80065fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065ce:	4b13      	ldr	r3, [pc, #76]	; (800661c <vTaskDelay+0x60>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <vTaskDelay+0x30>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	60bb      	str	r3, [r7, #8]
}
 80065e8:	bf00      	nop
 80065ea:	e7fe      	b.n	80065ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80065ec:	f000 f880 	bl	80066f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80065f0:	2100      	movs	r1, #0
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 fde8 	bl	80071c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80065f8:	f000 f888 	bl	800670c <xTaskResumeAll>
 80065fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d107      	bne.n	8006614 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006604:	4b06      	ldr	r3, [pc, #24]	; (8006620 <vTaskDelay+0x64>)
 8006606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006614:	bf00      	nop
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	20000c50 	.word	0x20000c50
 8006620:	e000ed04 	.word	0xe000ed04

08006624 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08a      	sub	sp, #40	; 0x28
 8006628:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800662a:	2300      	movs	r3, #0
 800662c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006632:	463a      	mov	r2, r7
 8006634:	1d39      	adds	r1, r7, #4
 8006636:	f107 0308 	add.w	r3, r7, #8
 800663a:	4618      	mov	r0, r3
 800663c:	f7fe fee8 	bl	8005410 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006640:	6839      	ldr	r1, [r7, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	9202      	str	r2, [sp, #8]
 8006648:	9301      	str	r3, [sp, #4]
 800664a:	2300      	movs	r3, #0
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	2300      	movs	r3, #0
 8006650:	460a      	mov	r2, r1
 8006652:	4921      	ldr	r1, [pc, #132]	; (80066d8 <vTaskStartScheduler+0xb4>)
 8006654:	4821      	ldr	r0, [pc, #132]	; (80066dc <vTaskStartScheduler+0xb8>)
 8006656:	f7ff fe0f 	bl	8006278 <xTaskCreateStatic>
 800665a:	4603      	mov	r3, r0
 800665c:	4a20      	ldr	r2, [pc, #128]	; (80066e0 <vTaskStartScheduler+0xbc>)
 800665e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006660:	4b1f      	ldr	r3, [pc, #124]	; (80066e0 <vTaskStartScheduler+0xbc>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006668:	2301      	movs	r3, #1
 800666a:	617b      	str	r3, [r7, #20]
 800666c:	e001      	b.n	8006672 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800666e:	2300      	movs	r3, #0
 8006670:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d102      	bne.n	800667e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006678:	f000 fdfa 	bl	8007270 <xTimerCreateTimerTask>
 800667c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d116      	bne.n	80066b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	613b      	str	r3, [r7, #16]
}
 8006696:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006698:	4b12      	ldr	r3, [pc, #72]	; (80066e4 <vTaskStartScheduler+0xc0>)
 800669a:	f04f 32ff 	mov.w	r2, #4294967295
 800669e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80066a0:	4b11      	ldr	r3, [pc, #68]	; (80066e8 <vTaskStartScheduler+0xc4>)
 80066a2:	2201      	movs	r2, #1
 80066a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80066a6:	4b11      	ldr	r3, [pc, #68]	; (80066ec <vTaskStartScheduler+0xc8>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80066ac:	f001 f9b8 	bl	8007a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80066b0:	e00e      	b.n	80066d0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b8:	d10a      	bne.n	80066d0 <vTaskStartScheduler+0xac>
	__asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	60fb      	str	r3, [r7, #12]
}
 80066cc:	bf00      	nop
 80066ce:	e7fe      	b.n	80066ce <vTaskStartScheduler+0xaa>
}
 80066d0:	bf00      	nop
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	0800a7f4 	.word	0x0800a7f4
 80066dc:	08006d09 	.word	0x08006d09
 80066e0:	20000c4c 	.word	0x20000c4c
 80066e4:	20000c48 	.word	0x20000c48
 80066e8:	20000c34 	.word	0x20000c34
 80066ec:	20000c2c 	.word	0x20000c2c

080066f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066f0:	b480      	push	{r7}
 80066f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80066f4:	4b04      	ldr	r3, [pc, #16]	; (8006708 <vTaskSuspendAll+0x18>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3301      	adds	r3, #1
 80066fa:	4a03      	ldr	r2, [pc, #12]	; (8006708 <vTaskSuspendAll+0x18>)
 80066fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80066fe:	bf00      	nop
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	20000c50 	.word	0x20000c50

0800670c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006712:	2300      	movs	r3, #0
 8006714:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006716:	2300      	movs	r3, #0
 8006718:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800671a:	4b42      	ldr	r3, [pc, #264]	; (8006824 <xTaskResumeAll+0x118>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10a      	bne.n	8006738 <xTaskResumeAll+0x2c>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	603b      	str	r3, [r7, #0]
}
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006738:	f001 fa14 	bl	8007b64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800673c:	4b39      	ldr	r3, [pc, #228]	; (8006824 <xTaskResumeAll+0x118>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3b01      	subs	r3, #1
 8006742:	4a38      	ldr	r2, [pc, #224]	; (8006824 <xTaskResumeAll+0x118>)
 8006744:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006746:	4b37      	ldr	r3, [pc, #220]	; (8006824 <xTaskResumeAll+0x118>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d162      	bne.n	8006814 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800674e:	4b36      	ldr	r3, [pc, #216]	; (8006828 <xTaskResumeAll+0x11c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d05e      	beq.n	8006814 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006756:	e02f      	b.n	80067b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006758:	4b34      	ldr	r3, [pc, #208]	; (800682c <xTaskResumeAll+0x120>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3318      	adds	r3, #24
 8006764:	4618      	mov	r0, r3
 8006766:	f7fe ff11 	bl	800558c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3304      	adds	r3, #4
 800676e:	4618      	mov	r0, r3
 8006770:	f7fe ff0c 	bl	800558c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006778:	4b2d      	ldr	r3, [pc, #180]	; (8006830 <xTaskResumeAll+0x124>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	429a      	cmp	r2, r3
 800677e:	d903      	bls.n	8006788 <xTaskResumeAll+0x7c>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	4a2a      	ldr	r2, [pc, #168]	; (8006830 <xTaskResumeAll+0x124>)
 8006786:	6013      	str	r3, [r2, #0]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4a27      	ldr	r2, [pc, #156]	; (8006834 <xTaskResumeAll+0x128>)
 8006796:	441a      	add	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3304      	adds	r3, #4
 800679c:	4619      	mov	r1, r3
 800679e:	4610      	mov	r0, r2
 80067a0:	f7fe fe97 	bl	80054d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a8:	4b23      	ldr	r3, [pc, #140]	; (8006838 <xTaskResumeAll+0x12c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d302      	bcc.n	80067b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80067b2:	4b22      	ldr	r3, [pc, #136]	; (800683c <xTaskResumeAll+0x130>)
 80067b4:	2201      	movs	r2, #1
 80067b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067b8:	4b1c      	ldr	r3, [pc, #112]	; (800682c <xTaskResumeAll+0x120>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1cb      	bne.n	8006758 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80067c6:	f000 fb55 	bl	8006e74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80067ca:	4b1d      	ldr	r3, [pc, #116]	; (8006840 <xTaskResumeAll+0x134>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d010      	beq.n	80067f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80067d6:	f000 f847 	bl	8006868 <xTaskIncrementTick>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80067e0:	4b16      	ldr	r3, [pc, #88]	; (800683c <xTaskResumeAll+0x130>)
 80067e2:	2201      	movs	r2, #1
 80067e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1f1      	bne.n	80067d6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80067f2:	4b13      	ldr	r3, [pc, #76]	; (8006840 <xTaskResumeAll+0x134>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80067f8:	4b10      	ldr	r3, [pc, #64]	; (800683c <xTaskResumeAll+0x130>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d009      	beq.n	8006814 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006800:	2301      	movs	r3, #1
 8006802:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006804:	4b0f      	ldr	r3, [pc, #60]	; (8006844 <xTaskResumeAll+0x138>)
 8006806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006814:	f001 f9d6 	bl	8007bc4 <vPortExitCritical>

	return xAlreadyYielded;
 8006818:	68bb      	ldr	r3, [r7, #8]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20000c50 	.word	0x20000c50
 8006828:	20000c28 	.word	0x20000c28
 800682c:	20000be8 	.word	0x20000be8
 8006830:	20000c30 	.word	0x20000c30
 8006834:	20000758 	.word	0x20000758
 8006838:	20000754 	.word	0x20000754
 800683c:	20000c3c 	.word	0x20000c3c
 8006840:	20000c38 	.word	0x20000c38
 8006844:	e000ed04 	.word	0xe000ed04

08006848 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800684e:	4b05      	ldr	r3, [pc, #20]	; (8006864 <xTaskGetTickCount+0x1c>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006854:	687b      	ldr	r3, [r7, #4]
}
 8006856:	4618      	mov	r0, r3
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	20000c2c 	.word	0x20000c2c

08006868 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800686e:	2300      	movs	r3, #0
 8006870:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006872:	4b4f      	ldr	r3, [pc, #316]	; (80069b0 <xTaskIncrementTick+0x148>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	f040 8089 	bne.w	800698e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800687c:	4b4d      	ldr	r3, [pc, #308]	; (80069b4 <xTaskIncrementTick+0x14c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3301      	adds	r3, #1
 8006882:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006884:	4a4b      	ldr	r2, [pc, #300]	; (80069b4 <xTaskIncrementTick+0x14c>)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d120      	bne.n	80068d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006890:	4b49      	ldr	r3, [pc, #292]	; (80069b8 <xTaskIncrementTick+0x150>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	603b      	str	r3, [r7, #0]
}
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <xTaskIncrementTick+0x46>
 80068b0:	4b41      	ldr	r3, [pc, #260]	; (80069b8 <xTaskIncrementTick+0x150>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	4b41      	ldr	r3, [pc, #260]	; (80069bc <xTaskIncrementTick+0x154>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a3f      	ldr	r2, [pc, #252]	; (80069b8 <xTaskIncrementTick+0x150>)
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	4a3f      	ldr	r2, [pc, #252]	; (80069bc <xTaskIncrementTick+0x154>)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6013      	str	r3, [r2, #0]
 80068c4:	4b3e      	ldr	r3, [pc, #248]	; (80069c0 <xTaskIncrementTick+0x158>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3301      	adds	r3, #1
 80068ca:	4a3d      	ldr	r2, [pc, #244]	; (80069c0 <xTaskIncrementTick+0x158>)
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	f000 fad1 	bl	8006e74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80068d2:	4b3c      	ldr	r3, [pc, #240]	; (80069c4 <xTaskIncrementTick+0x15c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d349      	bcc.n	8006970 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068dc:	4b36      	ldr	r3, [pc, #216]	; (80069b8 <xTaskIncrementTick+0x150>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d104      	bne.n	80068f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e6:	4b37      	ldr	r3, [pc, #220]	; (80069c4 <xTaskIncrementTick+0x15c>)
 80068e8:	f04f 32ff 	mov.w	r2, #4294967295
 80068ec:	601a      	str	r2, [r3, #0]
					break;
 80068ee:	e03f      	b.n	8006970 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068f0:	4b31      	ldr	r3, [pc, #196]	; (80069b8 <xTaskIncrementTick+0x150>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	429a      	cmp	r2, r3
 8006906:	d203      	bcs.n	8006910 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006908:	4a2e      	ldr	r2, [pc, #184]	; (80069c4 <xTaskIncrementTick+0x15c>)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800690e:	e02f      	b.n	8006970 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	3304      	adds	r3, #4
 8006914:	4618      	mov	r0, r3
 8006916:	f7fe fe39 	bl	800558c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691e:	2b00      	cmp	r3, #0
 8006920:	d004      	beq.n	800692c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	3318      	adds	r3, #24
 8006926:	4618      	mov	r0, r3
 8006928:	f7fe fe30 	bl	800558c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006930:	4b25      	ldr	r3, [pc, #148]	; (80069c8 <xTaskIncrementTick+0x160>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	429a      	cmp	r2, r3
 8006936:	d903      	bls.n	8006940 <xTaskIncrementTick+0xd8>
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800693c:	4a22      	ldr	r2, [pc, #136]	; (80069c8 <xTaskIncrementTick+0x160>)
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006944:	4613      	mov	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4a1f      	ldr	r2, [pc, #124]	; (80069cc <xTaskIncrementTick+0x164>)
 800694e:	441a      	add	r2, r3
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	3304      	adds	r3, #4
 8006954:	4619      	mov	r1, r3
 8006956:	4610      	mov	r0, r2
 8006958:	f7fe fdbb 	bl	80054d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006960:	4b1b      	ldr	r3, [pc, #108]	; (80069d0 <xTaskIncrementTick+0x168>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006966:	429a      	cmp	r2, r3
 8006968:	d3b8      	bcc.n	80068dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800696a:	2301      	movs	r3, #1
 800696c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800696e:	e7b5      	b.n	80068dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006970:	4b17      	ldr	r3, [pc, #92]	; (80069d0 <xTaskIncrementTick+0x168>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006976:	4915      	ldr	r1, [pc, #84]	; (80069cc <xTaskIncrementTick+0x164>)
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d907      	bls.n	8006998 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8006988:	2301      	movs	r3, #1
 800698a:	617b      	str	r3, [r7, #20]
 800698c:	e004      	b.n	8006998 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800698e:	4b11      	ldr	r3, [pc, #68]	; (80069d4 <xTaskIncrementTick+0x16c>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3301      	adds	r3, #1
 8006994:	4a0f      	ldr	r2, [pc, #60]	; (80069d4 <xTaskIncrementTick+0x16c>)
 8006996:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006998:	4b0f      	ldr	r3, [pc, #60]	; (80069d8 <xTaskIncrementTick+0x170>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80069a0:	2301      	movs	r3, #1
 80069a2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80069a4:	697b      	ldr	r3, [r7, #20]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	20000c50 	.word	0x20000c50
 80069b4:	20000c2c 	.word	0x20000c2c
 80069b8:	20000be0 	.word	0x20000be0
 80069bc:	20000be4 	.word	0x20000be4
 80069c0:	20000c40 	.word	0x20000c40
 80069c4:	20000c48 	.word	0x20000c48
 80069c8:	20000c30 	.word	0x20000c30
 80069cc:	20000758 	.word	0x20000758
 80069d0:	20000754 	.word	0x20000754
 80069d4:	20000c38 	.word	0x20000c38
 80069d8:	20000c3c 	.word	0x20000c3c

080069dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80069e2:	4b28      	ldr	r3, [pc, #160]	; (8006a84 <vTaskSwitchContext+0xa8>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80069ea:	4b27      	ldr	r3, [pc, #156]	; (8006a88 <vTaskSwitchContext+0xac>)
 80069ec:	2201      	movs	r2, #1
 80069ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80069f0:	e041      	b.n	8006a76 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80069f2:	4b25      	ldr	r3, [pc, #148]	; (8006a88 <vTaskSwitchContext+0xac>)
 80069f4:	2200      	movs	r2, #0
 80069f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069f8:	4b24      	ldr	r3, [pc, #144]	; (8006a8c <vTaskSwitchContext+0xb0>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	60fb      	str	r3, [r7, #12]
 80069fe:	e010      	b.n	8006a22 <vTaskSwitchContext+0x46>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10a      	bne.n	8006a1c <vTaskSwitchContext+0x40>
	__asm volatile
 8006a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0a:	f383 8811 	msr	BASEPRI, r3
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	f3bf 8f4f 	dsb	sy
 8006a16:	607b      	str	r3, [r7, #4]
}
 8006a18:	bf00      	nop
 8006a1a:	e7fe      	b.n	8006a1a <vTaskSwitchContext+0x3e>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	60fb      	str	r3, [r7, #12]
 8006a22:	491b      	ldr	r1, [pc, #108]	; (8006a90 <vTaskSwitchContext+0xb4>)
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	440b      	add	r3, r1
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0e4      	beq.n	8006a00 <vTaskSwitchContext+0x24>
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4413      	add	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4a13      	ldr	r2, [pc, #76]	; (8006a90 <vTaskSwitchContext+0xb4>)
 8006a42:	4413      	add	r3, r2
 8006a44:	60bb      	str	r3, [r7, #8]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	605a      	str	r2, [r3, #4]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	3308      	adds	r3, #8
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d104      	bne.n	8006a66 <vTaskSwitchContext+0x8a>
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	605a      	str	r2, [r3, #4]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	4a09      	ldr	r2, [pc, #36]	; (8006a94 <vTaskSwitchContext+0xb8>)
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	4a06      	ldr	r2, [pc, #24]	; (8006a8c <vTaskSwitchContext+0xb0>)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6013      	str	r3, [r2, #0]
}
 8006a76:	bf00      	nop
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	20000c50 	.word	0x20000c50
 8006a88:	20000c3c 	.word	0x20000c3c
 8006a8c:	20000c30 	.word	0x20000c30
 8006a90:	20000758 	.word	0x20000758
 8006a94:	20000754 	.word	0x20000754

08006a98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10a      	bne.n	8006abe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	60fb      	str	r3, [r7, #12]
}
 8006aba:	bf00      	nop
 8006abc:	e7fe      	b.n	8006abc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006abe:	4b07      	ldr	r3, [pc, #28]	; (8006adc <vTaskPlaceOnEventList+0x44>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	3318      	adds	r3, #24
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7fe fd27 	bl	800551a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006acc:	2101      	movs	r1, #1
 8006ace:	6838      	ldr	r0, [r7, #0]
 8006ad0:	f000 fb7a 	bl	80071c8 <prvAddCurrentTaskToDelayedList>
}
 8006ad4:	bf00      	nop
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20000754 	.word	0x20000754

08006ae0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10a      	bne.n	8006b08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af6:	f383 8811 	msr	BASEPRI, r3
 8006afa:	f3bf 8f6f 	isb	sy
 8006afe:	f3bf 8f4f 	dsb	sy
 8006b02:	617b      	str	r3, [r7, #20]
}
 8006b04:	bf00      	nop
 8006b06:	e7fe      	b.n	8006b06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b08:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <vTaskPlaceOnEventListRestricted+0x54>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3318      	adds	r3, #24
 8006b0e:	4619      	mov	r1, r3
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f7fe fcde 	bl	80054d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	68b8      	ldr	r0, [r7, #8]
 8006b26:	f000 fb4f 	bl	80071c8 <prvAddCurrentTaskToDelayedList>
	}
 8006b2a:	bf00      	nop
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	20000754 	.word	0x20000754

08006b38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10a      	bne.n	8006b64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	60fb      	str	r3, [r7, #12]
}
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	3318      	adds	r3, #24
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fe fd0f 	bl	800558c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b6e:	4b1e      	ldr	r3, [pc, #120]	; (8006be8 <xTaskRemoveFromEventList+0xb0>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d11d      	bne.n	8006bb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7fe fd06 	bl	800558c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b84:	4b19      	ldr	r3, [pc, #100]	; (8006bec <xTaskRemoveFromEventList+0xb4>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d903      	bls.n	8006b94 <xTaskRemoveFromEventList+0x5c>
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b90:	4a16      	ldr	r2, [pc, #88]	; (8006bec <xTaskRemoveFromEventList+0xb4>)
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b98:	4613      	mov	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4a13      	ldr	r2, [pc, #76]	; (8006bf0 <xTaskRemoveFromEventList+0xb8>)
 8006ba2:	441a      	add	r2, r3
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	4619      	mov	r1, r3
 8006baa:	4610      	mov	r0, r2
 8006bac:	f7fe fc91 	bl	80054d2 <vListInsertEnd>
 8006bb0:	e005      	b.n	8006bbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	3318      	adds	r3, #24
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	480e      	ldr	r0, [pc, #56]	; (8006bf4 <xTaskRemoveFromEventList+0xbc>)
 8006bba:	f7fe fc8a 	bl	80054d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	; (8006bf8 <xTaskRemoveFromEventList+0xc0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d905      	bls.n	8006bd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006bd0:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <xTaskRemoveFromEventList+0xc4>)
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]
 8006bd6:	e001      	b.n	8006bdc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006bdc:	697b      	ldr	r3, [r7, #20]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	20000c50 	.word	0x20000c50
 8006bec:	20000c30 	.word	0x20000c30
 8006bf0:	20000758 	.word	0x20000758
 8006bf4:	20000be8 	.word	0x20000be8
 8006bf8:	20000754 	.word	0x20000754
 8006bfc:	20000c3c 	.word	0x20000c3c

08006c00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c08:	4b06      	ldr	r3, [pc, #24]	; (8006c24 <vTaskInternalSetTimeOutState+0x24>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c10:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <vTaskInternalSetTimeOutState+0x28>)
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	605a      	str	r2, [r3, #4]
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	20000c40 	.word	0x20000c40
 8006c28:	20000c2c 	.word	0x20000c2c

08006c2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b088      	sub	sp, #32
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10a      	bne.n	8006c52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	613b      	str	r3, [r7, #16]
}
 8006c4e:	bf00      	nop
 8006c50:	e7fe      	b.n	8006c50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10a      	bne.n	8006c6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5c:	f383 8811 	msr	BASEPRI, r3
 8006c60:	f3bf 8f6f 	isb	sy
 8006c64:	f3bf 8f4f 	dsb	sy
 8006c68:	60fb      	str	r3, [r7, #12]
}
 8006c6a:	bf00      	nop
 8006c6c:	e7fe      	b.n	8006c6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006c6e:	f000 ff79 	bl	8007b64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c72:	4b1d      	ldr	r3, [pc, #116]	; (8006ce8 <xTaskCheckForTimeOut+0xbc>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	1ad3      	subs	r3, r2, r3
 8006c80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8a:	d102      	bne.n	8006c92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	61fb      	str	r3, [r7, #28]
 8006c90:	e023      	b.n	8006cda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	4b15      	ldr	r3, [pc, #84]	; (8006cec <xTaskCheckForTimeOut+0xc0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d007      	beq.n	8006cae <xTaskCheckForTimeOut+0x82>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d302      	bcc.n	8006cae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	61fb      	str	r3, [r7, #28]
 8006cac:	e015      	b.n	8006cda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d20b      	bcs.n	8006cd0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	1ad2      	subs	r2, r2, r3
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7ff ff9b 	bl	8006c00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61fb      	str	r3, [r7, #28]
 8006cce:	e004      	b.n	8006cda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006cda:	f000 ff73 	bl	8007bc4 <vPortExitCritical>

	return xReturn;
 8006cde:	69fb      	ldr	r3, [r7, #28]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3720      	adds	r7, #32
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	20000c2c 	.word	0x20000c2c
 8006cec:	20000c40 	.word	0x20000c40

08006cf0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006cf4:	4b03      	ldr	r3, [pc, #12]	; (8006d04 <vTaskMissedYield+0x14>)
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]
}
 8006cfa:	bf00      	nop
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	20000c3c 	.word	0x20000c3c

08006d08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d10:	f000 f852 	bl	8006db8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d14:	4b06      	ldr	r3, [pc, #24]	; (8006d30 <prvIdleTask+0x28>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d9f9      	bls.n	8006d10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <prvIdleTask+0x2c>)
 8006d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d2c:	e7f0      	b.n	8006d10 <prvIdleTask+0x8>
 8006d2e:	bf00      	nop
 8006d30:	20000758 	.word	0x20000758
 8006d34:	e000ed04 	.word	0xe000ed04

08006d38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d3e:	2300      	movs	r3, #0
 8006d40:	607b      	str	r3, [r7, #4]
 8006d42:	e00c      	b.n	8006d5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	4613      	mov	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4a12      	ldr	r2, [pc, #72]	; (8006d98 <prvInitialiseTaskLists+0x60>)
 8006d50:	4413      	add	r3, r2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fe fb90 	bl	8005478 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	607b      	str	r3, [r7, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2b37      	cmp	r3, #55	; 0x37
 8006d62:	d9ef      	bls.n	8006d44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006d64:	480d      	ldr	r0, [pc, #52]	; (8006d9c <prvInitialiseTaskLists+0x64>)
 8006d66:	f7fe fb87 	bl	8005478 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006d6a:	480d      	ldr	r0, [pc, #52]	; (8006da0 <prvInitialiseTaskLists+0x68>)
 8006d6c:	f7fe fb84 	bl	8005478 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d70:	480c      	ldr	r0, [pc, #48]	; (8006da4 <prvInitialiseTaskLists+0x6c>)
 8006d72:	f7fe fb81 	bl	8005478 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d76:	480c      	ldr	r0, [pc, #48]	; (8006da8 <prvInitialiseTaskLists+0x70>)
 8006d78:	f7fe fb7e 	bl	8005478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d7c:	480b      	ldr	r0, [pc, #44]	; (8006dac <prvInitialiseTaskLists+0x74>)
 8006d7e:	f7fe fb7b 	bl	8005478 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d82:	4b0b      	ldr	r3, [pc, #44]	; (8006db0 <prvInitialiseTaskLists+0x78>)
 8006d84:	4a05      	ldr	r2, [pc, #20]	; (8006d9c <prvInitialiseTaskLists+0x64>)
 8006d86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d88:	4b0a      	ldr	r3, [pc, #40]	; (8006db4 <prvInitialiseTaskLists+0x7c>)
 8006d8a:	4a05      	ldr	r2, [pc, #20]	; (8006da0 <prvInitialiseTaskLists+0x68>)
 8006d8c:	601a      	str	r2, [r3, #0]
}
 8006d8e:	bf00      	nop
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000758 	.word	0x20000758
 8006d9c:	20000bb8 	.word	0x20000bb8
 8006da0:	20000bcc 	.word	0x20000bcc
 8006da4:	20000be8 	.word	0x20000be8
 8006da8:	20000bfc 	.word	0x20000bfc
 8006dac:	20000c14 	.word	0x20000c14
 8006db0:	20000be0 	.word	0x20000be0
 8006db4:	20000be4 	.word	0x20000be4

08006db8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006dbe:	e019      	b.n	8006df4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006dc0:	f000 fed0 	bl	8007b64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc4:	4b10      	ldr	r3, [pc, #64]	; (8006e08 <prvCheckTasksWaitingTermination+0x50>)
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	3304      	adds	r3, #4
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7fe fbdb 	bl	800558c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006dd6:	4b0d      	ldr	r3, [pc, #52]	; (8006e0c <prvCheckTasksWaitingTermination+0x54>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	4a0b      	ldr	r2, [pc, #44]	; (8006e0c <prvCheckTasksWaitingTermination+0x54>)
 8006dde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <prvCheckTasksWaitingTermination+0x58>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	4a0a      	ldr	r2, [pc, #40]	; (8006e10 <prvCheckTasksWaitingTermination+0x58>)
 8006de8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006dea:	f000 feeb 	bl	8007bc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f810 	bl	8006e14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006df4:	4b06      	ldr	r3, [pc, #24]	; (8006e10 <prvCheckTasksWaitingTermination+0x58>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1e1      	bne.n	8006dc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006dfc:	bf00      	nop
 8006dfe:	bf00      	nop
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	20000bfc 	.word	0x20000bfc
 8006e0c:	20000c28 	.word	0x20000c28
 8006e10:	20000c10 	.word	0x20000c10

08006e14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d108      	bne.n	8006e38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f001 f880 	bl	8007f30 <vPortFree>
				vPortFree( pxTCB );
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 f87d 	bl	8007f30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006e36:	e018      	b.n	8006e6a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d103      	bne.n	8006e4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 f874 	bl	8007f30 <vPortFree>
	}
 8006e48:	e00f      	b.n	8006e6a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d00a      	beq.n	8006e6a <prvDeleteTCB+0x56>
	__asm volatile
 8006e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e58:	f383 8811 	msr	BASEPRI, r3
 8006e5c:	f3bf 8f6f 	isb	sy
 8006e60:	f3bf 8f4f 	dsb	sy
 8006e64:	60fb      	str	r3, [r7, #12]
}
 8006e66:	bf00      	nop
 8006e68:	e7fe      	b.n	8006e68 <prvDeleteTCB+0x54>
	}
 8006e6a:	bf00      	nop
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e7a:	4b0c      	ldr	r3, [pc, #48]	; (8006eac <prvResetNextTaskUnblockTime+0x38>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d104      	bne.n	8006e8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e84:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8006e86:	f04f 32ff 	mov.w	r2, #4294967295
 8006e8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e8c:	e008      	b.n	8006ea0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e8e:	4b07      	ldr	r3, [pc, #28]	; (8006eac <prvResetNextTaskUnblockTime+0x38>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	4a04      	ldr	r2, [pc, #16]	; (8006eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8006e9e:	6013      	str	r3, [r2, #0]
}
 8006ea0:	bf00      	nop
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	20000be0 	.word	0x20000be0
 8006eb0:	20000c48 	.word	0x20000c48

08006eb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006eba:	4b0b      	ldr	r3, [pc, #44]	; (8006ee8 <xTaskGetSchedulerState+0x34>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d102      	bne.n	8006ec8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	607b      	str	r3, [r7, #4]
 8006ec6:	e008      	b.n	8006eda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ec8:	4b08      	ldr	r3, [pc, #32]	; (8006eec <xTaskGetSchedulerState+0x38>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d102      	bne.n	8006ed6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ed0:	2302      	movs	r3, #2
 8006ed2:	607b      	str	r3, [r7, #4]
 8006ed4:	e001      	b.n	8006eda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006eda:	687b      	ldr	r3, [r7, #4]
	}
 8006edc:	4618      	mov	r0, r3
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	20000c34 	.word	0x20000c34
 8006eec:	20000c50 	.word	0x20000c50

08006ef0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d051      	beq.n	8006faa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0a:	4b2a      	ldr	r3, [pc, #168]	; (8006fb4 <xTaskPriorityInherit+0xc4>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d241      	bcs.n	8006f98 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	db06      	blt.n	8006f2a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f1c:	4b25      	ldr	r3, [pc, #148]	; (8006fb4 <xTaskPriorityInherit+0xc4>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	6959      	ldr	r1, [r3, #20]
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f32:	4613      	mov	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4a1f      	ldr	r2, [pc, #124]	; (8006fb8 <xTaskPriorityInherit+0xc8>)
 8006f3c:	4413      	add	r3, r2
 8006f3e:	4299      	cmp	r1, r3
 8006f40:	d122      	bne.n	8006f88 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	3304      	adds	r3, #4
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fe fb20 	bl	800558c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f4c:	4b19      	ldr	r3, [pc, #100]	; (8006fb4 <xTaskPriorityInherit+0xc4>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5a:	4b18      	ldr	r3, [pc, #96]	; (8006fbc <xTaskPriorityInherit+0xcc>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d903      	bls.n	8006f6a <xTaskPriorityInherit+0x7a>
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f66:	4a15      	ldr	r2, [pc, #84]	; (8006fbc <xTaskPriorityInherit+0xcc>)
 8006f68:	6013      	str	r3, [r2, #0]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6e:	4613      	mov	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4a10      	ldr	r2, [pc, #64]	; (8006fb8 <xTaskPriorityInherit+0xc8>)
 8006f78:	441a      	add	r2, r3
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	3304      	adds	r3, #4
 8006f7e:	4619      	mov	r1, r3
 8006f80:	4610      	mov	r0, r2
 8006f82:	f7fe faa6 	bl	80054d2 <vListInsertEnd>
 8006f86:	e004      	b.n	8006f92 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006f88:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <xTaskPriorityInherit+0xc4>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006f92:	2301      	movs	r3, #1
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	e008      	b.n	8006faa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f9c:	4b05      	ldr	r3, [pc, #20]	; (8006fb4 <xTaskPriorityInherit+0xc4>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d201      	bcs.n	8006faa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006faa:	68fb      	ldr	r3, [r7, #12]
	}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	20000754 	.word	0x20000754
 8006fb8:	20000758 	.word	0x20000758
 8006fbc:	20000c30 	.word	0x20000c30

08006fc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d056      	beq.n	8007084 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006fd6:	4b2e      	ldr	r3, [pc, #184]	; (8007090 <xTaskPriorityDisinherit+0xd0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d00a      	beq.n	8006ff6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	60fb      	str	r3, [r7, #12]
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10a      	bne.n	8007014 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	60bb      	str	r3, [r7, #8]
}
 8007010:	bf00      	nop
 8007012:	e7fe      	b.n	8007012 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007018:	1e5a      	subs	r2, r3, #1
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007026:	429a      	cmp	r2, r3
 8007028:	d02c      	beq.n	8007084 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800702e:	2b00      	cmp	r3, #0
 8007030:	d128      	bne.n	8007084 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	3304      	adds	r3, #4
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe faa8 	bl	800558c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007054:	4b0f      	ldr	r3, [pc, #60]	; (8007094 <xTaskPriorityDisinherit+0xd4>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d903      	bls.n	8007064 <xTaskPriorityDisinherit+0xa4>
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	4a0c      	ldr	r2, [pc, #48]	; (8007094 <xTaskPriorityDisinherit+0xd4>)
 8007062:	6013      	str	r3, [r2, #0]
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007068:	4613      	mov	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4a09      	ldr	r2, [pc, #36]	; (8007098 <xTaskPriorityDisinherit+0xd8>)
 8007072:	441a      	add	r2, r3
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	3304      	adds	r3, #4
 8007078:	4619      	mov	r1, r3
 800707a:	4610      	mov	r0, r2
 800707c:	f7fe fa29 	bl	80054d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007080:	2301      	movs	r3, #1
 8007082:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007084:	697b      	ldr	r3, [r7, #20]
	}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20000754 	.word	0x20000754
 8007094:	20000c30 	.word	0x20000c30
 8007098:	20000758 	.word	0x20000758

0800709c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80070aa:	2301      	movs	r3, #1
 80070ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d06a      	beq.n	800718a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10a      	bne.n	80070d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	60fb      	str	r3, [r7, #12]
}
 80070ce:	bf00      	nop
 80070d0:	e7fe      	b.n	80070d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d902      	bls.n	80070e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	61fb      	str	r3, [r7, #28]
 80070e0:	e002      	b.n	80070e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ec:	69fa      	ldr	r2, [r7, #28]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d04b      	beq.n	800718a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d146      	bne.n	800718a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80070fc:	4b25      	ldr	r3, [pc, #148]	; (8007194 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	429a      	cmp	r2, r3
 8007104:	d10a      	bne.n	800711c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	60bb      	str	r3, [r7, #8]
}
 8007118:	bf00      	nop
 800711a:	e7fe      	b.n	800711a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	69fa      	ldr	r2, [r7, #28]
 8007126:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	2b00      	cmp	r3, #0
 800712e:	db04      	blt.n	800713a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	6959      	ldr	r1, [r3, #20]
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4613      	mov	r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4a13      	ldr	r2, [pc, #76]	; (8007198 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800714a:	4413      	add	r3, r2
 800714c:	4299      	cmp	r1, r3
 800714e:	d11c      	bne.n	800718a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	3304      	adds	r3, #4
 8007154:	4618      	mov	r0, r3
 8007156:	f7fe fa19 	bl	800558c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800715e:	4b0f      	ldr	r3, [pc, #60]	; (800719c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d903      	bls.n	800716e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716a:	4a0c      	ldr	r2, [pc, #48]	; (800719c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4a07      	ldr	r2, [pc, #28]	; (8007198 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800717c:	441a      	add	r2, r3
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	3304      	adds	r3, #4
 8007182:	4619      	mov	r1, r3
 8007184:	4610      	mov	r0, r2
 8007186:	f7fe f9a4 	bl	80054d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800718a:	bf00      	nop
 800718c:	3720      	adds	r7, #32
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	20000754 	.word	0x20000754
 8007198:	20000758 	.word	0x20000758
 800719c:	20000c30 	.word	0x20000c30

080071a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80071a0:	b480      	push	{r7}
 80071a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80071a4:	4b07      	ldr	r3, [pc, #28]	; (80071c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80071ac:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80071b2:	3201      	adds	r2, #1
 80071b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80071b6:	4b03      	ldr	r3, [pc, #12]	; (80071c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80071b8:	681b      	ldr	r3, [r3, #0]
	}
 80071ba:	4618      	mov	r0, r3
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	20000754 	.word	0x20000754

080071c8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071d2:	4b21      	ldr	r3, [pc, #132]	; (8007258 <prvAddCurrentTaskToDelayedList+0x90>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071d8:	4b20      	ldr	r3, [pc, #128]	; (800725c <prvAddCurrentTaskToDelayedList+0x94>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3304      	adds	r3, #4
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fe f9d4 	bl	800558c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ea:	d10a      	bne.n	8007202 <prvAddCurrentTaskToDelayedList+0x3a>
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d007      	beq.n	8007202 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071f2:	4b1a      	ldr	r3, [pc, #104]	; (800725c <prvAddCurrentTaskToDelayedList+0x94>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3304      	adds	r3, #4
 80071f8:	4619      	mov	r1, r3
 80071fa:	4819      	ldr	r0, [pc, #100]	; (8007260 <prvAddCurrentTaskToDelayedList+0x98>)
 80071fc:	f7fe f969 	bl	80054d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007200:	e026      	b.n	8007250 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007202:	68fa      	ldr	r2, [r7, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4413      	add	r3, r2
 8007208:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800720a:	4b14      	ldr	r3, [pc, #80]	; (800725c <prvAddCurrentTaskToDelayedList+0x94>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	429a      	cmp	r2, r3
 8007218:	d209      	bcs.n	800722e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800721a:	4b12      	ldr	r3, [pc, #72]	; (8007264 <prvAddCurrentTaskToDelayedList+0x9c>)
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	4b0f      	ldr	r3, [pc, #60]	; (800725c <prvAddCurrentTaskToDelayedList+0x94>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3304      	adds	r3, #4
 8007224:	4619      	mov	r1, r3
 8007226:	4610      	mov	r0, r2
 8007228:	f7fe f977 	bl	800551a <vListInsert>
}
 800722c:	e010      	b.n	8007250 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800722e:	4b0e      	ldr	r3, [pc, #56]	; (8007268 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4b0a      	ldr	r3, [pc, #40]	; (800725c <prvAddCurrentTaskToDelayedList+0x94>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3304      	adds	r3, #4
 8007238:	4619      	mov	r1, r3
 800723a:	4610      	mov	r0, r2
 800723c:	f7fe f96d 	bl	800551a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007240:	4b0a      	ldr	r3, [pc, #40]	; (800726c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	429a      	cmp	r2, r3
 8007248:	d202      	bcs.n	8007250 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800724a:	4a08      	ldr	r2, [pc, #32]	; (800726c <prvAddCurrentTaskToDelayedList+0xa4>)
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	6013      	str	r3, [r2, #0]
}
 8007250:	bf00      	nop
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	20000c2c 	.word	0x20000c2c
 800725c:	20000754 	.word	0x20000754
 8007260:	20000c14 	.word	0x20000c14
 8007264:	20000be4 	.word	0x20000be4
 8007268:	20000be0 	.word	0x20000be0
 800726c:	20000c48 	.word	0x20000c48

08007270 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b08a      	sub	sp, #40	; 0x28
 8007274:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007276:	2300      	movs	r3, #0
 8007278:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800727a:	f000 fb07 	bl	800788c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800727e:	4b1c      	ldr	r3, [pc, #112]	; (80072f0 <xTimerCreateTimerTask+0x80>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d021      	beq.n	80072ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007286:	2300      	movs	r3, #0
 8007288:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800728a:	2300      	movs	r3, #0
 800728c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800728e:	1d3a      	adds	r2, r7, #4
 8007290:	f107 0108 	add.w	r1, r7, #8
 8007294:	f107 030c 	add.w	r3, r7, #12
 8007298:	4618      	mov	r0, r3
 800729a:	f7fe f8d3 	bl	8005444 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	9202      	str	r2, [sp, #8]
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	2302      	movs	r3, #2
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	2300      	movs	r3, #0
 80072ae:	460a      	mov	r2, r1
 80072b0:	4910      	ldr	r1, [pc, #64]	; (80072f4 <xTimerCreateTimerTask+0x84>)
 80072b2:	4811      	ldr	r0, [pc, #68]	; (80072f8 <xTimerCreateTimerTask+0x88>)
 80072b4:	f7fe ffe0 	bl	8006278 <xTaskCreateStatic>
 80072b8:	4603      	mov	r3, r0
 80072ba:	4a10      	ldr	r2, [pc, #64]	; (80072fc <xTimerCreateTimerTask+0x8c>)
 80072bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80072be:	4b0f      	ldr	r3, [pc, #60]	; (80072fc <xTimerCreateTimerTask+0x8c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80072c6:	2301      	movs	r3, #1
 80072c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10a      	bne.n	80072e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	613b      	str	r3, [r7, #16]
}
 80072e2:	bf00      	nop
 80072e4:	e7fe      	b.n	80072e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80072e6:	697b      	ldr	r3, [r7, #20]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	20000c84 	.word	0x20000c84
 80072f4:	0800a7fc 	.word	0x0800a7fc
 80072f8:	08007435 	.word	0x08007435
 80072fc:	20000c88 	.word	0x20000c88

08007300 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b08a      	sub	sp, #40	; 0x28
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800730e:	2300      	movs	r3, #0
 8007310:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	623b      	str	r3, [r7, #32]
}
 800732a:	bf00      	nop
 800732c:	e7fe      	b.n	800732c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800732e:	4b1a      	ldr	r3, [pc, #104]	; (8007398 <xTimerGenericCommand+0x98>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d02a      	beq.n	800738c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2b05      	cmp	r3, #5
 8007346:	dc18      	bgt.n	800737a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007348:	f7ff fdb4 	bl	8006eb4 <xTaskGetSchedulerState>
 800734c:	4603      	mov	r3, r0
 800734e:	2b02      	cmp	r3, #2
 8007350:	d109      	bne.n	8007366 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007352:	4b11      	ldr	r3, [pc, #68]	; (8007398 <xTimerGenericCommand+0x98>)
 8007354:	6818      	ldr	r0, [r3, #0]
 8007356:	f107 0110 	add.w	r1, r7, #16
 800735a:	2300      	movs	r3, #0
 800735c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800735e:	f7fe fa83 	bl	8005868 <xQueueGenericSend>
 8007362:	6278      	str	r0, [r7, #36]	; 0x24
 8007364:	e012      	b.n	800738c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007366:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <xTimerGenericCommand+0x98>)
 8007368:	6818      	ldr	r0, [r3, #0]
 800736a:	f107 0110 	add.w	r1, r7, #16
 800736e:	2300      	movs	r3, #0
 8007370:	2200      	movs	r2, #0
 8007372:	f7fe fa79 	bl	8005868 <xQueueGenericSend>
 8007376:	6278      	str	r0, [r7, #36]	; 0x24
 8007378:	e008      	b.n	800738c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800737a:	4b07      	ldr	r3, [pc, #28]	; (8007398 <xTimerGenericCommand+0x98>)
 800737c:	6818      	ldr	r0, [r3, #0]
 800737e:	f107 0110 	add.w	r1, r7, #16
 8007382:	2300      	movs	r3, #0
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	f7fe fb6d 	bl	8005a64 <xQueueGenericSendFromISR>
 800738a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800738e:	4618      	mov	r0, r3
 8007390:	3728      	adds	r7, #40	; 0x28
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	20000c84 	.word	0x20000c84

0800739c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b088      	sub	sp, #32
 80073a0:	af02      	add	r7, sp, #8
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073a6:	4b22      	ldr	r3, [pc, #136]	; (8007430 <prvProcessExpiredTimer+0x94>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	3304      	adds	r3, #4
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe f8e9 	bl	800558c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073c0:	f003 0304 	and.w	r3, r3, #4
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d022      	beq.n	800740e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	699a      	ldr	r2, [r3, #24]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	18d1      	adds	r1, r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	6978      	ldr	r0, [r7, #20]
 80073d6:	f000 f8d1 	bl	800757c <prvInsertTimerInActiveList>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01f      	beq.n	8007420 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073e0:	2300      	movs	r3, #0
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	2300      	movs	r3, #0
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	2100      	movs	r1, #0
 80073ea:	6978      	ldr	r0, [r7, #20]
 80073ec:	f7ff ff88 	bl	8007300 <xTimerGenericCommand>
 80073f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d113      	bne.n	8007420 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	60fb      	str	r3, [r7, #12]
}
 800740a:	bf00      	nop
 800740c:	e7fe      	b.n	800740c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007414:	f023 0301 	bic.w	r3, r3, #1
 8007418:	b2da      	uxtb	r2, r3
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	6a1b      	ldr	r3, [r3, #32]
 8007424:	6978      	ldr	r0, [r7, #20]
 8007426:	4798      	blx	r3
}
 8007428:	bf00      	nop
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	20000c7c 	.word	0x20000c7c

08007434 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800743c:	f107 0308 	add.w	r3, r7, #8
 8007440:	4618      	mov	r0, r3
 8007442:	f000 f857 	bl	80074f4 <prvGetNextExpireTime>
 8007446:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4619      	mov	r1, r3
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 f803 	bl	8007458 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007452:	f000 f8d5 	bl	8007600 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007456:	e7f1      	b.n	800743c <prvTimerTask+0x8>

08007458 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007462:	f7ff f945 	bl	80066f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007466:	f107 0308 	add.w	r3, r7, #8
 800746a:	4618      	mov	r0, r3
 800746c:	f000 f866 	bl	800753c <prvSampleTimeNow>
 8007470:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d130      	bne.n	80074da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10a      	bne.n	8007494 <prvProcessTimerOrBlockTask+0x3c>
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	429a      	cmp	r2, r3
 8007484:	d806      	bhi.n	8007494 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007486:	f7ff f941 	bl	800670c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800748a:	68f9      	ldr	r1, [r7, #12]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7ff ff85 	bl	800739c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007492:	e024      	b.n	80074de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d008      	beq.n	80074ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800749a:	4b13      	ldr	r3, [pc, #76]	; (80074e8 <prvProcessTimerOrBlockTask+0x90>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <prvProcessTimerOrBlockTask+0x50>
 80074a4:	2301      	movs	r3, #1
 80074a6:	e000      	b.n	80074aa <prvProcessTimerOrBlockTask+0x52>
 80074a8:	2300      	movs	r3, #0
 80074aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074ac:	4b0f      	ldr	r3, [pc, #60]	; (80074ec <prvProcessTimerOrBlockTask+0x94>)
 80074ae:	6818      	ldr	r0, [r3, #0]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	4619      	mov	r1, r3
 80074ba:	f7fe fea9 	bl	8006210 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80074be:	f7ff f925 	bl	800670c <xTaskResumeAll>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d10a      	bne.n	80074de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80074c8:	4b09      	ldr	r3, [pc, #36]	; (80074f0 <prvProcessTimerOrBlockTask+0x98>)
 80074ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ce:	601a      	str	r2, [r3, #0]
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	f3bf 8f6f 	isb	sy
}
 80074d8:	e001      	b.n	80074de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80074da:	f7ff f917 	bl	800670c <xTaskResumeAll>
}
 80074de:	bf00      	nop
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20000c80 	.word	0x20000c80
 80074ec:	20000c84 	.word	0x20000c84
 80074f0:	e000ed04 	.word	0xe000ed04

080074f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074fc:	4b0e      	ldr	r3, [pc, #56]	; (8007538 <prvGetNextExpireTime+0x44>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <prvGetNextExpireTime+0x16>
 8007506:	2201      	movs	r2, #1
 8007508:	e000      	b.n	800750c <prvGetNextExpireTime+0x18>
 800750a:	2200      	movs	r2, #0
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d105      	bne.n	8007524 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007518:	4b07      	ldr	r3, [pc, #28]	; (8007538 <prvGetNextExpireTime+0x44>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	60fb      	str	r3, [r7, #12]
 8007522:	e001      	b.n	8007528 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007524:	2300      	movs	r3, #0
 8007526:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007528:	68fb      	ldr	r3, [r7, #12]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	20000c7c 	.word	0x20000c7c

0800753c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007544:	f7ff f980 	bl	8006848 <xTaskGetTickCount>
 8007548:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800754a:	4b0b      	ldr	r3, [pc, #44]	; (8007578 <prvSampleTimeNow+0x3c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	429a      	cmp	r2, r3
 8007552:	d205      	bcs.n	8007560 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007554:	f000 f936 	bl	80077c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	e002      	b.n	8007566 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007566:	4a04      	ldr	r2, [pc, #16]	; (8007578 <prvSampleTimeNow+0x3c>)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800756c:	68fb      	ldr	r3, [r7, #12]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3710      	adds	r7, #16
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	20000c8c 	.word	0x20000c8c

0800757c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800758a:	2300      	movs	r3, #0
 800758c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d812      	bhi.n	80075c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	1ad2      	subs	r2, r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	699b      	ldr	r3, [r3, #24]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d302      	bcc.n	80075b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80075b0:	2301      	movs	r3, #1
 80075b2:	617b      	str	r3, [r7, #20]
 80075b4:	e01b      	b.n	80075ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80075b6:	4b10      	ldr	r3, [pc, #64]	; (80075f8 <prvInsertTimerInActiveList+0x7c>)
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3304      	adds	r3, #4
 80075be:	4619      	mov	r1, r3
 80075c0:	4610      	mov	r0, r2
 80075c2:	f7fd ffaa 	bl	800551a <vListInsert>
 80075c6:	e012      	b.n	80075ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d206      	bcs.n	80075de <prvInsertTimerInActiveList+0x62>
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d302      	bcc.n	80075de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80075d8:	2301      	movs	r3, #1
 80075da:	617b      	str	r3, [r7, #20]
 80075dc:	e007      	b.n	80075ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075de:	4b07      	ldr	r3, [pc, #28]	; (80075fc <prvInsertTimerInActiveList+0x80>)
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	3304      	adds	r3, #4
 80075e6:	4619      	mov	r1, r3
 80075e8:	4610      	mov	r0, r2
 80075ea:	f7fd ff96 	bl	800551a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80075ee:	697b      	ldr	r3, [r7, #20]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	20000c80 	.word	0x20000c80
 80075fc:	20000c7c 	.word	0x20000c7c

08007600 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08e      	sub	sp, #56	; 0x38
 8007604:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007606:	e0ca      	b.n	800779e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	da18      	bge.n	8007640 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800760e:	1d3b      	adds	r3, r7, #4
 8007610:	3304      	adds	r3, #4
 8007612:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10a      	bne.n	8007630 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	61fb      	str	r3, [r7, #28]
}
 800762c:	bf00      	nop
 800762e:	e7fe      	b.n	800762e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007636:	6850      	ldr	r0, [r2, #4]
 8007638:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800763a:	6892      	ldr	r2, [r2, #8]
 800763c:	4611      	mov	r1, r2
 800763e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	f2c0 80aa 	blt.w	800779c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800764c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d004      	beq.n	800765e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007656:	3304      	adds	r3, #4
 8007658:	4618      	mov	r0, r3
 800765a:	f7fd ff97 	bl	800558c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800765e:	463b      	mov	r3, r7
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff ff6b 	bl	800753c <prvSampleTimeNow>
 8007666:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2b09      	cmp	r3, #9
 800766c:	f200 8097 	bhi.w	800779e <prvProcessReceivedCommands+0x19e>
 8007670:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <prvProcessReceivedCommands+0x78>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	080076a1 	.word	0x080076a1
 800767c:	080076a1 	.word	0x080076a1
 8007680:	080076a1 	.word	0x080076a1
 8007684:	08007715 	.word	0x08007715
 8007688:	08007729 	.word	0x08007729
 800768c:	08007773 	.word	0x08007773
 8007690:	080076a1 	.word	0x080076a1
 8007694:	080076a1 	.word	0x080076a1
 8007698:	08007715 	.word	0x08007715
 800769c:	08007729 	.word	0x08007729
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076a6:	f043 0301 	orr.w	r3, r3, #1
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	18d1      	adds	r1, r2, r3
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076c0:	f7ff ff5c 	bl	800757c <prvInsertTimerInActiveList>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d069      	beq.n	800779e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d05e      	beq.n	800779e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	441a      	add	r2, r3
 80076e8:	2300      	movs	r3, #0
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	2300      	movs	r3, #0
 80076ee:	2100      	movs	r1, #0
 80076f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f2:	f7ff fe05 	bl	8007300 <xTimerGenericCommand>
 80076f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d14f      	bne.n	800779e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	61bb      	str	r3, [r7, #24]
}
 8007710:	bf00      	nop
 8007712:	e7fe      	b.n	8007712 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007716:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800771a:	f023 0301 	bic.w	r3, r3, #1
 800771e:	b2da      	uxtb	r2, r3
 8007720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007722:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007726:	e03a      	b.n	800779e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800772a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800772e:	f043 0301 	orr.w	r3, r3, #1
 8007732:	b2da      	uxtb	r2, r3
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007742:	699b      	ldr	r3, [r3, #24]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d10a      	bne.n	800775e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	617b      	str	r3, [r7, #20]
}
 800775a:	bf00      	nop
 800775c:	e7fe      	b.n	800775c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800775e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007760:	699a      	ldr	r2, [r3, #24]
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	18d1      	adds	r1, r2, r3
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800776c:	f7ff ff06 	bl	800757c <prvInsertTimerInActiveList>
					break;
 8007770:	e015      	b.n	800779e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d103      	bne.n	8007788 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007782:	f000 fbd5 	bl	8007f30 <vPortFree>
 8007786:	e00a      	b.n	800779e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800778e:	f023 0301 	bic.w	r3, r3, #1
 8007792:	b2da      	uxtb	r2, r3
 8007794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007796:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800779a:	e000      	b.n	800779e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800779c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800779e:	4b08      	ldr	r3, [pc, #32]	; (80077c0 <prvProcessReceivedCommands+0x1c0>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	1d39      	adds	r1, r7, #4
 80077a4:	2200      	movs	r2, #0
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fe f9f4 	bl	8005b94 <xQueueReceive>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f47f af2a 	bne.w	8007608 <prvProcessReceivedCommands+0x8>
	}
}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop
 80077b8:	3730      	adds	r7, #48	; 0x30
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	20000c84 	.word	0x20000c84

080077c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077ca:	e048      	b.n	800785e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077cc:	4b2d      	ldr	r3, [pc, #180]	; (8007884 <prvSwitchTimerLists+0xc0>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077d6:	4b2b      	ldr	r3, [pc, #172]	; (8007884 <prvSwitchTimerLists+0xc0>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fd fed1 	bl	800558c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d02e      	beq.n	800785e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4413      	add	r3, r2
 8007808:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	429a      	cmp	r2, r3
 8007810:	d90e      	bls.n	8007830 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800781e:	4b19      	ldr	r3, [pc, #100]	; (8007884 <prvSwitchTimerLists+0xc0>)
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	3304      	adds	r3, #4
 8007826:	4619      	mov	r1, r3
 8007828:	4610      	mov	r0, r2
 800782a:	f7fd fe76 	bl	800551a <vListInsert>
 800782e:	e016      	b.n	800785e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007830:	2300      	movs	r3, #0
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	2300      	movs	r3, #0
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	2100      	movs	r1, #0
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f7ff fd60 	bl	8007300 <xTimerGenericCommand>
 8007840:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10a      	bne.n	800785e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	603b      	str	r3, [r7, #0]
}
 800785a:	bf00      	nop
 800785c:	e7fe      	b.n	800785c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800785e:	4b09      	ldr	r3, [pc, #36]	; (8007884 <prvSwitchTimerLists+0xc0>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1b1      	bne.n	80077cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007868:	4b06      	ldr	r3, [pc, #24]	; (8007884 <prvSwitchTimerLists+0xc0>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800786e:	4b06      	ldr	r3, [pc, #24]	; (8007888 <prvSwitchTimerLists+0xc4>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a04      	ldr	r2, [pc, #16]	; (8007884 <prvSwitchTimerLists+0xc0>)
 8007874:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007876:	4a04      	ldr	r2, [pc, #16]	; (8007888 <prvSwitchTimerLists+0xc4>)
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	6013      	str	r3, [r2, #0]
}
 800787c:	bf00      	nop
 800787e:	3718      	adds	r7, #24
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	20000c7c 	.word	0x20000c7c
 8007888:	20000c80 	.word	0x20000c80

0800788c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007892:	f000 f967 	bl	8007b64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007896:	4b15      	ldr	r3, [pc, #84]	; (80078ec <prvCheckForValidListAndQueue+0x60>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d120      	bne.n	80078e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800789e:	4814      	ldr	r0, [pc, #80]	; (80078f0 <prvCheckForValidListAndQueue+0x64>)
 80078a0:	f7fd fdea 	bl	8005478 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80078a4:	4813      	ldr	r0, [pc, #76]	; (80078f4 <prvCheckForValidListAndQueue+0x68>)
 80078a6:	f7fd fde7 	bl	8005478 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80078aa:	4b13      	ldr	r3, [pc, #76]	; (80078f8 <prvCheckForValidListAndQueue+0x6c>)
 80078ac:	4a10      	ldr	r2, [pc, #64]	; (80078f0 <prvCheckForValidListAndQueue+0x64>)
 80078ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80078b0:	4b12      	ldr	r3, [pc, #72]	; (80078fc <prvCheckForValidListAndQueue+0x70>)
 80078b2:	4a10      	ldr	r2, [pc, #64]	; (80078f4 <prvCheckForValidListAndQueue+0x68>)
 80078b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80078b6:	2300      	movs	r3, #0
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	4b11      	ldr	r3, [pc, #68]	; (8007900 <prvCheckForValidListAndQueue+0x74>)
 80078bc:	4a11      	ldr	r2, [pc, #68]	; (8007904 <prvCheckForValidListAndQueue+0x78>)
 80078be:	2110      	movs	r1, #16
 80078c0:	200a      	movs	r0, #10
 80078c2:	f7fd fef5 	bl	80056b0 <xQueueGenericCreateStatic>
 80078c6:	4603      	mov	r3, r0
 80078c8:	4a08      	ldr	r2, [pc, #32]	; (80078ec <prvCheckForValidListAndQueue+0x60>)
 80078ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80078cc:	4b07      	ldr	r3, [pc, #28]	; (80078ec <prvCheckForValidListAndQueue+0x60>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80078d4:	4b05      	ldr	r3, [pc, #20]	; (80078ec <prvCheckForValidListAndQueue+0x60>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	490b      	ldr	r1, [pc, #44]	; (8007908 <prvCheckForValidListAndQueue+0x7c>)
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fe fc6e 	bl	80061bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078e0:	f000 f970 	bl	8007bc4 <vPortExitCritical>
}
 80078e4:	bf00      	nop
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000c84 	.word	0x20000c84
 80078f0:	20000c54 	.word	0x20000c54
 80078f4:	20000c68 	.word	0x20000c68
 80078f8:	20000c7c 	.word	0x20000c7c
 80078fc:	20000c80 	.word	0x20000c80
 8007900:	20000d30 	.word	0x20000d30
 8007904:	20000c90 	.word	0x20000c90
 8007908:	0800a804 	.word	0x0800a804

0800790c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	3b04      	subs	r3, #4
 800791c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	3b04      	subs	r3, #4
 800792a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f023 0201 	bic.w	r2, r3, #1
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	3b04      	subs	r3, #4
 800793a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800793c:	4a0c      	ldr	r2, [pc, #48]	; (8007970 <pxPortInitialiseStack+0x64>)
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3b14      	subs	r3, #20
 8007946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3b04      	subs	r3, #4
 8007952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f06f 0202 	mvn.w	r2, #2
 800795a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3b20      	subs	r3, #32
 8007960:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007962:	68fb      	ldr	r3, [r7, #12]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	08007975 	.word	0x08007975

08007974 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800797a:	2300      	movs	r3, #0
 800797c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800797e:	4b12      	ldr	r3, [pc, #72]	; (80079c8 <prvTaskExitError+0x54>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007986:	d00a      	beq.n	800799e <prvTaskExitError+0x2a>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	60fb      	str	r3, [r7, #12]
}
 800799a:	bf00      	nop
 800799c:	e7fe      	b.n	800799c <prvTaskExitError+0x28>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	60bb      	str	r3, [r7, #8]
}
 80079b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079b2:	bf00      	nop
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0fc      	beq.n	80079b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079ba:	bf00      	nop
 80079bc:	bf00      	nop
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	2000000c 	.word	0x2000000c
 80079cc:	00000000 	.word	0x00000000

080079d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80079d0:	4b07      	ldr	r3, [pc, #28]	; (80079f0 <pxCurrentTCBConst2>)
 80079d2:	6819      	ldr	r1, [r3, #0]
 80079d4:	6808      	ldr	r0, [r1, #0]
 80079d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079da:	f380 8809 	msr	PSP, r0
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	f04f 0000 	mov.w	r0, #0
 80079e6:	f380 8811 	msr	BASEPRI, r0
 80079ea:	4770      	bx	lr
 80079ec:	f3af 8000 	nop.w

080079f0 <pxCurrentTCBConst2>:
 80079f0:	20000754 	.word	0x20000754
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079f4:	bf00      	nop
 80079f6:	bf00      	nop

080079f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079f8:	4808      	ldr	r0, [pc, #32]	; (8007a1c <prvPortStartFirstTask+0x24>)
 80079fa:	6800      	ldr	r0, [r0, #0]
 80079fc:	6800      	ldr	r0, [r0, #0]
 80079fe:	f380 8808 	msr	MSP, r0
 8007a02:	f04f 0000 	mov.w	r0, #0
 8007a06:	f380 8814 	msr	CONTROL, r0
 8007a0a:	b662      	cpsie	i
 8007a0c:	b661      	cpsie	f
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	df00      	svc	0
 8007a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a1a:	bf00      	nop
 8007a1c:	e000ed08 	.word	0xe000ed08

08007a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a26:	4b46      	ldr	r3, [pc, #280]	; (8007b40 <xPortStartScheduler+0x120>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a46      	ldr	r2, [pc, #280]	; (8007b44 <xPortStartScheduler+0x124>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d10a      	bne.n	8007a46 <xPortStartScheduler+0x26>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	613b      	str	r3, [r7, #16]
}
 8007a42:	bf00      	nop
 8007a44:	e7fe      	b.n	8007a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a46:	4b3e      	ldr	r3, [pc, #248]	; (8007b40 <xPortStartScheduler+0x120>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a3f      	ldr	r2, [pc, #252]	; (8007b48 <xPortStartScheduler+0x128>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d10a      	bne.n	8007a66 <xPortStartScheduler+0x46>
	__asm volatile
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	60fb      	str	r3, [r7, #12]
}
 8007a62:	bf00      	nop
 8007a64:	e7fe      	b.n	8007a64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a66:	4b39      	ldr	r3, [pc, #228]	; (8007b4c <xPortStartScheduler+0x12c>)
 8007a68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	22ff      	movs	r2, #255	; 0xff
 8007a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a80:	78fb      	ldrb	r3, [r7, #3]
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	4b31      	ldr	r3, [pc, #196]	; (8007b50 <xPortStartScheduler+0x130>)
 8007a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a8e:	4b31      	ldr	r3, [pc, #196]	; (8007b54 <xPortStartScheduler+0x134>)
 8007a90:	2207      	movs	r2, #7
 8007a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a94:	e009      	b.n	8007aaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a96:	4b2f      	ldr	r3, [pc, #188]	; (8007b54 <xPortStartScheduler+0x134>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	4a2d      	ldr	r2, [pc, #180]	; (8007b54 <xPortStartScheduler+0x134>)
 8007a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007aa0:	78fb      	ldrb	r3, [r7, #3]
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	005b      	lsls	r3, r3, #1
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007aaa:	78fb      	ldrb	r3, [r7, #3]
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ab2:	2b80      	cmp	r3, #128	; 0x80
 8007ab4:	d0ef      	beq.n	8007a96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ab6:	4b27      	ldr	r3, [pc, #156]	; (8007b54 <xPortStartScheduler+0x134>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f1c3 0307 	rsb	r3, r3, #7
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d00a      	beq.n	8007ad8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac6:	f383 8811 	msr	BASEPRI, r3
 8007aca:	f3bf 8f6f 	isb	sy
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	60bb      	str	r3, [r7, #8]
}
 8007ad4:	bf00      	nop
 8007ad6:	e7fe      	b.n	8007ad6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ad8:	4b1e      	ldr	r3, [pc, #120]	; (8007b54 <xPortStartScheduler+0x134>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	021b      	lsls	r3, r3, #8
 8007ade:	4a1d      	ldr	r2, [pc, #116]	; (8007b54 <xPortStartScheduler+0x134>)
 8007ae0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ae2:	4b1c      	ldr	r3, [pc, #112]	; (8007b54 <xPortStartScheduler+0x134>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007aea:	4a1a      	ldr	r2, [pc, #104]	; (8007b54 <xPortStartScheduler+0x134>)
 8007aec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	b2da      	uxtb	r2, r3
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007af6:	4b18      	ldr	r3, [pc, #96]	; (8007b58 <xPortStartScheduler+0x138>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a17      	ldr	r2, [pc, #92]	; (8007b58 <xPortStartScheduler+0x138>)
 8007afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b02:	4b15      	ldr	r3, [pc, #84]	; (8007b58 <xPortStartScheduler+0x138>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a14      	ldr	r2, [pc, #80]	; (8007b58 <xPortStartScheduler+0x138>)
 8007b08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b0e:	f000 f8dd 	bl	8007ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b12:	4b12      	ldr	r3, [pc, #72]	; (8007b5c <xPortStartScheduler+0x13c>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b18:	f000 f8fc 	bl	8007d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b1c:	4b10      	ldr	r3, [pc, #64]	; (8007b60 <xPortStartScheduler+0x140>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a0f      	ldr	r2, [pc, #60]	; (8007b60 <xPortStartScheduler+0x140>)
 8007b22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b28:	f7ff ff66 	bl	80079f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b2c:	f7fe ff56 	bl	80069dc <vTaskSwitchContext>
	prvTaskExitError();
 8007b30:	f7ff ff20 	bl	8007974 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3718      	adds	r7, #24
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	e000ed00 	.word	0xe000ed00
 8007b44:	410fc271 	.word	0x410fc271
 8007b48:	410fc270 	.word	0x410fc270
 8007b4c:	e000e400 	.word	0xe000e400
 8007b50:	20000d80 	.word	0x20000d80
 8007b54:	20000d84 	.word	0x20000d84
 8007b58:	e000ed20 	.word	0xe000ed20
 8007b5c:	2000000c 	.word	0x2000000c
 8007b60:	e000ef34 	.word	0xe000ef34

08007b64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
	__asm volatile
 8007b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6e:	f383 8811 	msr	BASEPRI, r3
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	f3bf 8f4f 	dsb	sy
 8007b7a:	607b      	str	r3, [r7, #4]
}
 8007b7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b7e:	4b0f      	ldr	r3, [pc, #60]	; (8007bbc <vPortEnterCritical+0x58>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	4a0d      	ldr	r2, [pc, #52]	; (8007bbc <vPortEnterCritical+0x58>)
 8007b86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b88:	4b0c      	ldr	r3, [pc, #48]	; (8007bbc <vPortEnterCritical+0x58>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d10f      	bne.n	8007bb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b90:	4b0b      	ldr	r3, [pc, #44]	; (8007bc0 <vPortEnterCritical+0x5c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	603b      	str	r3, [r7, #0]
}
 8007bac:	bf00      	nop
 8007bae:	e7fe      	b.n	8007bae <vPortEnterCritical+0x4a>
	}
}
 8007bb0:	bf00      	nop
 8007bb2:	370c      	adds	r7, #12
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr
 8007bbc:	2000000c 	.word	0x2000000c
 8007bc0:	e000ed04 	.word	0xe000ed04

08007bc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007bca:	4b12      	ldr	r3, [pc, #72]	; (8007c14 <vPortExitCritical+0x50>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10a      	bne.n	8007be8 <vPortExitCritical+0x24>
	__asm volatile
 8007bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd6:	f383 8811 	msr	BASEPRI, r3
 8007bda:	f3bf 8f6f 	isb	sy
 8007bde:	f3bf 8f4f 	dsb	sy
 8007be2:	607b      	str	r3, [r7, #4]
}
 8007be4:	bf00      	nop
 8007be6:	e7fe      	b.n	8007be6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007be8:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <vPortExitCritical+0x50>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3b01      	subs	r3, #1
 8007bee:	4a09      	ldr	r2, [pc, #36]	; (8007c14 <vPortExitCritical+0x50>)
 8007bf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bf2:	4b08      	ldr	r3, [pc, #32]	; (8007c14 <vPortExitCritical+0x50>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d105      	bne.n	8007c06 <vPortExitCritical+0x42>
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	f383 8811 	msr	BASEPRI, r3
}
 8007c04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c06:	bf00      	nop
 8007c08:	370c      	adds	r7, #12
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	2000000c 	.word	0x2000000c
	...

08007c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c20:	f3ef 8009 	mrs	r0, PSP
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	4b15      	ldr	r3, [pc, #84]	; (8007c80 <pxCurrentTCBConst>)
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	f01e 0f10 	tst.w	lr, #16
 8007c30:	bf08      	it	eq
 8007c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3a:	6010      	str	r0, [r2, #0]
 8007c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c44:	f380 8811 	msr	BASEPRI, r0
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f7fe fec4 	bl	80069dc <vTaskSwitchContext>
 8007c54:	f04f 0000 	mov.w	r0, #0
 8007c58:	f380 8811 	msr	BASEPRI, r0
 8007c5c:	bc09      	pop	{r0, r3}
 8007c5e:	6819      	ldr	r1, [r3, #0]
 8007c60:	6808      	ldr	r0, [r1, #0]
 8007c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c66:	f01e 0f10 	tst.w	lr, #16
 8007c6a:	bf08      	it	eq
 8007c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c70:	f380 8809 	msr	PSP, r0
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	f3af 8000 	nop.w

08007c80 <pxCurrentTCBConst>:
 8007c80:	20000754 	.word	0x20000754
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop

08007c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	607b      	str	r3, [r7, #4]
}
 8007ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ca2:	f7fe fde1 	bl	8006868 <xTaskIncrementTick>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d003      	beq.n	8007cb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cac:	4b06      	ldr	r3, [pc, #24]	; (8007cc8 <SysTick_Handler+0x40>)
 8007cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	f383 8811 	msr	BASEPRI, r3
}
 8007cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	e000ed04 	.word	0xe000ed04

08007ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ccc:	b480      	push	{r7}
 8007cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007cd0:	4b0b      	ldr	r3, [pc, #44]	; (8007d00 <vPortSetupTimerInterrupt+0x34>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007cd6:	4b0b      	ldr	r3, [pc, #44]	; (8007d04 <vPortSetupTimerInterrupt+0x38>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007cdc:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <vPortSetupTimerInterrupt+0x3c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a0a      	ldr	r2, [pc, #40]	; (8007d0c <vPortSetupTimerInterrupt+0x40>)
 8007ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce6:	099b      	lsrs	r3, r3, #6
 8007ce8:	4a09      	ldr	r2, [pc, #36]	; (8007d10 <vPortSetupTimerInterrupt+0x44>)
 8007cea:	3b01      	subs	r3, #1
 8007cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cee:	4b04      	ldr	r3, [pc, #16]	; (8007d00 <vPortSetupTimerInterrupt+0x34>)
 8007cf0:	2207      	movs	r2, #7
 8007cf2:	601a      	str	r2, [r3, #0]
}
 8007cf4:	bf00      	nop
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
 8007cfe:	bf00      	nop
 8007d00:	e000e010 	.word	0xe000e010
 8007d04:	e000e018 	.word	0xe000e018
 8007d08:	20000000 	.word	0x20000000
 8007d0c:	10624dd3 	.word	0x10624dd3
 8007d10:	e000e014 	.word	0xe000e014

08007d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d24 <vPortEnableVFP+0x10>
 8007d18:	6801      	ldr	r1, [r0, #0]
 8007d1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d1e:	6001      	str	r1, [r0, #0]
 8007d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d22:	bf00      	nop
 8007d24:	e000ed88 	.word	0xe000ed88

08007d28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d2e:	f3ef 8305 	mrs	r3, IPSR
 8007d32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b0f      	cmp	r3, #15
 8007d38:	d914      	bls.n	8007d64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d3a:	4a17      	ldr	r2, [pc, #92]	; (8007d98 <vPortValidateInterruptPriority+0x70>)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4413      	add	r3, r2
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d44:	4b15      	ldr	r3, [pc, #84]	; (8007d9c <vPortValidateInterruptPriority+0x74>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	7afa      	ldrb	r2, [r7, #11]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d20a      	bcs.n	8007d64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	f383 8811 	msr	BASEPRI, r3
 8007d56:	f3bf 8f6f 	isb	sy
 8007d5a:	f3bf 8f4f 	dsb	sy
 8007d5e:	607b      	str	r3, [r7, #4]
}
 8007d60:	bf00      	nop
 8007d62:	e7fe      	b.n	8007d62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d64:	4b0e      	ldr	r3, [pc, #56]	; (8007da0 <vPortValidateInterruptPriority+0x78>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d6c:	4b0d      	ldr	r3, [pc, #52]	; (8007da4 <vPortValidateInterruptPriority+0x7c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d90a      	bls.n	8007d8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	603b      	str	r3, [r7, #0]
}
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <vPortValidateInterruptPriority+0x60>
	}
 8007d8a:	bf00      	nop
 8007d8c:	3714      	adds	r7, #20
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	e000e3f0 	.word	0xe000e3f0
 8007d9c:	20000d80 	.word	0x20000d80
 8007da0:	e000ed0c 	.word	0xe000ed0c
 8007da4:	20000d84 	.word	0x20000d84

08007da8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08a      	sub	sp, #40	; 0x28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007db0:	2300      	movs	r3, #0
 8007db2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007db4:	f7fe fc9c 	bl	80066f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007db8:	4b58      	ldr	r3, [pc, #352]	; (8007f1c <pvPortMalloc+0x174>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007dc0:	f000 f910 	bl	8007fe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007dc4:	4b56      	ldr	r3, [pc, #344]	; (8007f20 <pvPortMalloc+0x178>)
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f040 808e 	bne.w	8007eee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d01d      	beq.n	8007e14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007dd8:	2208      	movs	r2, #8
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4413      	add	r3, r2
 8007dde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d014      	beq.n	8007e14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f023 0307 	bic.w	r3, r3, #7
 8007df0:	3308      	adds	r3, #8
 8007df2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <pvPortMalloc+0x6c>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	617b      	str	r3, [r7, #20]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d069      	beq.n	8007eee <pvPortMalloc+0x146>
 8007e1a:	4b42      	ldr	r3, [pc, #264]	; (8007f24 <pvPortMalloc+0x17c>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d864      	bhi.n	8007eee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e24:	4b40      	ldr	r3, [pc, #256]	; (8007f28 <pvPortMalloc+0x180>)
 8007e26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e28:	4b3f      	ldr	r3, [pc, #252]	; (8007f28 <pvPortMalloc+0x180>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e2e:	e004      	b.n	8007e3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d903      	bls.n	8007e4c <pvPortMalloc+0xa4>
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1f1      	bne.n	8007e30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e4c:	4b33      	ldr	r3, [pc, #204]	; (8007f1c <pvPortMalloc+0x174>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e52:	429a      	cmp	r2, r3
 8007e54:	d04b      	beq.n	8007eee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2208      	movs	r2, #8
 8007e5c:	4413      	add	r3, r2
 8007e5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	1ad2      	subs	r2, r2, r3
 8007e70:	2308      	movs	r3, #8
 8007e72:	005b      	lsls	r3, r3, #1
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d91f      	bls.n	8007eb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	f003 0307 	and.w	r3, r3, #7
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00a      	beq.n	8007ea0 <pvPortMalloc+0xf8>
	__asm volatile
 8007e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	613b      	str	r3, [r7, #16]
}
 8007e9c:	bf00      	nop
 8007e9e:	e7fe      	b.n	8007e9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	1ad2      	subs	r2, r2, r3
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007eb2:	69b8      	ldr	r0, [r7, #24]
 8007eb4:	f000 f8f8 	bl	80080a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007eb8:	4b1a      	ldr	r3, [pc, #104]	; (8007f24 <pvPortMalloc+0x17c>)
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	4a18      	ldr	r2, [pc, #96]	; (8007f24 <pvPortMalloc+0x17c>)
 8007ec4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007ec6:	4b17      	ldr	r3, [pc, #92]	; (8007f24 <pvPortMalloc+0x17c>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	4b18      	ldr	r3, [pc, #96]	; (8007f2c <pvPortMalloc+0x184>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d203      	bcs.n	8007eda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007ed2:	4b14      	ldr	r3, [pc, #80]	; (8007f24 <pvPortMalloc+0x17c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a15      	ldr	r2, [pc, #84]	; (8007f2c <pvPortMalloc+0x184>)
 8007ed8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	4b10      	ldr	r3, [pc, #64]	; (8007f20 <pvPortMalloc+0x178>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	2200      	movs	r2, #0
 8007eec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007eee:	f7fe fc0d 	bl	800670c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00a      	beq.n	8007f12 <pvPortMalloc+0x16a>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	60fb      	str	r3, [r7, #12]
}
 8007f0e:	bf00      	nop
 8007f10:	e7fe      	b.n	8007f10 <pvPortMalloc+0x168>
	return pvReturn;
 8007f12:	69fb      	ldr	r3, [r7, #28]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3728      	adds	r7, #40	; 0x28
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	20004990 	.word	0x20004990
 8007f20:	2000499c 	.word	0x2000499c
 8007f24:	20004994 	.word	0x20004994
 8007f28:	20004988 	.word	0x20004988
 8007f2c:	20004998 	.word	0x20004998

08007f30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d048      	beq.n	8007fd4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f42:	2308      	movs	r3, #8
 8007f44:	425b      	negs	r3, r3
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	4413      	add	r3, r2
 8007f4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	4b21      	ldr	r3, [pc, #132]	; (8007fdc <vPortFree+0xac>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4013      	ands	r3, r2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10a      	bne.n	8007f74 <vPortFree+0x44>
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	60fb      	str	r3, [r7, #12]
}
 8007f70:	bf00      	nop
 8007f72:	e7fe      	b.n	8007f72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00a      	beq.n	8007f92 <vPortFree+0x62>
	__asm volatile
 8007f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f80:	f383 8811 	msr	BASEPRI, r3
 8007f84:	f3bf 8f6f 	isb	sy
 8007f88:	f3bf 8f4f 	dsb	sy
 8007f8c:	60bb      	str	r3, [r7, #8]
}
 8007f8e:	bf00      	nop
 8007f90:	e7fe      	b.n	8007f90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	685a      	ldr	r2, [r3, #4]
 8007f96:	4b11      	ldr	r3, [pc, #68]	; (8007fdc <vPortFree+0xac>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d019      	beq.n	8007fd4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d115      	bne.n	8007fd4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	4b0b      	ldr	r3, [pc, #44]	; (8007fdc <vPortFree+0xac>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	43db      	mvns	r3, r3
 8007fb2:	401a      	ands	r2, r3
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007fb8:	f7fe fb9a 	bl	80066f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	4b07      	ldr	r3, [pc, #28]	; (8007fe0 <vPortFree+0xb0>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	4a06      	ldr	r2, [pc, #24]	; (8007fe0 <vPortFree+0xb0>)
 8007fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007fca:	6938      	ldr	r0, [r7, #16]
 8007fcc:	f000 f86c 	bl	80080a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007fd0:	f7fe fb9c 	bl	800670c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007fd4:	bf00      	nop
 8007fd6:	3718      	adds	r7, #24
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	2000499c 	.word	0x2000499c
 8007fe0:	20004994 	.word	0x20004994

08007fe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007fea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007fee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ff0:	4b27      	ldr	r3, [pc, #156]	; (8008090 <prvHeapInit+0xac>)
 8007ff2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f003 0307 	and.w	r3, r3, #7
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00c      	beq.n	8008018 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3307      	adds	r3, #7
 8008002:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f023 0307 	bic.w	r3, r3, #7
 800800a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	4a1f      	ldr	r2, [pc, #124]	; (8008090 <prvHeapInit+0xac>)
 8008014:	4413      	add	r3, r2
 8008016:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800801c:	4a1d      	ldr	r2, [pc, #116]	; (8008094 <prvHeapInit+0xb0>)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008022:	4b1c      	ldr	r3, [pc, #112]	; (8008094 <prvHeapInit+0xb0>)
 8008024:	2200      	movs	r2, #0
 8008026:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	4413      	add	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008030:	2208      	movs	r2, #8
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	1a9b      	subs	r3, r3, r2
 8008036:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f023 0307 	bic.w	r3, r3, #7
 800803e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4a15      	ldr	r2, [pc, #84]	; (8008098 <prvHeapInit+0xb4>)
 8008044:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008046:	4b14      	ldr	r3, [pc, #80]	; (8008098 <prvHeapInit+0xb4>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2200      	movs	r2, #0
 800804c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800804e:	4b12      	ldr	r3, [pc, #72]	; (8008098 <prvHeapInit+0xb4>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	1ad2      	subs	r2, r2, r3
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008064:	4b0c      	ldr	r3, [pc, #48]	; (8008098 <prvHeapInit+0xb4>)
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	4a0a      	ldr	r2, [pc, #40]	; (800809c <prvHeapInit+0xb8>)
 8008072:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	4a09      	ldr	r2, [pc, #36]	; (80080a0 <prvHeapInit+0xbc>)
 800807a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800807c:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <prvHeapInit+0xc0>)
 800807e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008082:	601a      	str	r2, [r3, #0]
}
 8008084:	bf00      	nop
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	20000d88 	.word	0x20000d88
 8008094:	20004988 	.word	0x20004988
 8008098:	20004990 	.word	0x20004990
 800809c:	20004998 	.word	0x20004998
 80080a0:	20004994 	.word	0x20004994
 80080a4:	2000499c 	.word	0x2000499c

080080a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80080b0:	4b28      	ldr	r3, [pc, #160]	; (8008154 <prvInsertBlockIntoFreeList+0xac>)
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	e002      	b.n	80080bc <prvInsertBlockIntoFreeList+0x14>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d8f7      	bhi.n	80080b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	4413      	add	r3, r2
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d108      	bne.n	80080ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	441a      	add	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	441a      	add	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d118      	bne.n	8008130 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	4b15      	ldr	r3, [pc, #84]	; (8008158 <prvInsertBlockIntoFreeList+0xb0>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	429a      	cmp	r2, r3
 8008108:	d00d      	beq.n	8008126 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685a      	ldr	r2, [r3, #4]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	441a      	add	r2, r3
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	601a      	str	r2, [r3, #0]
 8008124:	e008      	b.n	8008138 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008126:	4b0c      	ldr	r3, [pc, #48]	; (8008158 <prvInsertBlockIntoFreeList+0xb0>)
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	e003      	b.n	8008138 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	429a      	cmp	r2, r3
 800813e:	d002      	beq.n	8008146 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008146:	bf00      	nop
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	20004988 	.word	0x20004988
 8008158:	20004990 	.word	0x20004990
 800815c:	00000000 	.word	0x00000000

08008160 <readAnalogVal1>:
	  Vadc2=Vdda*analogValue2/4095;

	  filter2=0;
	  HAL_ADC_Stop (adc2);
}
void readAnalogVal1(ADC_HandleTypeDef *adc1){
 8008160:	b5b0      	push	{r4, r5, r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
	static uint32_t filter1=0;
	  HAL_ADC_Start(adc1);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7f9 fd11 	bl	8001b90 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(adc1, ADCTIMEOUT);
 800816e:	2196      	movs	r1, #150	; 0x96
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7f9 fe06 	bl	8001d82 <HAL_ADC_PollForConversion>
	  vref= HAL_ADC_GetValue(adc1);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7f9 fe87 	bl	8001e8a <HAL_ADC_GetValue>
 800817c:	4603      	mov	r3, r0
 800817e:	b29a      	uxth	r2, r3
 8008180:	4b2f      	ldr	r3, [pc, #188]	; (8008240 <readAnalogVal1+0xe0>)
 8008182:	801a      	strh	r2, [r3, #0]
	  Vdda=(float)(3.3*(*VREF_CAL)/vref);
 8008184:	4b2f      	ldr	r3, [pc, #188]	; (8008244 <readAnalogVal1+0xe4>)
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	4618      	mov	r0, r3
 800818a:	f7f8 f9cb 	bl	8000524 <__aeabi_i2d>
 800818e:	a32a      	add	r3, pc, #168	; (adr r3, 8008238 <readAnalogVal1+0xd8>)
 8008190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008194:	f7f8 fa30 	bl	80005f8 <__aeabi_dmul>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	4614      	mov	r4, r2
 800819e:	461d      	mov	r5, r3
 80081a0:	4b27      	ldr	r3, [pc, #156]	; (8008240 <readAnalogVal1+0xe0>)
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7f8 f9bd 	bl	8000524 <__aeabi_i2d>
 80081aa:	4602      	mov	r2, r0
 80081ac:	460b      	mov	r3, r1
 80081ae:	4620      	mov	r0, r4
 80081b0:	4629      	mov	r1, r5
 80081b2:	f7f8 fb4b 	bl	800084c <__aeabi_ddiv>
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	4610      	mov	r0, r2
 80081bc:	4619      	mov	r1, r3
 80081be:	f7f8 fc2d 	bl	8000a1c <__aeabi_d2f>
 80081c2:	4603      	mov	r3, r0
 80081c4:	4a20      	ldr	r2, [pc, #128]	; (8008248 <readAnalogVal1+0xe8>)
 80081c6:	6013      	str	r3, [r2, #0]
	  HAL_ADC_PollForConversion(adc1, ADCTIMEOUT);
 80081c8:	2196      	movs	r1, #150	; 0x96
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7f9 fdd9 	bl	8001d82 <HAL_ADC_PollForConversion>
	  for(int c=0;c<256;c++){
 80081d0:	2300      	movs	r3, #0
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	e00b      	b.n	80081ee <readAnalogVal1+0x8e>
		  filter1+=HAL_ADC_GetValue(adc1);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f7f9 fe57 	bl	8001e8a <HAL_ADC_GetValue>
 80081dc:	4602      	mov	r2, r0
 80081de:	4b1b      	ldr	r3, [pc, #108]	; (800824c <readAnalogVal1+0xec>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4413      	add	r3, r2
 80081e4:	4a19      	ldr	r2, [pc, #100]	; (800824c <readAnalogVal1+0xec>)
 80081e6:	6013      	str	r3, [r2, #0]
	  for(int c=0;c<256;c++){
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3301      	adds	r3, #1
 80081ec:	60fb      	str	r3, [r7, #12]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2bff      	cmp	r3, #255	; 0xff
 80081f2:	ddf0      	ble.n	80081d6 <readAnalogVal1+0x76>
	  }
	  analogValue1=(uint16_t)(filter1>>8);
 80081f4:	4b15      	ldr	r3, [pc, #84]	; (800824c <readAnalogVal1+0xec>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	0a1b      	lsrs	r3, r3, #8
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	4b14      	ldr	r3, [pc, #80]	; (8008250 <readAnalogVal1+0xf0>)
 80081fe:	801a      	strh	r2, [r3, #0]
	  Vadc1=Vdda*analogValue1/4095;
 8008200:	4b13      	ldr	r3, [pc, #76]	; (8008250 <readAnalogVal1+0xf0>)
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	ee07 3a90 	vmov	s15, r3
 8008208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800820c:	4b0e      	ldr	r3, [pc, #56]	; (8008248 <readAnalogVal1+0xe8>)
 800820e:	edd3 7a00 	vldr	s15, [r3]
 8008212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008216:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8008254 <readAnalogVal1+0xf4>
 800821a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800821e:	4b0e      	ldr	r3, [pc, #56]	; (8008258 <readAnalogVal1+0xf8>)
 8008220:	edc3 7a00 	vstr	s15, [r3]
	  filter1=0;
 8008224:	4b09      	ldr	r3, [pc, #36]	; (800824c <readAnalogVal1+0xec>)
 8008226:	2200      	movs	r2, #0
 8008228:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop (adc1);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7f9 fd76 	bl	8001d1c <HAL_ADC_Stop>
}
 8008230:	bf00      	nop
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bdb0      	pop	{r4, r5, r7, pc}
 8008238:	66666666 	.word	0x66666666
 800823c:	400a6666 	.word	0x400a6666
 8008240:	20004cdc 	.word	0x20004cdc
 8008244:	1fff7a2a 	.word	0x1fff7a2a
 8008248:	20004cd8 	.word	0x20004cd8
 800824c:	200049a0 	.word	0x200049a0
 8008250:	20004cde 	.word	0x20004cde
 8008254:	457ff000 	.word	0x457ff000
 8008258:	20004cd0 	.word	0x20004cd0

0800825c <readAnalogVal2>:
void readAnalogVal2(ADC_HandleTypeDef *adc2){
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
	static uint32_t filter2=0;
	HAL_ADC_PollForConversion(adc2, ADCTIMEOUT);
 8008264:	2196      	movs	r1, #150	; 0x96
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f7f9 fd8b 	bl	8001d82 <HAL_ADC_PollForConversion>
	  HAL_ADC_Start(adc2);
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7f9 fc8f 	bl	8001b90 <HAL_ADC_Start>
	  for(int c=0;c<256;c++){
 8008272:	2300      	movs	r3, #0
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	e00b      	b.n	8008290 <readAnalogVal2+0x34>
		  filter2+=HAL_ADC_GetValue(adc2);
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7f9 fe06 	bl	8001e8a <HAL_ADC_GetValue>
 800827e:	4602      	mov	r2, r0
 8008280:	4b16      	ldr	r3, [pc, #88]	; (80082dc <readAnalogVal2+0x80>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4413      	add	r3, r2
 8008286:	4a15      	ldr	r2, [pc, #84]	; (80082dc <readAnalogVal2+0x80>)
 8008288:	6013      	str	r3, [r2, #0]
	  for(int c=0;c<256;c++){
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	3301      	adds	r3, #1
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2bff      	cmp	r3, #255	; 0xff
 8008294:	ddf0      	ble.n	8008278 <readAnalogVal2+0x1c>
	  }
	  analogValue2=(uint16_t)(filter2>>8);
 8008296:	4b11      	ldr	r3, [pc, #68]	; (80082dc <readAnalogVal2+0x80>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	0a1b      	lsrs	r3, r3, #8
 800829c:	b29a      	uxth	r2, r3
 800829e:	4b10      	ldr	r3, [pc, #64]	; (80082e0 <readAnalogVal2+0x84>)
 80082a0:	801a      	strh	r2, [r3, #0]
	  Vadc2=Vdda*analogValue2/4095;
 80082a2:	4b0f      	ldr	r3, [pc, #60]	; (80082e0 <readAnalogVal2+0x84>)
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80082ae:	4b0d      	ldr	r3, [pc, #52]	; (80082e4 <readAnalogVal2+0x88>)
 80082b0:	edd3 7a00 	vldr	s15, [r3]
 80082b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80082b8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80082e8 <readAnalogVal2+0x8c>
 80082bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80082c0:	4b0a      	ldr	r3, [pc, #40]	; (80082ec <readAnalogVal2+0x90>)
 80082c2:	edc3 7a00 	vstr	s15, [r3]

	  filter2=0;
 80082c6:	4b05      	ldr	r3, [pc, #20]	; (80082dc <readAnalogVal2+0x80>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop (adc2);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7f9 fd25 	bl	8001d1c <HAL_ADC_Stop>
}
 80082d2:	bf00      	nop
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	200049a4 	.word	0x200049a4
 80082e0:	20004cd4 	.word	0x20004cd4
 80082e4:	20004cd8 	.word	0x20004cd8
 80082e8:	457ff000 	.word	0x457ff000
 80082ec:	20004ccc 	.word	0x20004ccc

080082f0 <getVdda>:
uint16_t getAnalogValue1(void){return analogValue1;}
uint16_t getAnalogValue2(void){return analogValue2;}
float getVdda(void){return Vdda;}
 80082f0:	b480      	push	{r7}
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	4b04      	ldr	r3, [pc, #16]	; (8008308 <getVdda+0x18>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	ee07 3a90 	vmov	s15, r3
 80082fc:	eeb0 0a67 	vmov.f32	s0, s15
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	20004cd8 	.word	0x20004cd8

0800830c <getADC1>:
float getADC1(void){return Vadc1;}
 800830c:	b480      	push	{r7}
 800830e:	af00      	add	r7, sp, #0
 8008310:	4b04      	ldr	r3, [pc, #16]	; (8008324 <getADC1+0x18>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	ee07 3a90 	vmov	s15, r3
 8008318:	eeb0 0a67 	vmov.f32	s0, s15
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	20004cd0 	.word	0x20004cd0

08008328 <getADC2>:
float getADC2(void){return Vadc2;}
 8008328:	b480      	push	{r7}
 800832a:	af00      	add	r7, sp, #0
 800832c:	4b04      	ldr	r3, [pc, #16]	; (8008340 <getADC2+0x18>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	ee07 3a90 	vmov	s15, r3
 8008334:	eeb0 0a67 	vmov.f32	s0, s15
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	20004ccc 	.word	0x20004ccc

08008344 <valuesMapWFloat>:
}

int16_t valuesMapInt(int16_t inValue, int16_t inMin, int16_t inMax, int16_t outMin, int16_t outMax) {
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
}
uint16_t valuesMapWFloat(float inValue, float inMin, float inMax, uint16_t outMin, uint16_t outMax) {
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	ed87 0a03 	vstr	s0, [r7, #12]
 800834e:	edc7 0a02 	vstr	s1, [r7, #8]
 8008352:	ed87 1a01 	vstr	s2, [r7, #4]
 8008356:	4603      	mov	r3, r0
 8008358:	460a      	mov	r2, r1
 800835a:	807b      	strh	r3, [r7, #2]
 800835c:	4613      	mov	r3, r2
 800835e:	803b      	strh	r3, [r7, #0]
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
 8008360:	ed97 7a03 	vldr	s14, [r7, #12]
 8008364:	edd7 7a02 	vldr	s15, [r7, #8]
 8008368:	ee37 7a67 	vsub.f32	s14, s14, s15
 800836c:	883a      	ldrh	r2, [r7, #0]
 800836e:	887b      	ldrh	r3, [r7, #2]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800837a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800837e:	ed97 7a01 	vldr	s14, [r7, #4]
 8008382:	edd7 7a02 	vldr	s15, [r7, #8]
 8008386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800838a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800838e:	887b      	ldrh	r3, [r7, #2]
 8008390:	ee07 3a90 	vmov	s15, r3
 8008394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800839c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083a0:	ee17 3a90 	vmov	r3, s15
 80083a4:	b29b      	uxth	r3, r3
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3714      	adds	r7, #20
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <valuesMapFloat>:
int16_t valuesMapFloat(float inValue, float inMin, float inMax, int16_t outMin, int16_t outMax) {
 80083b2:	b480      	push	{r7}
 80083b4:	b085      	sub	sp, #20
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	ed87 0a03 	vstr	s0, [r7, #12]
 80083bc:	edc7 0a02 	vstr	s1, [r7, #8]
 80083c0:	ed87 1a01 	vstr	s2, [r7, #4]
 80083c4:	4603      	mov	r3, r0
 80083c6:	460a      	mov	r2, r1
 80083c8:	807b      	strh	r3, [r7, #2]
 80083ca:	4613      	mov	r3, r2
 80083cc:	803b      	strh	r3, [r7, #0]
	return (inValue - inMin)*(outMax - outMin) / (inMax - inMin) + outMin;
 80083ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80083d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80083d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80083da:	f9b7 2000 	ldrsh.w	r2, [r7]
 80083de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	ee07 3a90 	vmov	s15, r3
 80083e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083ec:	ee67 6a27 	vmul.f32	s13, s14, s15
 80083f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80083f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80083f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80083fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008400:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008404:	ee07 3a90 	vmov	s15, r3
 8008408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800840c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008414:	ee17 3a90 	vmov	r3, s15
 8008418:	b21b      	sxth	r3, r3
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
	...

08008428 <buttonCounterIncrease>:
uint8_t selectedLcd=0,selectedLcdItem=0;
/* @brief count pressed button use in tim interrupt
 * @param none
 * @return none
 * */
void buttonCounterIncrease(void){
 8008428:	b580      	push	{r7, lr}
 800842a:	af00      	add	r7, sp, #0
	if(!READ_SELECT_BTN)selectbtncounter++;
 800842c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008430:	4814      	ldr	r0, [pc, #80]	; (8008484 <buttonCounterIncrease+0x5c>)
 8008432:	f7fa f9f5 	bl	8002820 <HAL_GPIO_ReadPin>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d106      	bne.n	800844a <buttonCounterIncrease+0x22>
 800843c:	4b12      	ldr	r3, [pc, #72]	; (8008488 <buttonCounterIncrease+0x60>)
 800843e:	881b      	ldrh	r3, [r3, #0]
 8008440:	3301      	adds	r3, #1
 8008442:	b29a      	uxth	r2, r3
 8008444:	4b10      	ldr	r3, [pc, #64]	; (8008488 <buttonCounterIncrease+0x60>)
 8008446:	801a      	strh	r2, [r3, #0]
	else if(!READ_PLUS_BTN)plusbtncounter++;
	else if(!READ_MINUS_BTN)minusbtncounter++;
}
 8008448:	e01a      	b.n	8008480 <buttonCounterIncrease+0x58>
	else if(!READ_PLUS_BTN)plusbtncounter++;
 800844a:	2102      	movs	r1, #2
 800844c:	480f      	ldr	r0, [pc, #60]	; (800848c <buttonCounterIncrease+0x64>)
 800844e:	f7fa f9e7 	bl	8002820 <HAL_GPIO_ReadPin>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d106      	bne.n	8008466 <buttonCounterIncrease+0x3e>
 8008458:	4b0d      	ldr	r3, [pc, #52]	; (8008490 <buttonCounterIncrease+0x68>)
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	3301      	adds	r3, #1
 800845e:	b29a      	uxth	r2, r3
 8008460:	4b0b      	ldr	r3, [pc, #44]	; (8008490 <buttonCounterIncrease+0x68>)
 8008462:	801a      	strh	r2, [r3, #0]
}
 8008464:	e00c      	b.n	8008480 <buttonCounterIncrease+0x58>
	else if(!READ_MINUS_BTN)minusbtncounter++;
 8008466:	2101      	movs	r1, #1
 8008468:	4808      	ldr	r0, [pc, #32]	; (800848c <buttonCounterIncrease+0x64>)
 800846a:	f7fa f9d9 	bl	8002820 <HAL_GPIO_ReadPin>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d105      	bne.n	8008480 <buttonCounterIncrease+0x58>
 8008474:	4b07      	ldr	r3, [pc, #28]	; (8008494 <buttonCounterIncrease+0x6c>)
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	3301      	adds	r3, #1
 800847a:	b29a      	uxth	r2, r3
 800847c:	4b05      	ldr	r3, [pc, #20]	; (8008494 <buttonCounterIncrease+0x6c>)
 800847e:	801a      	strh	r2, [r3, #0]
}
 8008480:	bf00      	nop
 8008482:	bd80      	pop	{r7, pc}
 8008484:	40020400 	.word	0x40020400
 8008488:	200049a8 	.word	0x200049a8
 800848c:	40021000 	.word	0x40021000
 8008490:	200049aa 	.word	0x200049aa
 8008494:	200049ac 	.word	0x200049ac

08008498 <selectButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t selectButton_Listenner_For_MenuControl(void) {
 8008498:	b580      	push	{r7, lr}
 800849a:	af00      	add	r7, sp, #0
	if(READ_SELECT_BTN){
 800849c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084a0:	480f      	ldr	r0, [pc, #60]	; (80084e0 <selectButton_Listenner_For_MenuControl+0x48>)
 80084a2:	f7fa f9bd 	bl	8002820 <HAL_GPIO_ReadPin>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d015      	beq.n	80084d8 <selectButton_Listenner_For_MenuControl+0x40>
		if(selectbtncounter>=BTN_LONG_PRESS_TIME){ selectbtncounter=0;return 2;}
 80084ac:	4b0d      	ldr	r3, [pc, #52]	; (80084e4 <selectButton_Listenner_For_MenuControl+0x4c>)
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80084b4:	d304      	bcc.n	80084c0 <selectButton_Listenner_For_MenuControl+0x28>
 80084b6:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <selectButton_Listenner_For_MenuControl+0x4c>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	801a      	strh	r2, [r3, #0]
 80084bc:	2302      	movs	r3, #2
 80084be:	e00c      	b.n	80084da <selectButton_Listenner_For_MenuControl+0x42>
		if(selectbtncounter>=BTN_SHORT_PRESS_TIME){ selectbtncounter=0;return 1;}
 80084c0:	4b08      	ldr	r3, [pc, #32]	; (80084e4 <selectButton_Listenner_For_MenuControl+0x4c>)
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	2b09      	cmp	r3, #9
 80084c6:	d904      	bls.n	80084d2 <selectButton_Listenner_For_MenuControl+0x3a>
 80084c8:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <selectButton_Listenner_For_MenuControl+0x4c>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	801a      	strh	r2, [r3, #0]
 80084ce:	2301      	movs	r3, #1
 80084d0:	e003      	b.n	80084da <selectButton_Listenner_For_MenuControl+0x42>
		selectbtncounter=0;
 80084d2:	4b04      	ldr	r3, [pc, #16]	; (80084e4 <selectButton_Listenner_For_MenuControl+0x4c>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	40020400 	.word	0x40020400
 80084e4:	200049a8 	.word	0x200049a8

080084e8 <plusButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t plusButton_Listenner_For_MenuControl(void) {
 80084e8:	b580      	push	{r7, lr}
 80084ea:	af00      	add	r7, sp, #0

	if(READ_PLUS_BTN){
 80084ec:	2102      	movs	r1, #2
 80084ee:	480f      	ldr	r0, [pc, #60]	; (800852c <plusButton_Listenner_For_MenuControl+0x44>)
 80084f0:	f7fa f996 	bl	8002820 <HAL_GPIO_ReadPin>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d015      	beq.n	8008526 <plusButton_Listenner_For_MenuControl+0x3e>
		if(plusbtncounter>=BTN_LONG_PRESS_TIME){ plusbtncounter=0;return 2;}
 80084fa:	4b0d      	ldr	r3, [pc, #52]	; (8008530 <plusButton_Listenner_For_MenuControl+0x48>)
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008502:	d304      	bcc.n	800850e <plusButton_Listenner_For_MenuControl+0x26>
 8008504:	4b0a      	ldr	r3, [pc, #40]	; (8008530 <plusButton_Listenner_For_MenuControl+0x48>)
 8008506:	2200      	movs	r2, #0
 8008508:	801a      	strh	r2, [r3, #0]
 800850a:	2302      	movs	r3, #2
 800850c:	e00c      	b.n	8008528 <plusButton_Listenner_For_MenuControl+0x40>
		if(plusbtncounter>=BTN_SHORT_PRESS_TIME){ plusbtncounter=0;return 1;}
 800850e:	4b08      	ldr	r3, [pc, #32]	; (8008530 <plusButton_Listenner_For_MenuControl+0x48>)
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	2b09      	cmp	r3, #9
 8008514:	d904      	bls.n	8008520 <plusButton_Listenner_For_MenuControl+0x38>
 8008516:	4b06      	ldr	r3, [pc, #24]	; (8008530 <plusButton_Listenner_For_MenuControl+0x48>)
 8008518:	2200      	movs	r2, #0
 800851a:	801a      	strh	r2, [r3, #0]
 800851c:	2301      	movs	r3, #1
 800851e:	e003      	b.n	8008528 <plusButton_Listenner_For_MenuControl+0x40>
		plusbtncounter=0;
 8008520:	4b03      	ldr	r3, [pc, #12]	; (8008530 <plusButton_Listenner_For_MenuControl+0x48>)
 8008522:	2200      	movs	r2, #0
 8008524:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	bd80      	pop	{r7, pc}
 800852c:	40021000 	.word	0x40021000
 8008530:	200049aa 	.word	0x200049aa

08008534 <minusButton_Listenner_For_MenuControl>:
 * @param none
 * @return 0 -> didnt press
 * @return 1 -> short pressed
 * @return 2 -> long pressed
 * */
uint8_t minusButton_Listenner_For_MenuControl(void) {
 8008534:	b580      	push	{r7, lr}
 8008536:	af00      	add	r7, sp, #0
	if(READ_MINUS_BTN){
 8008538:	2101      	movs	r1, #1
 800853a:	480f      	ldr	r0, [pc, #60]	; (8008578 <minusButton_Listenner_For_MenuControl+0x44>)
 800853c:	f7fa f970 	bl	8002820 <HAL_GPIO_ReadPin>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d015      	beq.n	8008572 <minusButton_Listenner_For_MenuControl+0x3e>
		if(minusbtncounter>=BTN_LONG_PRESS_TIME){ minusbtncounter=0;return 2;}
 8008546:	4b0d      	ldr	r3, [pc, #52]	; (800857c <minusButton_Listenner_For_MenuControl+0x48>)
 8008548:	881b      	ldrh	r3, [r3, #0]
 800854a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800854e:	d304      	bcc.n	800855a <minusButton_Listenner_For_MenuControl+0x26>
 8008550:	4b0a      	ldr	r3, [pc, #40]	; (800857c <minusButton_Listenner_For_MenuControl+0x48>)
 8008552:	2200      	movs	r2, #0
 8008554:	801a      	strh	r2, [r3, #0]
 8008556:	2302      	movs	r3, #2
 8008558:	e00c      	b.n	8008574 <minusButton_Listenner_For_MenuControl+0x40>
		if(minusbtncounter>=BTN_SHORT_PRESS_TIME){ minusbtncounter=0;return 1;}
 800855a:	4b08      	ldr	r3, [pc, #32]	; (800857c <minusButton_Listenner_For_MenuControl+0x48>)
 800855c:	881b      	ldrh	r3, [r3, #0]
 800855e:	2b09      	cmp	r3, #9
 8008560:	d904      	bls.n	800856c <minusButton_Listenner_For_MenuControl+0x38>
 8008562:	4b06      	ldr	r3, [pc, #24]	; (800857c <minusButton_Listenner_For_MenuControl+0x48>)
 8008564:	2200      	movs	r2, #0
 8008566:	801a      	strh	r2, [r3, #0]
 8008568:	2301      	movs	r3, #1
 800856a:	e003      	b.n	8008574 <minusButton_Listenner_For_MenuControl+0x40>
		minusbtncounter=0;
 800856c:	4b03      	ldr	r3, [pc, #12]	; (800857c <minusButton_Listenner_For_MenuControl+0x48>)
 800856e:	2200      	movs	r2, #0
 8008570:	801a      	strh	r2, [r3, #0]
	}
	return 0;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	bd80      	pop	{r7, pc}
 8008578:	40021000 	.word	0x40021000
 800857c:	200049ac 	.word	0x200049ac

08008580 <btnParameterInit>:
/* @brief drivers parameter values initalize
 * @param none
 * @return none
 * */
void btnParameterInit(void){
 8008580:	b580      	push	{r7, lr}
 8008582:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&BTNCOUNTER);
 8008584:	4812      	ldr	r0, [pc, #72]	; (80085d0 <btnParameterInit+0x50>)
 8008586:	f7fb fba6 	bl	8003cd6 <HAL_TIM_Base_Start_IT>
	drv1.angle=0;
 800858a:	4b12      	ldr	r3, [pc, #72]	; (80085d4 <btnParameterInit+0x54>)
 800858c:	2200      	movs	r2, #0
 800858e:	809a      	strh	r2, [r3, #4]
	drv1.pid_kp=100;
 8008590:	4b10      	ldr	r3, [pc, #64]	; (80085d4 <btnParameterInit+0x54>)
 8008592:	2264      	movs	r2, #100	; 0x64
 8008594:	709a      	strb	r2, [r3, #2]
	drv1.pid_ki=1;
 8008596:	4b0f      	ldr	r3, [pc, #60]	; (80085d4 <btnParameterInit+0x54>)
 8008598:	2201      	movs	r2, #1
 800859a:	705a      	strb	r2, [r3, #1]
	drv1.pid_kd=200;
 800859c:	4b0d      	ldr	r3, [pc, #52]	; (80085d4 <btnParameterInit+0x54>)
 800859e:	22c8      	movs	r2, #200	; 0xc8
 80085a0:	701a      	strb	r2, [r3, #0]
	drv1.factor=100;
 80085a2:	4b0c      	ldr	r3, [pc, #48]	; (80085d4 <btnParameterInit+0x54>)
 80085a4:	2264      	movs	r2, #100	; 0x64
 80085a6:	70da      	strb	r2, [r3, #3]

	drv2.speed =0;
 80085a8:	4b0b      	ldr	r3, [pc, #44]	; (80085d8 <btnParameterInit+0x58>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	809a      	strh	r2, [r3, #4]
	drv2.pid_kp=70;
 80085ae:	4b0a      	ldr	r3, [pc, #40]	; (80085d8 <btnParameterInit+0x58>)
 80085b0:	2246      	movs	r2, #70	; 0x46
 80085b2:	701a      	strb	r2, [r3, #0]
	drv2.pid_ki=1;
 80085b4:	4b08      	ldr	r3, [pc, #32]	; (80085d8 <btnParameterInit+0x58>)
 80085b6:	2201      	movs	r2, #1
 80085b8:	705a      	strb	r2, [r3, #1]
	drv2.pid_kd=1;
 80085ba:	4b07      	ldr	r3, [pc, #28]	; (80085d8 <btnParameterInit+0x58>)
 80085bc:	2201      	movs	r2, #1
 80085be:	709a      	strb	r2, [r3, #2]
	drv2.soft_k =1;
 80085c0:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <btnParameterInit+0x58>)
 80085c2:	2201      	movs	r2, #1
 80085c4:	71da      	strb	r2, [r3, #7]
	drv2.soft_f =1;
 80085c6:	4b04      	ldr	r3, [pc, #16]	; (80085d8 <btnParameterInit+0x58>)
 80085c8:	2201      	movs	r2, #1
 80085ca:	719a      	strb	r2, [r3, #6]

}
 80085cc:	bf00      	nop
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	20004c08 	.word	0x20004c08
 80085d4:	20004ce0 	.word	0x20004ce0
 80085d8:	20004ce8 	.word	0x20004ce8

080085dc <setDriver1AngleValue>:
/* @brief set the angle to motor driver 1 interface
 * @param angle -> driver angle value
 * @return none
 * */
void setDriver1AngleValue(uint16_t angle){
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	80fb      	strh	r3, [r7, #6]
	drv1.angle=angle;
 80085e6:	4a04      	ldr	r2, [pc, #16]	; (80085f8 <setDriver1AngleValue+0x1c>)
 80085e8:	88fb      	ldrh	r3, [r7, #6]
 80085ea:	8093      	strh	r3, [r2, #4]
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	20004ce0 	.word	0x20004ce0

080085fc <setDriver2AngleValue>:
/* @brief set the angle to motor driver 2 interface
 * @param angle -> driver angle value
 * @return none
 * */
void setDriver2AngleValue(int16_t angle){
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	80fb      	strh	r3, [r7, #6]
	drv2.speed=angle;
 8008606:	4a04      	ldr	r2, [pc, #16]	; (8008618 <setDriver2AngleValue+0x1c>)
 8008608:	88fb      	ldrh	r3, [r7, #6]
 800860a:	8093      	strh	r3, [r2, #4]
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr
 8008618:	20004ce8 	.word	0x20004ce8

0800861c <buttonController>:
/* @brief controlling and sending values of drivers
 * @param none
 * @return none
 * */
void buttonController(void){
 800861c:	b580      	push	{r7, lr}
 800861e:	af00      	add	r7, sp, #0
	static bool selectedMDI=true; //selected motor driver interface
	static uint8_t selectBtnListenner=0,plusBtnListenner=0,minusBtnListenner=0;
	static item=0;
	if(selectedMDI){
 8008620:	4b9d      	ldr	r3, [pc, #628]	; (8008898 <buttonController+0x27c>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 80bf 	beq.w	80087a8 <buttonController+0x18c>
		if(2==selectBtnListenner){ selectedMDI=false; selectedLcd=1; item=0;}
 800862a:	4b9c      	ldr	r3, [pc, #624]	; (800889c <buttonController+0x280>)
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	2b02      	cmp	r3, #2
 8008630:	d108      	bne.n	8008644 <buttonController+0x28>
 8008632:	4b99      	ldr	r3, [pc, #612]	; (8008898 <buttonController+0x27c>)
 8008634:	2200      	movs	r2, #0
 8008636:	701a      	strb	r2, [r3, #0]
 8008638:	4b99      	ldr	r3, [pc, #612]	; (80088a0 <buttonController+0x284>)
 800863a:	2201      	movs	r2, #1
 800863c:	701a      	strb	r2, [r3, #0]
 800863e:	4b99      	ldr	r3, [pc, #612]	; (80088a4 <buttonController+0x288>)
 8008640:	2200      	movs	r2, #0
 8008642:	601a      	str	r2, [r3, #0]
		if(1==selectBtnListenner){
 8008644:	4b95      	ldr	r3, [pc, #596]	; (800889c <buttonController+0x280>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d110      	bne.n	800866e <buttonController+0x52>
			if(item<ITEM_MAX)item++;
 800864c:	4b95      	ldr	r3, [pc, #596]	; (80088a4 <buttonController+0x288>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b02      	cmp	r3, #2
 8008652:	dc05      	bgt.n	8008660 <buttonController+0x44>
 8008654:	4b93      	ldr	r3, [pc, #588]	; (80088a4 <buttonController+0x288>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3301      	adds	r3, #1
 800865a:	4a92      	ldr	r2, [pc, #584]	; (80088a4 <buttonController+0x288>)
 800865c:	6013      	str	r3, [r2, #0]
 800865e:	e006      	b.n	800866e <buttonController+0x52>
			else if(item==ITEM_MAX)item=0;
 8008660:	4b90      	ldr	r3, [pc, #576]	; (80088a4 <buttonController+0x288>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b03      	cmp	r3, #3
 8008666:	d102      	bne.n	800866e <buttonController+0x52>
 8008668:	4b8e      	ldr	r3, [pc, #568]	; (80088a4 <buttonController+0x288>)
 800866a:	2200      	movs	r2, #0
 800866c:	601a      	str	r2, [r3, #0]
		}
		if(2==plusBtnListenner)selectedLcdItem=0;
 800866e:	4b8e      	ldr	r3, [pc, #568]	; (80088a8 <buttonController+0x28c>)
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	2b02      	cmp	r3, #2
 8008674:	d102      	bne.n	800867c <buttonController+0x60>
 8008676:	4b8d      	ldr	r3, [pc, #564]	; (80088ac <buttonController+0x290>)
 8008678:	2200      	movs	r2, #0
 800867a:	701a      	strb	r2, [r3, #0]
		if(1==plusBtnListenner){
 800867c:	4b8a      	ldr	r3, [pc, #552]	; (80088a8 <buttonController+0x28c>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d13b      	bne.n	80086fc <buttonController+0xe0>
			switch(item){
 8008684:	4b87      	ldr	r3, [pc, #540]	; (80088a4 <buttonController+0x288>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2b03      	cmp	r3, #3
 800868a:	d840      	bhi.n	800870e <buttonController+0xf2>
 800868c:	a201      	add	r2, pc, #4	; (adr r2, 8008694 <buttonController+0x78>)
 800868e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008692:	bf00      	nop
 8008694:	080086a5 	.word	0x080086a5
 8008698:	080086bb 	.word	0x080086bb
 800869c:	080086d1 	.word	0x080086d1
 80086a0:	080086e7 	.word	0x080086e7
			case 0: if(drv1.pid_kd<255) drv1.pid_kp++; break;
 80086a4:	4b82      	ldr	r3, [pc, #520]	; (80088b0 <buttonController+0x294>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	2bff      	cmp	r3, #255	; 0xff
 80086aa:	d029      	beq.n	8008700 <buttonController+0xe4>
 80086ac:	4b80      	ldr	r3, [pc, #512]	; (80088b0 <buttonController+0x294>)
 80086ae:	789b      	ldrb	r3, [r3, #2]
 80086b0:	3301      	adds	r3, #1
 80086b2:	b2da      	uxtb	r2, r3
 80086b4:	4b7e      	ldr	r3, [pc, #504]	; (80088b0 <buttonController+0x294>)
 80086b6:	709a      	strb	r2, [r3, #2]
 80086b8:	e022      	b.n	8008700 <buttonController+0xe4>
			case 1: if(drv1.pid_ki<255) drv1.pid_ki++; break;
 80086ba:	4b7d      	ldr	r3, [pc, #500]	; (80088b0 <buttonController+0x294>)
 80086bc:	785b      	ldrb	r3, [r3, #1]
 80086be:	2bff      	cmp	r3, #255	; 0xff
 80086c0:	d020      	beq.n	8008704 <buttonController+0xe8>
 80086c2:	4b7b      	ldr	r3, [pc, #492]	; (80088b0 <buttonController+0x294>)
 80086c4:	785b      	ldrb	r3, [r3, #1]
 80086c6:	3301      	adds	r3, #1
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	4b79      	ldr	r3, [pc, #484]	; (80088b0 <buttonController+0x294>)
 80086cc:	705a      	strb	r2, [r3, #1]
 80086ce:	e019      	b.n	8008704 <buttonController+0xe8>
			case 2: if(drv1.pid_kp<255) drv1.pid_kd++; break;
 80086d0:	4b77      	ldr	r3, [pc, #476]	; (80088b0 <buttonController+0x294>)
 80086d2:	789b      	ldrb	r3, [r3, #2]
 80086d4:	2bff      	cmp	r3, #255	; 0xff
 80086d6:	d017      	beq.n	8008708 <buttonController+0xec>
 80086d8:	4b75      	ldr	r3, [pc, #468]	; (80088b0 <buttonController+0x294>)
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	3301      	adds	r3, #1
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	4b73      	ldr	r3, [pc, #460]	; (80088b0 <buttonController+0x294>)
 80086e2:	701a      	strb	r2, [r3, #0]
 80086e4:	e010      	b.n	8008708 <buttonController+0xec>
			case 3: if(drv1.factor<255) drv1.factor++; break;
 80086e6:	4b72      	ldr	r3, [pc, #456]	; (80088b0 <buttonController+0x294>)
 80086e8:	78db      	ldrb	r3, [r3, #3]
 80086ea:	2bff      	cmp	r3, #255	; 0xff
 80086ec:	d00e      	beq.n	800870c <buttonController+0xf0>
 80086ee:	4b70      	ldr	r3, [pc, #448]	; (80088b0 <buttonController+0x294>)
 80086f0:	78db      	ldrb	r3, [r3, #3]
 80086f2:	3301      	adds	r3, #1
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	4b6e      	ldr	r3, [pc, #440]	; (80088b0 <buttonController+0x294>)
 80086f8:	70da      	strb	r2, [r3, #3]
 80086fa:	e007      	b.n	800870c <buttonController+0xf0>
			}
		}
 80086fc:	bf00      	nop
 80086fe:	e006      	b.n	800870e <buttonController+0xf2>
			case 0: if(drv1.pid_kd<255) drv1.pid_kp++; break;
 8008700:	bf00      	nop
 8008702:	e004      	b.n	800870e <buttonController+0xf2>
			case 1: if(drv1.pid_ki<255) drv1.pid_ki++; break;
 8008704:	bf00      	nop
 8008706:	e002      	b.n	800870e <buttonController+0xf2>
			case 2: if(drv1.pid_kp<255) drv1.pid_kd++; break;
 8008708:	bf00      	nop
 800870a:	e000      	b.n	800870e <buttonController+0xf2>
			case 3: if(drv1.factor<255) drv1.factor++; break;
 800870c:	bf00      	nop
		if(2==minusBtnListenner)selectedLcdItem=1;
 800870e:	4b69      	ldr	r3, [pc, #420]	; (80088b4 <buttonController+0x298>)
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	2b02      	cmp	r3, #2
 8008714:	d102      	bne.n	800871c <buttonController+0x100>
 8008716:	4b65      	ldr	r3, [pc, #404]	; (80088ac <buttonController+0x290>)
 8008718:	2201      	movs	r2, #1
 800871a:	701a      	strb	r2, [r3, #0]
		if(1==minusBtnListenner){
 800871c:	4b65      	ldr	r3, [pc, #404]	; (80088b4 <buttonController+0x298>)
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	2b01      	cmp	r3, #1
 8008722:	f040 811d 	bne.w	8008960 <buttonController+0x344>
			switch(item){
 8008726:	4b5f      	ldr	r3, [pc, #380]	; (80088a4 <buttonController+0x288>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b03      	cmp	r3, #3
 800872c:	f200 8129 	bhi.w	8008982 <buttonController+0x366>
 8008730:	a201      	add	r2, pc, #4	; (adr r2, 8008738 <buttonController+0x11c>)
 8008732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008736:	bf00      	nop
 8008738:	08008749 	.word	0x08008749
 800873c:	08008761 	.word	0x08008761
 8008740:	08008779 	.word	0x08008779
 8008744:	08008791 	.word	0x08008791
			case 0: if(drv1.pid_kd>0) drv1.pid_kp--; break;
 8008748:	4b59      	ldr	r3, [pc, #356]	; (80088b0 <buttonController+0x294>)
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 8109 	beq.w	8008964 <buttonController+0x348>
 8008752:	4b57      	ldr	r3, [pc, #348]	; (80088b0 <buttonController+0x294>)
 8008754:	789b      	ldrb	r3, [r3, #2]
 8008756:	3b01      	subs	r3, #1
 8008758:	b2da      	uxtb	r2, r3
 800875a:	4b55      	ldr	r3, [pc, #340]	; (80088b0 <buttonController+0x294>)
 800875c:	709a      	strb	r2, [r3, #2]
 800875e:	e101      	b.n	8008964 <buttonController+0x348>
			case 1: if(drv1.pid_ki>0) drv1.pid_ki--; break;
 8008760:	4b53      	ldr	r3, [pc, #332]	; (80088b0 <buttonController+0x294>)
 8008762:	785b      	ldrb	r3, [r3, #1]
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 80ff 	beq.w	8008968 <buttonController+0x34c>
 800876a:	4b51      	ldr	r3, [pc, #324]	; (80088b0 <buttonController+0x294>)
 800876c:	785b      	ldrb	r3, [r3, #1]
 800876e:	3b01      	subs	r3, #1
 8008770:	b2da      	uxtb	r2, r3
 8008772:	4b4f      	ldr	r3, [pc, #316]	; (80088b0 <buttonController+0x294>)
 8008774:	705a      	strb	r2, [r3, #1]
 8008776:	e0f7      	b.n	8008968 <buttonController+0x34c>
			case 2: if(drv1.pid_kp>0) drv1.pid_kd--; break;
 8008778:	4b4d      	ldr	r3, [pc, #308]	; (80088b0 <buttonController+0x294>)
 800877a:	789b      	ldrb	r3, [r3, #2]
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 80f5 	beq.w	800896c <buttonController+0x350>
 8008782:	4b4b      	ldr	r3, [pc, #300]	; (80088b0 <buttonController+0x294>)
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	3b01      	subs	r3, #1
 8008788:	b2da      	uxtb	r2, r3
 800878a:	4b49      	ldr	r3, [pc, #292]	; (80088b0 <buttonController+0x294>)
 800878c:	701a      	strb	r2, [r3, #0]
 800878e:	e0ed      	b.n	800896c <buttonController+0x350>
			case 3: if(drv1.factor>0) drv1.factor--; break;
 8008790:	4b47      	ldr	r3, [pc, #284]	; (80088b0 <buttonController+0x294>)
 8008792:	78db      	ldrb	r3, [r3, #3]
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 80eb 	beq.w	8008970 <buttonController+0x354>
 800879a:	4b45      	ldr	r3, [pc, #276]	; (80088b0 <buttonController+0x294>)
 800879c:	78db      	ldrb	r3, [r3, #3]
 800879e:	3b01      	subs	r3, #1
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	4b43      	ldr	r3, [pc, #268]	; (80088b0 <buttonController+0x294>)
 80087a4:	70da      	strb	r2, [r3, #3]
 80087a6:	e0e3      	b.n	8008970 <buttonController+0x354>
			}
		}
	}
	else{
		if(2==selectBtnListenner){ selectedMDI=true; selectedLcd=0; item=0;}
 80087a8:	4b3c      	ldr	r3, [pc, #240]	; (800889c <buttonController+0x280>)
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d108      	bne.n	80087c2 <buttonController+0x1a6>
 80087b0:	4b39      	ldr	r3, [pc, #228]	; (8008898 <buttonController+0x27c>)
 80087b2:	2201      	movs	r2, #1
 80087b4:	701a      	strb	r2, [r3, #0]
 80087b6:	4b3a      	ldr	r3, [pc, #232]	; (80088a0 <buttonController+0x284>)
 80087b8:	2200      	movs	r2, #0
 80087ba:	701a      	strb	r2, [r3, #0]
 80087bc:	4b39      	ldr	r3, [pc, #228]	; (80088a4 <buttonController+0x288>)
 80087be:	2200      	movs	r2, #0
 80087c0:	601a      	str	r2, [r3, #0]
		if(1==selectBtnListenner){
 80087c2:	4b36      	ldr	r3, [pc, #216]	; (800889c <buttonController+0x280>)
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d110      	bne.n	80087ec <buttonController+0x1d0>
			if(item<ITEM_MAX)item++;
 80087ca:	4b36      	ldr	r3, [pc, #216]	; (80088a4 <buttonController+0x288>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	dc05      	bgt.n	80087de <buttonController+0x1c2>
 80087d2:	4b34      	ldr	r3, [pc, #208]	; (80088a4 <buttonController+0x288>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3301      	adds	r3, #1
 80087d8:	4a32      	ldr	r2, [pc, #200]	; (80088a4 <buttonController+0x288>)
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	e006      	b.n	80087ec <buttonController+0x1d0>
			else if(item==ITEM_MAX)item=0;
 80087de:	4b31      	ldr	r3, [pc, #196]	; (80088a4 <buttonController+0x288>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d102      	bne.n	80087ec <buttonController+0x1d0>
 80087e6:	4b2f      	ldr	r3, [pc, #188]	; (80088a4 <buttonController+0x288>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]
		}
		if(2==plusBtnListenner)selectedLcdItem=0;
 80087ec:	4b2e      	ldr	r3, [pc, #184]	; (80088a8 <buttonController+0x28c>)
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d102      	bne.n	80087fa <buttonController+0x1de>
 80087f4:	4b2d      	ldr	r3, [pc, #180]	; (80088ac <buttonController+0x290>)
 80087f6:	2200      	movs	r2, #0
 80087f8:	701a      	strb	r2, [r3, #0]
		if(1==plusBtnListenner){
 80087fa:	4b2b      	ldr	r3, [pc, #172]	; (80088a8 <buttonController+0x28c>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d144      	bne.n	800888c <buttonController+0x270>
			switch(item){
 8008802:	4b28      	ldr	r3, [pc, #160]	; (80088a4 <buttonController+0x288>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b03      	cmp	r3, #3
 8008808:	d859      	bhi.n	80088be <buttonController+0x2a2>
 800880a:	a201      	add	r2, pc, #4	; (adr r2, 8008810 <buttonController+0x1f4>)
 800880c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008810:	08008821 	.word	0x08008821
 8008814:	08008837 	.word	0x08008837
 8008818:	0800884d 	.word	0x0800884d
 800881c:	08008863 	.word	0x08008863
			case 0: if(drv2.pid_kd<255) drv2.pid_kp++; break;
 8008820:	4b25      	ldr	r3, [pc, #148]	; (80088b8 <buttonController+0x29c>)
 8008822:	789b      	ldrb	r3, [r3, #2]
 8008824:	2bff      	cmp	r3, #255	; 0xff
 8008826:	d033      	beq.n	8008890 <buttonController+0x274>
 8008828:	4b23      	ldr	r3, [pc, #140]	; (80088b8 <buttonController+0x29c>)
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	3301      	adds	r3, #1
 800882e:	b2da      	uxtb	r2, r3
 8008830:	4b21      	ldr	r3, [pc, #132]	; (80088b8 <buttonController+0x29c>)
 8008832:	701a      	strb	r2, [r3, #0]
 8008834:	e02c      	b.n	8008890 <buttonController+0x274>
			case 1: if(drv2.pid_ki<255) drv2.pid_ki++; break;
 8008836:	4b20      	ldr	r3, [pc, #128]	; (80088b8 <buttonController+0x29c>)
 8008838:	785b      	ldrb	r3, [r3, #1]
 800883a:	2bff      	cmp	r3, #255	; 0xff
 800883c:	d02a      	beq.n	8008894 <buttonController+0x278>
 800883e:	4b1e      	ldr	r3, [pc, #120]	; (80088b8 <buttonController+0x29c>)
 8008840:	785b      	ldrb	r3, [r3, #1]
 8008842:	3301      	adds	r3, #1
 8008844:	b2da      	uxtb	r2, r3
 8008846:	4b1c      	ldr	r3, [pc, #112]	; (80088b8 <buttonController+0x29c>)
 8008848:	705a      	strb	r2, [r3, #1]
 800884a:	e023      	b.n	8008894 <buttonController+0x278>
			case 2: if(drv2.pid_kp<255) drv2.pid_kd++; break;
 800884c:	4b1a      	ldr	r3, [pc, #104]	; (80088b8 <buttonController+0x29c>)
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2bff      	cmp	r3, #255	; 0xff
 8008852:	d033      	beq.n	80088bc <buttonController+0x2a0>
 8008854:	4b18      	ldr	r3, [pc, #96]	; (80088b8 <buttonController+0x29c>)
 8008856:	789b      	ldrb	r3, [r3, #2]
 8008858:	3301      	adds	r3, #1
 800885a:	b2da      	uxtb	r2, r3
 800885c:	4b16      	ldr	r3, [pc, #88]	; (80088b8 <buttonController+0x29c>)
 800885e:	709a      	strb	r2, [r3, #2]
 8008860:	e02c      	b.n	80088bc <buttonController+0x2a0>
			case 3: if(drv2.soft_f<5 && drv2.soft_k<5) drv2.soft_f++; drv2.soft_k++;break;
 8008862:	4b15      	ldr	r3, [pc, #84]	; (80088b8 <buttonController+0x29c>)
 8008864:	799b      	ldrb	r3, [r3, #6]
 8008866:	2b04      	cmp	r3, #4
 8008868:	d809      	bhi.n	800887e <buttonController+0x262>
 800886a:	4b13      	ldr	r3, [pc, #76]	; (80088b8 <buttonController+0x29c>)
 800886c:	79db      	ldrb	r3, [r3, #7]
 800886e:	2b04      	cmp	r3, #4
 8008870:	d805      	bhi.n	800887e <buttonController+0x262>
 8008872:	4b11      	ldr	r3, [pc, #68]	; (80088b8 <buttonController+0x29c>)
 8008874:	799b      	ldrb	r3, [r3, #6]
 8008876:	3301      	adds	r3, #1
 8008878:	b2da      	uxtb	r2, r3
 800887a:	4b0f      	ldr	r3, [pc, #60]	; (80088b8 <buttonController+0x29c>)
 800887c:	719a      	strb	r2, [r3, #6]
 800887e:	4b0e      	ldr	r3, [pc, #56]	; (80088b8 <buttonController+0x29c>)
 8008880:	79db      	ldrb	r3, [r3, #7]
 8008882:	3301      	adds	r3, #1
 8008884:	b2da      	uxtb	r2, r3
 8008886:	4b0c      	ldr	r3, [pc, #48]	; (80088b8 <buttonController+0x29c>)
 8008888:	71da      	strb	r2, [r3, #7]
 800888a:	e018      	b.n	80088be <buttonController+0x2a2>
			}
		}
 800888c:	bf00      	nop
 800888e:	e016      	b.n	80088be <buttonController+0x2a2>
			case 0: if(drv2.pid_kd<255) drv2.pid_kp++; break;
 8008890:	bf00      	nop
 8008892:	e014      	b.n	80088be <buttonController+0x2a2>
			case 1: if(drv2.pid_ki<255) drv2.pid_ki++; break;
 8008894:	bf00      	nop
 8008896:	e012      	b.n	80088be <buttonController+0x2a2>
 8008898:	20000010 	.word	0x20000010
 800889c:	200049b0 	.word	0x200049b0
 80088a0:	200049ae 	.word	0x200049ae
 80088a4:	200049b4 	.word	0x200049b4
 80088a8:	200049b8 	.word	0x200049b8
 80088ac:	200049af 	.word	0x200049af
 80088b0:	20004ce0 	.word	0x20004ce0
 80088b4:	200049b9 	.word	0x200049b9
 80088b8:	20004ce8 	.word	0x20004ce8
			case 2: if(drv2.pid_kp<255) drv2.pid_kd++; break;
 80088bc:	bf00      	nop
		if(2==minusBtnListenner)selectedLcdItem=1;
 80088be:	4b3b      	ldr	r3, [pc, #236]	; (80089ac <buttonController+0x390>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d102      	bne.n	80088cc <buttonController+0x2b0>
 80088c6:	4b3a      	ldr	r3, [pc, #232]	; (80089b0 <buttonController+0x394>)
 80088c8:	2201      	movs	r2, #1
 80088ca:	701a      	strb	r2, [r3, #0]
		if(1==minusBtnListenner){
 80088cc:	4b37      	ldr	r3, [pc, #220]	; (80089ac <buttonController+0x390>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d14f      	bne.n	8008974 <buttonController+0x358>
			switch(item){
 80088d4:	4b37      	ldr	r3, [pc, #220]	; (80089b4 <buttonController+0x398>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b03      	cmp	r3, #3
 80088da:	d852      	bhi.n	8008982 <buttonController+0x366>
 80088dc:	a201      	add	r2, pc, #4	; (adr r2, 80088e4 <buttonController+0x2c8>)
 80088de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e2:	bf00      	nop
 80088e4:	080088f5 	.word	0x080088f5
 80088e8:	0800890b 	.word	0x0800890b
 80088ec:	08008921 	.word	0x08008921
 80088f0:	08008937 	.word	0x08008937
			case 0: if(drv2.pid_kd>0) drv2.pid_kp--; break;
 80088f4:	4b30      	ldr	r3, [pc, #192]	; (80089b8 <buttonController+0x39c>)
 80088f6:	789b      	ldrb	r3, [r3, #2]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d03d      	beq.n	8008978 <buttonController+0x35c>
 80088fc:	4b2e      	ldr	r3, [pc, #184]	; (80089b8 <buttonController+0x39c>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	3b01      	subs	r3, #1
 8008902:	b2da      	uxtb	r2, r3
 8008904:	4b2c      	ldr	r3, [pc, #176]	; (80089b8 <buttonController+0x39c>)
 8008906:	701a      	strb	r2, [r3, #0]
 8008908:	e036      	b.n	8008978 <buttonController+0x35c>
			case 1: if(drv2.pid_ki>0) drv2.pid_ki--; break;
 800890a:	4b2b      	ldr	r3, [pc, #172]	; (80089b8 <buttonController+0x39c>)
 800890c:	785b      	ldrb	r3, [r3, #1]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d034      	beq.n	800897c <buttonController+0x360>
 8008912:	4b29      	ldr	r3, [pc, #164]	; (80089b8 <buttonController+0x39c>)
 8008914:	785b      	ldrb	r3, [r3, #1]
 8008916:	3b01      	subs	r3, #1
 8008918:	b2da      	uxtb	r2, r3
 800891a:	4b27      	ldr	r3, [pc, #156]	; (80089b8 <buttonController+0x39c>)
 800891c:	705a      	strb	r2, [r3, #1]
 800891e:	e02d      	b.n	800897c <buttonController+0x360>
			case 2: if(drv2.pid_kp>0) drv2.pid_kd--; break;
 8008920:	4b25      	ldr	r3, [pc, #148]	; (80089b8 <buttonController+0x39c>)
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d02b      	beq.n	8008980 <buttonController+0x364>
 8008928:	4b23      	ldr	r3, [pc, #140]	; (80089b8 <buttonController+0x39c>)
 800892a:	789b      	ldrb	r3, [r3, #2]
 800892c:	3b01      	subs	r3, #1
 800892e:	b2da      	uxtb	r2, r3
 8008930:	4b21      	ldr	r3, [pc, #132]	; (80089b8 <buttonController+0x39c>)
 8008932:	709a      	strb	r2, [r3, #2]
 8008934:	e024      	b.n	8008980 <buttonController+0x364>
			case 3: if(drv2.soft_f>0 && drv2.soft_k>0) drv2.soft_f--; drv2.soft_k--; break;
 8008936:	4b20      	ldr	r3, [pc, #128]	; (80089b8 <buttonController+0x39c>)
 8008938:	799b      	ldrb	r3, [r3, #6]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d009      	beq.n	8008952 <buttonController+0x336>
 800893e:	4b1e      	ldr	r3, [pc, #120]	; (80089b8 <buttonController+0x39c>)
 8008940:	79db      	ldrb	r3, [r3, #7]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d005      	beq.n	8008952 <buttonController+0x336>
 8008946:	4b1c      	ldr	r3, [pc, #112]	; (80089b8 <buttonController+0x39c>)
 8008948:	799b      	ldrb	r3, [r3, #6]
 800894a:	3b01      	subs	r3, #1
 800894c:	b2da      	uxtb	r2, r3
 800894e:	4b1a      	ldr	r3, [pc, #104]	; (80089b8 <buttonController+0x39c>)
 8008950:	719a      	strb	r2, [r3, #6]
 8008952:	4b19      	ldr	r3, [pc, #100]	; (80089b8 <buttonController+0x39c>)
 8008954:	79db      	ldrb	r3, [r3, #7]
 8008956:	3b01      	subs	r3, #1
 8008958:	b2da      	uxtb	r2, r3
 800895a:	4b17      	ldr	r3, [pc, #92]	; (80089b8 <buttonController+0x39c>)
 800895c:	71da      	strb	r2, [r3, #7]
 800895e:	e010      	b.n	8008982 <buttonController+0x366>
		}
 8008960:	bf00      	nop
 8008962:	e00e      	b.n	8008982 <buttonController+0x366>
			case 0: if(drv1.pid_kd>0) drv1.pid_kp--; break;
 8008964:	bf00      	nop
 8008966:	e00c      	b.n	8008982 <buttonController+0x366>
			case 1: if(drv1.pid_ki>0) drv1.pid_ki--; break;
 8008968:	bf00      	nop
 800896a:	e00a      	b.n	8008982 <buttonController+0x366>
			case 2: if(drv1.pid_kp>0) drv1.pid_kd--; break;
 800896c:	bf00      	nop
 800896e:	e008      	b.n	8008982 <buttonController+0x366>
			case 3: if(drv1.factor>0) drv1.factor--; break;
 8008970:	bf00      	nop
 8008972:	e006      	b.n	8008982 <buttonController+0x366>
			}
		}
 8008974:	bf00      	nop
 8008976:	e004      	b.n	8008982 <buttonController+0x366>
			case 0: if(drv2.pid_kd>0) drv2.pid_kp--; break;
 8008978:	bf00      	nop
 800897a:	e002      	b.n	8008982 <buttonController+0x366>
			case 1: if(drv2.pid_ki>0) drv2.pid_ki--; break;
 800897c:	bf00      	nop
 800897e:	e000      	b.n	8008982 <buttonController+0x366>
			case 2: if(drv2.pid_kp>0) drv2.pid_kd--; break;
 8008980:	bf00      	nop
	}

	selectBtnListenner=selectButton_Listenner_For_MenuControl();
 8008982:	f7ff fd89 	bl	8008498 <selectButton_Listenner_For_MenuControl>
 8008986:	4603      	mov	r3, r0
 8008988:	461a      	mov	r2, r3
 800898a:	4b0c      	ldr	r3, [pc, #48]	; (80089bc <buttonController+0x3a0>)
 800898c:	701a      	strb	r2, [r3, #0]
	plusBtnListenner=plusButton_Listenner_For_MenuControl();
 800898e:	f7ff fdab 	bl	80084e8 <plusButton_Listenner_For_MenuControl>
 8008992:	4603      	mov	r3, r0
 8008994:	461a      	mov	r2, r3
 8008996:	4b0a      	ldr	r3, [pc, #40]	; (80089c0 <buttonController+0x3a4>)
 8008998:	701a      	strb	r2, [r3, #0]
	minusBtnListenner=minusButton_Listenner_For_MenuControl();
 800899a:	f7ff fdcb 	bl	8008534 <minusButton_Listenner_For_MenuControl>
 800899e:	4603      	mov	r3, r0
 80089a0:	461a      	mov	r2, r3
 80089a2:	4b02      	ldr	r3, [pc, #8]	; (80089ac <buttonController+0x390>)
 80089a4:	701a      	strb	r2, [r3, #0]
	//"drv1= %x - %x - %x - %x\n",drv1.pid_kd,drv1.pid_ki,drv1.pid_kp,drv1.factor
	//"drv2= %x - %x - %x - %x\n",drv2.pid_kd,drv2.pid_ki,drv2.pid_kp,drv2.factor

}
 80089a6:	bf00      	nop
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	200049b9 	.word	0x200049b9
 80089b0:	200049af 	.word	0x200049af
 80089b4:	200049b4 	.word	0x200049b4
 80089b8:	20004ce8 	.word	0x20004ce8
 80089bc:	200049b0 	.word	0x200049b0
 80089c0:	200049b8 	.word	0x200049b8

080089c4 <transmissionDriver1>:
void transmissionDriver1(void){
 80089c4:	b590      	push	{r4, r7, lr}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af02      	add	r7, sp, #8
	MDI_sendDataChannel1Ver2(drv1.angle,drv1.pid_kp,drv1.pid_ki,drv1.pid_kd,drv1.factor);
 80089ca:	4b09      	ldr	r3, [pc, #36]	; (80089f0 <transmissionDriver1+0x2c>)
 80089cc:	8898      	ldrh	r0, [r3, #4]
 80089ce:	4b08      	ldr	r3, [pc, #32]	; (80089f0 <transmissionDriver1+0x2c>)
 80089d0:	7899      	ldrb	r1, [r3, #2]
 80089d2:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <transmissionDriver1+0x2c>)
 80089d4:	785a      	ldrb	r2, [r3, #1]
 80089d6:	4b06      	ldr	r3, [pc, #24]	; (80089f0 <transmissionDriver1+0x2c>)
 80089d8:	781c      	ldrb	r4, [r3, #0]
 80089da:	4b05      	ldr	r3, [pc, #20]	; (80089f0 <transmissionDriver1+0x2c>)
 80089dc:	78db      	ldrb	r3, [r3, #3]
 80089de:	9300      	str	r3, [sp, #0]
 80089e0:	4623      	mov	r3, r4
 80089e2:	f000 feef 	bl	80097c4 <MDI_sendDataChannel1Ver2>
}
 80089e6:	bf00      	nop
 80089e8:	3704      	adds	r7, #4
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd90      	pop	{r4, r7, pc}
 80089ee:	bf00      	nop
 80089f0:	20004ce0 	.word	0x20004ce0

080089f4 <transmissionDriver2>:
void transmissionDriver2(void){
 80089f4:	b5b0      	push	{r4, r5, r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af02      	add	r7, sp, #8
	MDI_sendDataChannel2Ver2(drv2.speed,drv2.pid_kp,drv2.pid_ki,drv2.pid_kd,drv2.soft_k,drv2.soft_f);
 80089fa:	4b0b      	ldr	r3, [pc, #44]	; (8008a28 <transmissionDriver2+0x34>)
 80089fc:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8008a00:	4b09      	ldr	r3, [pc, #36]	; (8008a28 <transmissionDriver2+0x34>)
 8008a02:	7819      	ldrb	r1, [r3, #0]
 8008a04:	4b08      	ldr	r3, [pc, #32]	; (8008a28 <transmissionDriver2+0x34>)
 8008a06:	785c      	ldrb	r4, [r3, #1]
 8008a08:	4b07      	ldr	r3, [pc, #28]	; (8008a28 <transmissionDriver2+0x34>)
 8008a0a:	789d      	ldrb	r5, [r3, #2]
 8008a0c:	4b06      	ldr	r3, [pc, #24]	; (8008a28 <transmissionDriver2+0x34>)
 8008a0e:	79db      	ldrb	r3, [r3, #7]
 8008a10:	4a05      	ldr	r2, [pc, #20]	; (8008a28 <transmissionDriver2+0x34>)
 8008a12:	7992      	ldrb	r2, [r2, #6]
 8008a14:	9201      	str	r2, [sp, #4]
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	462b      	mov	r3, r5
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	f000 ffd8 	bl	80099d0 <MDI_sendDataChannel2Ver2>
}
 8008a20:	bf00      	nop
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bdb0      	pop	{r4, r5, r7, pc}
 8008a26:	bf00      	nop
 8008a28:	20004ce8 	.word	0x20004ce8

08008a2c <getDriver1TransmitVal>:
mD_interface getDriver1TransmitVal(void){
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
	return drv1;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a05      	ldr	r2, [pc, #20]	; (8008a4c <getDriver1TransmitVal+0x20>)
 8008a38:	6811      	ldr	r1, [r2, #0]
 8008a3a:	6019      	str	r1, [r3, #0]
 8008a3c:	8892      	ldrh	r2, [r2, #4]
 8008a3e:	809a      	strh	r2, [r3, #4]
}
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr
 8008a4c:	20004ce0 	.word	0x20004ce0

08008a50 <getDriver2TransmitVal>:
tMD_interface getDriver2TransmitVal(void){
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
	return drv2;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a05      	ldr	r2, [pc, #20]	; (8008a70 <getDriver2TransmitVal+0x20>)
 8008a5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8008a5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	20004ce8 	.word	0x20004ce8

08008a74 <getSelectedLcdVal>:
uint8_t getSelectedLcdVal(void){return selectedLcd;}
 8008a74:	b480      	push	{r7}
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	4b03      	ldr	r3, [pc, #12]	; (8008a88 <getSelectedLcdVal+0x14>)
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	200049ae 	.word	0x200049ae

08008a8c <getSelectedLcdItemVal>:
uint8_t getSelectedLcdItemVal(void){return selectedLcdItem;}
 8008a8c:	b480      	push	{r7}
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	4b03      	ldr	r3, [pc, #12]	; (8008aa0 <getSelectedLcdItemVal+0x14>)
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	4618      	mov	r0, r3
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	200049af 	.word	0x200049af

08008aa4 <lcd_Init>:

/* @brief lcd module initalize
 * @param none
 * @return none
 * */
void lcd_Init(void){
 8008aa4:	b590      	push	{r4, r7, lr}
 8008aa6:	b095      	sub	sp, #84	; 0x54
 8008aa8:	af14      	add	r7, sp, #80	; 0x50
	LCD_i2cDeviceCheck(LCD_I2C_CHANNEL1);
 8008aaa:	4c48      	ldr	r4, [pc, #288]	; (8008bcc <lcd_Init+0x128>)
 8008aac:	4668      	mov	r0, sp
 8008aae:	f104 0310 	add.w	r3, r4, #16
 8008ab2:	2244      	movs	r2, #68	; 0x44
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	f001 fa55 	bl	8009f64 <memcpy>
 8008aba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008abe:	f000 fb2b 	bl	8009118 <LCD_i2cDeviceCheck>
	LCD_Init(LCD_I2C_CHANNEL1);
 8008ac2:	4c42      	ldr	r4, [pc, #264]	; (8008bcc <lcd_Init+0x128>)
 8008ac4:	4668      	mov	r0, sp
 8008ac6:	f104 0310 	add.w	r3, r4, #16
 8008aca:	2244      	movs	r2, #68	; 0x44
 8008acc:	4619      	mov	r1, r3
 8008ace:	f001 fa49 	bl	8009f64 <memcpy>
 8008ad2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008ad6:	f000 fde1 	bl	800969c <LCD_Init>
	LCD_BackLight(LCD_I2C_CHANNEL1,LCD_BL_ON);
 8008ada:	4c3c      	ldr	r4, [pc, #240]	; (8008bcc <lcd_Init+0x128>)
 8008adc:	2308      	movs	r3, #8
 8008ade:	9311      	str	r3, [sp, #68]	; 0x44
 8008ae0:	4668      	mov	r0, sp
 8008ae2:	f104 0310 	add.w	r3, r4, #16
 8008ae6:	2244      	movs	r2, #68	; 0x44
 8008ae8:	4619      	mov	r1, r3
 8008aea:	f001 fa3b 	bl	8009f64 <memcpy>
 8008aee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008af2:	f000 fd97 	bl	8009624 <LCD_BackLight>
	LCD_SetCursor(LCD_I2C_CHANNEL1,0,0);
 8008af6:	4c35      	ldr	r4, [pc, #212]	; (8008bcc <lcd_Init+0x128>)
 8008af8:	2300      	movs	r3, #0
 8008afa:	9312      	str	r3, [sp, #72]	; 0x48
 8008afc:	2300      	movs	r3, #0
 8008afe:	9311      	str	r3, [sp, #68]	; 0x44
 8008b00:	4668      	mov	r0, sp
 8008b02:	f104 0310 	add.w	r3, r4, #16
 8008b06:	2244      	movs	r2, #68	; 0x44
 8008b08:	4619      	mov	r1, r3
 8008b0a:	f001 fa2b 	bl	8009f64 <memcpy>
 8008b0e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008b12:	f000 fc13 	bl	800933c <LCD_SetCursor>

	LCD_Send_String(LCD_I2C_CHANNEL1,"TEST",STR_NOSLIDE);
 8008b16:	4c2d      	ldr	r4, [pc, #180]	; (8008bcc <lcd_Init+0x128>)
 8008b18:	2300      	movs	r3, #0
 8008b1a:	9312      	str	r3, [sp, #72]	; 0x48
 8008b1c:	4b2c      	ldr	r3, [pc, #176]	; (8008bd0 <lcd_Init+0x12c>)
 8008b1e:	9311      	str	r3, [sp, #68]	; 0x44
 8008b20:	4668      	mov	r0, sp
 8008b22:	f104 0310 	add.w	r3, r4, #16
 8008b26:	2244      	movs	r2, #68	; 0x44
 8008b28:	4619      	mov	r1, r3
 8008b2a:	f001 fa1b 	bl	8009f64 <memcpy>
 8008b2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008b32:	f000 fc43 	bl	80093bc <LCD_Send_String>

	LCD_i2cDeviceCheck(LCD_I2C_CHANNEL2);
 8008b36:	4c27      	ldr	r4, [pc, #156]	; (8008bd4 <lcd_Init+0x130>)
 8008b38:	4668      	mov	r0, sp
 8008b3a:	f104 0310 	add.w	r3, r4, #16
 8008b3e:	2244      	movs	r2, #68	; 0x44
 8008b40:	4619      	mov	r1, r3
 8008b42:	f001 fa0f 	bl	8009f64 <memcpy>
 8008b46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008b4a:	f000 fae5 	bl	8009118 <LCD_i2cDeviceCheck>
	LCD_Init(LCD_I2C_CHANNEL2);
 8008b4e:	4c21      	ldr	r4, [pc, #132]	; (8008bd4 <lcd_Init+0x130>)
 8008b50:	4668      	mov	r0, sp
 8008b52:	f104 0310 	add.w	r3, r4, #16
 8008b56:	2244      	movs	r2, #68	; 0x44
 8008b58:	4619      	mov	r1, r3
 8008b5a:	f001 fa03 	bl	8009f64 <memcpy>
 8008b5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008b62:	f000 fd9b 	bl	800969c <LCD_Init>
	LCD_BackLight(LCD_I2C_CHANNEL2,LCD_BL_ON);
 8008b66:	4c1b      	ldr	r4, [pc, #108]	; (8008bd4 <lcd_Init+0x130>)
 8008b68:	2308      	movs	r3, #8
 8008b6a:	9311      	str	r3, [sp, #68]	; 0x44
 8008b6c:	4668      	mov	r0, sp
 8008b6e:	f104 0310 	add.w	r3, r4, #16
 8008b72:	2244      	movs	r2, #68	; 0x44
 8008b74:	4619      	mov	r1, r3
 8008b76:	f001 f9f5 	bl	8009f64 <memcpy>
 8008b7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008b7e:	f000 fd51 	bl	8009624 <LCD_BackLight>
	LCD_SetCursor(LCD_I2C_CHANNEL2,0,0);
 8008b82:	4c14      	ldr	r4, [pc, #80]	; (8008bd4 <lcd_Init+0x130>)
 8008b84:	2300      	movs	r3, #0
 8008b86:	9312      	str	r3, [sp, #72]	; 0x48
 8008b88:	2300      	movs	r3, #0
 8008b8a:	9311      	str	r3, [sp, #68]	; 0x44
 8008b8c:	4668      	mov	r0, sp
 8008b8e:	f104 0310 	add.w	r3, r4, #16
 8008b92:	2244      	movs	r2, #68	; 0x44
 8008b94:	4619      	mov	r1, r3
 8008b96:	f001 f9e5 	bl	8009f64 <memcpy>
 8008b9a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008b9e:	f000 fbcd 	bl	800933c <LCD_SetCursor>

	LCD_Send_String(LCD_I2C_CHANNEL1,"TEST",STR_NOSLIDE);
 8008ba2:	4c0a      	ldr	r4, [pc, #40]	; (8008bcc <lcd_Init+0x128>)
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	9312      	str	r3, [sp, #72]	; 0x48
 8008ba8:	4b09      	ldr	r3, [pc, #36]	; (8008bd0 <lcd_Init+0x12c>)
 8008baa:	9311      	str	r3, [sp, #68]	; 0x44
 8008bac:	4668      	mov	r0, sp
 8008bae:	f104 0310 	add.w	r3, r4, #16
 8008bb2:	2244      	movs	r2, #68	; 0x44
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	f001 f9d5 	bl	8009f64 <memcpy>
 8008bba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008bbe:	f000 fbfd 	bl	80093bc <LCD_Send_String>

}
 8008bc2:	bf00      	nop
 8008bc4:	3704      	adds	r7, #4
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd90      	pop	{r4, r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20004a58 	.word	0x20004a58
 8008bd0:	0800a80c 	.word	0x0800a80c
 8008bd4:	20004aac 	.word	0x20004aac

08008bd8 <printToLcdDrv1Receive>:
void printToLcdDrv1Receive(mD_interface gets,bool isSelected){
 8008bd8:	b590      	push	{r4, r7, lr}
 8008bda:	b099      	sub	sp, #100	; 0x64
 8008bdc:	af14      	add	r7, sp, #80	; 0x50
 8008bde:	f107 0308 	add.w	r3, r7, #8
 8008be2:	e883 0003 	stmia.w	r3, {r0, r1}
 8008be6:	4613      	mov	r3, r2
 8008be8:	71fb      	strb	r3, [r7, #7]
	LCD_SetCursor(LCD_I2C_CHANNEL1,1,1);
 8008bea:	4c30      	ldr	r4, [pc, #192]	; (8008cac <printToLcdDrv1Receive+0xd4>)
 8008bec:	2301      	movs	r3, #1
 8008bee:	9312      	str	r3, [sp, #72]	; 0x48
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	9311      	str	r3, [sp, #68]	; 0x44
 8008bf4:	4668      	mov	r0, sp
 8008bf6:	f104 0310 	add.w	r3, r4, #16
 8008bfa:	2244      	movs	r2, #68	; 0x44
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	f001 f9b1 	bl	8009f64 <memcpy>
 8008c02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008c06:	f000 fb99 	bl	800933c <LCD_SetCursor>
	if(isSelected)	sprintf(lcdBuff,"-Gln1-a:%03d p:%02x",gets.angle,gets.pid_kp);
 8008c0a:	79fb      	ldrb	r3, [r7, #7]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d007      	beq.n	8008c20 <printToLcdDrv1Receive+0x48>
 8008c10:	89bb      	ldrh	r3, [r7, #12]
 8008c12:	461a      	mov	r2, r3
 8008c14:	7abb      	ldrb	r3, [r7, #10]
 8008c16:	4926      	ldr	r1, [pc, #152]	; (8008cb0 <printToLcdDrv1Receive+0xd8>)
 8008c18:	4826      	ldr	r0, [pc, #152]	; (8008cb4 <printToLcdDrv1Receive+0xdc>)
 8008c1a:	f001 f9b9 	bl	8009f90 <siprintf>
 8008c1e:	e006      	b.n	8008c2e <printToLcdDrv1Receive+0x56>
	else	sprintf(lcdBuff,"Gln1 a:%03d p:%02x",gets.angle,gets.pid_kp);
 8008c20:	89bb      	ldrh	r3, [r7, #12]
 8008c22:	461a      	mov	r2, r3
 8008c24:	7abb      	ldrb	r3, [r7, #10]
 8008c26:	4924      	ldr	r1, [pc, #144]	; (8008cb8 <printToLcdDrv1Receive+0xe0>)
 8008c28:	4822      	ldr	r0, [pc, #136]	; (8008cb4 <printToLcdDrv1Receive+0xdc>)
 8008c2a:	f001 f9b1 	bl	8009f90 <siprintf>
	LCD_Send_String(LCD_I2C_CHANNEL1,lcdBuff,STR_NOSLIDE);
 8008c2e:	4c1f      	ldr	r4, [pc, #124]	; (8008cac <printToLcdDrv1Receive+0xd4>)
 8008c30:	2300      	movs	r3, #0
 8008c32:	9312      	str	r3, [sp, #72]	; 0x48
 8008c34:	4b1f      	ldr	r3, [pc, #124]	; (8008cb4 <printToLcdDrv1Receive+0xdc>)
 8008c36:	9311      	str	r3, [sp, #68]	; 0x44
 8008c38:	4668      	mov	r0, sp
 8008c3a:	f104 0310 	add.w	r3, r4, #16
 8008c3e:	2244      	movs	r2, #68	; 0x44
 8008c40:	4619      	mov	r1, r3
 8008c42:	f001 f98f 	bl	8009f64 <memcpy>
 8008c46:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008c4a:	f000 fbb7 	bl	80093bc <LCD_Send_String>
	LCD_SetCursor(LCD_I2C_CHANNEL1,2,1);
 8008c4e:	4c17      	ldr	r4, [pc, #92]	; (8008cac <printToLcdDrv1Receive+0xd4>)
 8008c50:	2301      	movs	r3, #1
 8008c52:	9312      	str	r3, [sp, #72]	; 0x48
 8008c54:	2302      	movs	r3, #2
 8008c56:	9311      	str	r3, [sp, #68]	; 0x44
 8008c58:	4668      	mov	r0, sp
 8008c5a:	f104 0310 	add.w	r3, r4, #16
 8008c5e:	2244      	movs	r2, #68	; 0x44
 8008c60:	4619      	mov	r1, r3
 8008c62:	f001 f97f 	bl	8009f64 <memcpy>
 8008c66:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008c6a:	f000 fb67 	bl	800933c <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x d:%02x f:%02x",gets.pid_ki,gets.pid_kd,gets.factor);
 8008c6e:	7a7b      	ldrb	r3, [r7, #9]
 8008c70:	461a      	mov	r2, r3
 8008c72:	7a3b      	ldrb	r3, [r7, #8]
 8008c74:	4619      	mov	r1, r3
 8008c76:	7afb      	ldrb	r3, [r7, #11]
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	490f      	ldr	r1, [pc, #60]	; (8008cbc <printToLcdDrv1Receive+0xe4>)
 8008c7e:	480d      	ldr	r0, [pc, #52]	; (8008cb4 <printToLcdDrv1Receive+0xdc>)
 8008c80:	f001 f986 	bl	8009f90 <siprintf>
	LCD_Send_String(LCD_I2C_CHANNEL1,lcdBuff,STR_NOSLIDE);
 8008c84:	4c09      	ldr	r4, [pc, #36]	; (8008cac <printToLcdDrv1Receive+0xd4>)
 8008c86:	2300      	movs	r3, #0
 8008c88:	9312      	str	r3, [sp, #72]	; 0x48
 8008c8a:	4b0a      	ldr	r3, [pc, #40]	; (8008cb4 <printToLcdDrv1Receive+0xdc>)
 8008c8c:	9311      	str	r3, [sp, #68]	; 0x44
 8008c8e:	4668      	mov	r0, sp
 8008c90:	f104 0310 	add.w	r3, r4, #16
 8008c94:	2244      	movs	r2, #68	; 0x44
 8008c96:	4619      	mov	r1, r3
 8008c98:	f001 f964 	bl	8009f64 <memcpy>
 8008c9c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008ca0:	f000 fb8c 	bl	80093bc <LCD_Send_String>
}
 8008ca4:	bf00      	nop
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd90      	pop	{r4, r7, pc}
 8008cac:	20004a58 	.word	0x20004a58
 8008cb0:	0800a814 	.word	0x0800a814
 8008cb4:	20004cf4 	.word	0x20004cf4
 8008cb8:	0800a828 	.word	0x0800a828
 8008cbc:	0800a83c 	.word	0x0800a83c

08008cc0 <printToLcdDrv1Transmit>:
void printToLcdDrv1Transmit(mD_interface sends,bool isSelected){
 8008cc0:	b590      	push	{r4, r7, lr}
 8008cc2:	b099      	sub	sp, #100	; 0x64
 8008cc4:	af14      	add	r7, sp, #80	; 0x50
 8008cc6:	f107 0308 	add.w	r3, r7, #8
 8008cca:	e883 0003 	stmia.w	r3, {r0, r1}
 8008cce:	4613      	mov	r3, r2
 8008cd0:	71fb      	strb	r3, [r7, #7]
	LCD_SetCursor(LCD_I2C_CHANNEL1,1,1);
 8008cd2:	4c30      	ldr	r4, [pc, #192]	; (8008d94 <printToLcdDrv1Transmit+0xd4>)
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	9312      	str	r3, [sp, #72]	; 0x48
 8008cd8:	2301      	movs	r3, #1
 8008cda:	9311      	str	r3, [sp, #68]	; 0x44
 8008cdc:	4668      	mov	r0, sp
 8008cde:	f104 0310 	add.w	r3, r4, #16
 8008ce2:	2244      	movs	r2, #68	; 0x44
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	f001 f93d 	bl	8009f64 <memcpy>
 8008cea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008cee:	f000 fb25 	bl	800933c <LCD_SetCursor>
	if(isSelected)	sprintf(lcdBuff,"-Gdn1-a:%03d p:%02x",sends.angle,sends.pid_kp);
 8008cf2:	79fb      	ldrb	r3, [r7, #7]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d007      	beq.n	8008d08 <printToLcdDrv1Transmit+0x48>
 8008cf8:	89bb      	ldrh	r3, [r7, #12]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	7abb      	ldrb	r3, [r7, #10]
 8008cfe:	4926      	ldr	r1, [pc, #152]	; (8008d98 <printToLcdDrv1Transmit+0xd8>)
 8008d00:	4826      	ldr	r0, [pc, #152]	; (8008d9c <printToLcdDrv1Transmit+0xdc>)
 8008d02:	f001 f945 	bl	8009f90 <siprintf>
 8008d06:	e006      	b.n	8008d16 <printToLcdDrv1Transmit+0x56>
	else sprintf(lcdBuff,"Gdn1 a:%03d p:%02x",sends.angle,sends.pid_kp);
 8008d08:	89bb      	ldrh	r3, [r7, #12]
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	7abb      	ldrb	r3, [r7, #10]
 8008d0e:	4924      	ldr	r1, [pc, #144]	; (8008da0 <printToLcdDrv1Transmit+0xe0>)
 8008d10:	4822      	ldr	r0, [pc, #136]	; (8008d9c <printToLcdDrv1Transmit+0xdc>)
 8008d12:	f001 f93d 	bl	8009f90 <siprintf>
	LCD_Send_String(LCD_I2C_CHANNEL1,lcdBuff,STR_NOSLIDE);
 8008d16:	4c1f      	ldr	r4, [pc, #124]	; (8008d94 <printToLcdDrv1Transmit+0xd4>)
 8008d18:	2300      	movs	r3, #0
 8008d1a:	9312      	str	r3, [sp, #72]	; 0x48
 8008d1c:	4b1f      	ldr	r3, [pc, #124]	; (8008d9c <printToLcdDrv1Transmit+0xdc>)
 8008d1e:	9311      	str	r3, [sp, #68]	; 0x44
 8008d20:	4668      	mov	r0, sp
 8008d22:	f104 0310 	add.w	r3, r4, #16
 8008d26:	2244      	movs	r2, #68	; 0x44
 8008d28:	4619      	mov	r1, r3
 8008d2a:	f001 f91b 	bl	8009f64 <memcpy>
 8008d2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008d32:	f000 fb43 	bl	80093bc <LCD_Send_String>
	LCD_SetCursor(LCD_I2C_CHANNEL1,2,1);
 8008d36:	4c17      	ldr	r4, [pc, #92]	; (8008d94 <printToLcdDrv1Transmit+0xd4>)
 8008d38:	2301      	movs	r3, #1
 8008d3a:	9312      	str	r3, [sp, #72]	; 0x48
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	9311      	str	r3, [sp, #68]	; 0x44
 8008d40:	4668      	mov	r0, sp
 8008d42:	f104 0310 	add.w	r3, r4, #16
 8008d46:	2244      	movs	r2, #68	; 0x44
 8008d48:	4619      	mov	r1, r3
 8008d4a:	f001 f90b 	bl	8009f64 <memcpy>
 8008d4e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008d52:	f000 faf3 	bl	800933c <LCD_SetCursor>
	sprintf(lcdBuff,"i:%02x d:%02x f:%02x",sends.pid_ki,sends.pid_kd,sends.factor);
 8008d56:	7a7b      	ldrb	r3, [r7, #9]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	7a3b      	ldrb	r3, [r7, #8]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	7afb      	ldrb	r3, [r7, #11]
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	460b      	mov	r3, r1
 8008d64:	490f      	ldr	r1, [pc, #60]	; (8008da4 <printToLcdDrv1Transmit+0xe4>)
 8008d66:	480d      	ldr	r0, [pc, #52]	; (8008d9c <printToLcdDrv1Transmit+0xdc>)
 8008d68:	f001 f912 	bl	8009f90 <siprintf>
	LCD_Send_String(LCD_I2C_CHANNEL1,lcdBuff,STR_NOSLIDE);
 8008d6c:	4c09      	ldr	r4, [pc, #36]	; (8008d94 <printToLcdDrv1Transmit+0xd4>)
 8008d6e:	2300      	movs	r3, #0
 8008d70:	9312      	str	r3, [sp, #72]	; 0x48
 8008d72:	4b0a      	ldr	r3, [pc, #40]	; (8008d9c <printToLcdDrv1Transmit+0xdc>)
 8008d74:	9311      	str	r3, [sp, #68]	; 0x44
 8008d76:	4668      	mov	r0, sp
 8008d78:	f104 0310 	add.w	r3, r4, #16
 8008d7c:	2244      	movs	r2, #68	; 0x44
 8008d7e:	4619      	mov	r1, r3
 8008d80:	f001 f8f0 	bl	8009f64 <memcpy>
 8008d84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008d88:	f000 fb18 	bl	80093bc <LCD_Send_String>
}
 8008d8c:	bf00      	nop
 8008d8e:	3714      	adds	r7, #20
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd90      	pop	{r4, r7, pc}
 8008d94:	20004a58 	.word	0x20004a58
 8008d98:	0800a854 	.word	0x0800a854
 8008d9c:	20004cf4 	.word	0x20004cf4
 8008da0:	0800a868 	.word	0x0800a868
 8008da4:	0800a83c 	.word	0x0800a83c

08008da8 <printToLcdDrv2Receive>:
void printToLcdDrv2Receive(tMD_interface gets,bool isSelected){
 8008da8:	b590      	push	{r4, r7, lr}
 8008daa:	b099      	sub	sp, #100	; 0x64
 8008dac:	af14      	add	r7, sp, #80	; 0x50
 8008dae:	1d3c      	adds	r4, r7, #4
 8008db0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008db4:	70fb      	strb	r3, [r7, #3]
	LCD_SetCursor(LCD_I2C_CHANNEL2,1,1);
 8008db6:	4c31      	ldr	r4, [pc, #196]	; (8008e7c <printToLcdDrv2Receive+0xd4>)
 8008db8:	2301      	movs	r3, #1
 8008dba:	9312      	str	r3, [sp, #72]	; 0x48
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	9311      	str	r3, [sp, #68]	; 0x44
 8008dc0:	4668      	mov	r0, sp
 8008dc2:	f104 0310 	add.w	r3, r4, #16
 8008dc6:	2244      	movs	r2, #68	; 0x44
 8008dc8:	4619      	mov	r1, r3
 8008dca:	f001 f8cb 	bl	8009f64 <memcpy>
 8008dce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008dd2:	f000 fab3 	bl	800933c <LCD_SetCursor>
	if(isSelected)	sprintf(lcdBuff,"-Gln2-a:%05d s%01d",gets.speed,gets.soft_f);
 8008dd6:	78fb      	ldrb	r3, [r7, #3]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d008      	beq.n	8008dee <printToLcdDrv2Receive+0x46>
 8008ddc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008de0:	461a      	mov	r2, r3
 8008de2:	7abb      	ldrb	r3, [r7, #10]
 8008de4:	4926      	ldr	r1, [pc, #152]	; (8008e80 <printToLcdDrv2Receive+0xd8>)
 8008de6:	4827      	ldr	r0, [pc, #156]	; (8008e84 <printToLcdDrv2Receive+0xdc>)
 8008de8:	f001 f8d2 	bl	8009f90 <siprintf>
 8008dec:	e007      	b.n	8008dfe <printToLcdDrv2Receive+0x56>
	else	sprintf(lcdBuff,"Gln2 a:%05d s%01d",gets.speed,gets.soft_f);
 8008dee:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008df2:	461a      	mov	r2, r3
 8008df4:	7abb      	ldrb	r3, [r7, #10]
 8008df6:	4924      	ldr	r1, [pc, #144]	; (8008e88 <printToLcdDrv2Receive+0xe0>)
 8008df8:	4822      	ldr	r0, [pc, #136]	; (8008e84 <printToLcdDrv2Receive+0xdc>)
 8008dfa:	f001 f8c9 	bl	8009f90 <siprintf>
	LCD_Send_String(LCD_I2C_CHANNEL2,lcdBuff,STR_NOSLIDE);
 8008dfe:	4c1f      	ldr	r4, [pc, #124]	; (8008e7c <printToLcdDrv2Receive+0xd4>)
 8008e00:	2300      	movs	r3, #0
 8008e02:	9312      	str	r3, [sp, #72]	; 0x48
 8008e04:	4b1f      	ldr	r3, [pc, #124]	; (8008e84 <printToLcdDrv2Receive+0xdc>)
 8008e06:	9311      	str	r3, [sp, #68]	; 0x44
 8008e08:	4668      	mov	r0, sp
 8008e0a:	f104 0310 	add.w	r3, r4, #16
 8008e0e:	2244      	movs	r2, #68	; 0x44
 8008e10:	4619      	mov	r1, r3
 8008e12:	f001 f8a7 	bl	8009f64 <memcpy>
 8008e16:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008e1a:	f000 facf 	bl	80093bc <LCD_Send_String>
	LCD_SetCursor(LCD_I2C_CHANNEL2,2,1);
 8008e1e:	4c17      	ldr	r4, [pc, #92]	; (8008e7c <printToLcdDrv2Receive+0xd4>)
 8008e20:	2301      	movs	r3, #1
 8008e22:	9312      	str	r3, [sp, #72]	; 0x48
 8008e24:	2302      	movs	r3, #2
 8008e26:	9311      	str	r3, [sp, #68]	; 0x44
 8008e28:	4668      	mov	r0, sp
 8008e2a:	f104 0310 	add.w	r3, r4, #16
 8008e2e:	2244      	movs	r2, #68	; 0x44
 8008e30:	4619      	mov	r1, r3
 8008e32:	f001 f897 	bl	8009f64 <memcpy>
 8008e36:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008e3a:	f000 fa7f 	bl	800933c <LCD_SetCursor>
	sprintf(lcdBuff,"p:%02x i:%02x d:%02x",gets.pid_kp,gets.pid_ki,gets.pid_kd);
 8008e3e:	793b      	ldrb	r3, [r7, #4]
 8008e40:	461a      	mov	r2, r3
 8008e42:	797b      	ldrb	r3, [r7, #5]
 8008e44:	4619      	mov	r1, r3
 8008e46:	79bb      	ldrb	r3, [r7, #6]
 8008e48:	9300      	str	r3, [sp, #0]
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	490f      	ldr	r1, [pc, #60]	; (8008e8c <printToLcdDrv2Receive+0xe4>)
 8008e4e:	480d      	ldr	r0, [pc, #52]	; (8008e84 <printToLcdDrv2Receive+0xdc>)
 8008e50:	f001 f89e 	bl	8009f90 <siprintf>
	LCD_Send_String(LCD_I2C_CHANNEL2,lcdBuff,STR_NOSLIDE);
 8008e54:	4c09      	ldr	r4, [pc, #36]	; (8008e7c <printToLcdDrv2Receive+0xd4>)
 8008e56:	2300      	movs	r3, #0
 8008e58:	9312      	str	r3, [sp, #72]	; 0x48
 8008e5a:	4b0a      	ldr	r3, [pc, #40]	; (8008e84 <printToLcdDrv2Receive+0xdc>)
 8008e5c:	9311      	str	r3, [sp, #68]	; 0x44
 8008e5e:	4668      	mov	r0, sp
 8008e60:	f104 0310 	add.w	r3, r4, #16
 8008e64:	2244      	movs	r2, #68	; 0x44
 8008e66:	4619      	mov	r1, r3
 8008e68:	f001 f87c 	bl	8009f64 <memcpy>
 8008e6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008e70:	f000 faa4 	bl	80093bc <LCD_Send_String>
}
 8008e74:	bf00      	nop
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd90      	pop	{r4, r7, pc}
 8008e7c:	20004aac 	.word	0x20004aac
 8008e80:	0800a87c 	.word	0x0800a87c
 8008e84:	20004cf4 	.word	0x20004cf4
 8008e88:	0800a890 	.word	0x0800a890
 8008e8c:	0800a8a4 	.word	0x0800a8a4

08008e90 <printToLcdDrv2Transmit>:
void printToLcdDrv2Transmit(tMD_interface sends,bool isSelected){
 8008e90:	b590      	push	{r4, r7, lr}
 8008e92:	b099      	sub	sp, #100	; 0x64
 8008e94:	af14      	add	r7, sp, #80	; 0x50
 8008e96:	1d3c      	adds	r4, r7, #4
 8008e98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008e9c:	70fb      	strb	r3, [r7, #3]
	LCD_SetCursor(LCD_I2C_CHANNEL2,1,1);
 8008e9e:	4c31      	ldr	r4, [pc, #196]	; (8008f64 <printToLcdDrv2Transmit+0xd4>)
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	9312      	str	r3, [sp, #72]	; 0x48
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	9311      	str	r3, [sp, #68]	; 0x44
 8008ea8:	4668      	mov	r0, sp
 8008eaa:	f104 0310 	add.w	r3, r4, #16
 8008eae:	2244      	movs	r2, #68	; 0x44
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	f001 f857 	bl	8009f64 <memcpy>
 8008eb6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008eba:	f000 fa3f 	bl	800933c <LCD_SetCursor>
	if(isSelected)	sprintf(lcdBuff,"-Gdn2-a:%05d s%01d",sends.speed,sends.soft_f);
 8008ebe:	78fb      	ldrb	r3, [r7, #3]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d008      	beq.n	8008ed6 <printToLcdDrv2Transmit+0x46>
 8008ec4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008ec8:	461a      	mov	r2, r3
 8008eca:	7abb      	ldrb	r3, [r7, #10]
 8008ecc:	4926      	ldr	r1, [pc, #152]	; (8008f68 <printToLcdDrv2Transmit+0xd8>)
 8008ece:	4827      	ldr	r0, [pc, #156]	; (8008f6c <printToLcdDrv2Transmit+0xdc>)
 8008ed0:	f001 f85e 	bl	8009f90 <siprintf>
 8008ed4:	e007      	b.n	8008ee6 <printToLcdDrv2Transmit+0x56>
	else	sprintf(lcdBuff,"Gdn2 a:%05d s%01d",sends.speed,sends.soft_f);
 8008ed6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008eda:	461a      	mov	r2, r3
 8008edc:	7abb      	ldrb	r3, [r7, #10]
 8008ede:	4924      	ldr	r1, [pc, #144]	; (8008f70 <printToLcdDrv2Transmit+0xe0>)
 8008ee0:	4822      	ldr	r0, [pc, #136]	; (8008f6c <printToLcdDrv2Transmit+0xdc>)
 8008ee2:	f001 f855 	bl	8009f90 <siprintf>
	LCD_Send_String(LCD_I2C_CHANNEL2,lcdBuff,STR_NOSLIDE);
 8008ee6:	4c1f      	ldr	r4, [pc, #124]	; (8008f64 <printToLcdDrv2Transmit+0xd4>)
 8008ee8:	2300      	movs	r3, #0
 8008eea:	9312      	str	r3, [sp, #72]	; 0x48
 8008eec:	4b1f      	ldr	r3, [pc, #124]	; (8008f6c <printToLcdDrv2Transmit+0xdc>)
 8008eee:	9311      	str	r3, [sp, #68]	; 0x44
 8008ef0:	4668      	mov	r0, sp
 8008ef2:	f104 0310 	add.w	r3, r4, #16
 8008ef6:	2244      	movs	r2, #68	; 0x44
 8008ef8:	4619      	mov	r1, r3
 8008efa:	f001 f833 	bl	8009f64 <memcpy>
 8008efe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008f02:	f000 fa5b 	bl	80093bc <LCD_Send_String>
	LCD_SetCursor(LCD_I2C_CHANNEL2,2,1);
 8008f06:	4c17      	ldr	r4, [pc, #92]	; (8008f64 <printToLcdDrv2Transmit+0xd4>)
 8008f08:	2301      	movs	r3, #1
 8008f0a:	9312      	str	r3, [sp, #72]	; 0x48
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	9311      	str	r3, [sp, #68]	; 0x44
 8008f10:	4668      	mov	r0, sp
 8008f12:	f104 0310 	add.w	r3, r4, #16
 8008f16:	2244      	movs	r2, #68	; 0x44
 8008f18:	4619      	mov	r1, r3
 8008f1a:	f001 f823 	bl	8009f64 <memcpy>
 8008f1e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008f22:	f000 fa0b 	bl	800933c <LCD_SetCursor>
	sprintf(lcdBuff,"p:%02x i:%02x d:%02x",sends.pid_kp,sends.pid_ki,sends.pid_kd);
 8008f26:	793b      	ldrb	r3, [r7, #4]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	797b      	ldrb	r3, [r7, #5]
 8008f2c:	4619      	mov	r1, r3
 8008f2e:	79bb      	ldrb	r3, [r7, #6]
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	460b      	mov	r3, r1
 8008f34:	490f      	ldr	r1, [pc, #60]	; (8008f74 <printToLcdDrv2Transmit+0xe4>)
 8008f36:	480d      	ldr	r0, [pc, #52]	; (8008f6c <printToLcdDrv2Transmit+0xdc>)
 8008f38:	f001 f82a 	bl	8009f90 <siprintf>
	LCD_Send_String(LCD_I2C_CHANNEL2,lcdBuff,STR_NOSLIDE);
 8008f3c:	4c09      	ldr	r4, [pc, #36]	; (8008f64 <printToLcdDrv2Transmit+0xd4>)
 8008f3e:	2300      	movs	r3, #0
 8008f40:	9312      	str	r3, [sp, #72]	; 0x48
 8008f42:	4b0a      	ldr	r3, [pc, #40]	; (8008f6c <printToLcdDrv2Transmit+0xdc>)
 8008f44:	9311      	str	r3, [sp, #68]	; 0x44
 8008f46:	4668      	mov	r0, sp
 8008f48:	f104 0310 	add.w	r3, r4, #16
 8008f4c:	2244      	movs	r2, #68	; 0x44
 8008f4e:	4619      	mov	r1, r3
 8008f50:	f001 f808 	bl	8009f64 <memcpy>
 8008f54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008f58:	f000 fa30 	bl	80093bc <LCD_Send_String>
}
 8008f5c:	bf00      	nop
 8008f5e:	3714      	adds	r7, #20
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd90      	pop	{r4, r7, pc}
 8008f64:	20004aac 	.word	0x20004aac
 8008f68:	0800a8bc 	.word	0x0800a8bc
 8008f6c:	20004cf4 	.word	0x20004cf4
 8008f70:	0800a8d0 	.word	0x0800a8d0
 8008f74:	0800a8a4 	.word	0x0800a8a4

08008f78 <cleanTheLcd>:
void cleanTheLcd(void){
 8008f78:	b590      	push	{r4, r7, lr}
 8008f7a:	b093      	sub	sp, #76	; 0x4c
 8008f7c:	af12      	add	r7, sp, #72	; 0x48
	LCD_Clear(LCD_I2C_CHANNEL1);
 8008f7e:	4c0e      	ldr	r4, [pc, #56]	; (8008fb8 <cleanTheLcd+0x40>)
 8008f80:	4668      	mov	r0, sp
 8008f82:	f104 0310 	add.w	r3, r4, #16
 8008f86:	2244      	movs	r2, #68	; 0x44
 8008f88:	4619      	mov	r1, r3
 8008f8a:	f000 ffeb 	bl	8009f64 <memcpy>
 8008f8e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008f92:	f000 f9a9 	bl	80092e8 <LCD_Clear>
	LCD_Clear(LCD_I2C_CHANNEL2);
 8008f96:	4c09      	ldr	r4, [pc, #36]	; (8008fbc <cleanTheLcd+0x44>)
 8008f98:	4668      	mov	r0, sp
 8008f9a:	f104 0310 	add.w	r3, r4, #16
 8008f9e:	2244      	movs	r2, #68	; 0x44
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	f000 ffdf 	bl	8009f64 <memcpy>
 8008fa6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008faa:	f000 f99d 	bl	80092e8 <LCD_Clear>
}
 8008fae:	bf00      	nop
 8008fb0:	3704      	adds	r7, #4
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd90      	pop	{r4, r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20004a58 	.word	0x20004a58
 8008fbc:	20004aac 	.word	0x20004aac

08008fc0 <lcdController>:
void lcdController(void){
 8008fc0:	b590      	push	{r4, r7, lr}
 8008fc2:	b087      	sub	sp, #28
 8008fc4:	af00      	add	r7, sp, #0
	static mD_interface temp1;
	static tMD_interface temp2;
	static uint8_t itemVal=0,statuVal=0;
	if(0==statuVal){
 8008fc6:	4b50      	ldr	r3, [pc, #320]	; (8009108 <lcdController+0x148>)
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d147      	bne.n	800905e <lcdController+0x9e>
		if(0==itemVal){
 8008fce:	4b4f      	ldr	r3, [pc, #316]	; (800910c <lcdController+0x14c>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d122      	bne.n	800901c <lcdController+0x5c>
			temp1=getDriver1TransmitVal();
 8008fd6:	4c4e      	ldr	r4, [pc, #312]	; (8009110 <lcdController+0x150>)
 8008fd8:	f107 0310 	add.w	r3, r7, #16
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7ff fd25 	bl	8008a2c <getDriver1TransmitVal>
 8008fe2:	4622      	mov	r2, r4
 8008fe4:	f107 0310 	add.w	r3, r7, #16
 8008fe8:	6818      	ldr	r0, [r3, #0]
 8008fea:	6010      	str	r0, [r2, #0]
 8008fec:	889b      	ldrh	r3, [r3, #4]
 8008fee:	8093      	strh	r3, [r2, #4]
			printToLcdDrv1Transmit(temp1,true);
 8008ff0:	4b47      	ldr	r3, [pc, #284]	; (8009110 <lcdController+0x150>)
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008ff8:	f7ff fe62 	bl	8008cc0 <printToLcdDrv1Transmit>
			temp2=getDriver2TransmitVal();
 8008ffc:	4c45      	ldr	r4, [pc, #276]	; (8009114 <lcdController+0x154>)
 8008ffe:	463b      	mov	r3, r7
 8009000:	4618      	mov	r0, r3
 8009002:	f7ff fd25 	bl	8008a50 <getDriver2TransmitVal>
 8009006:	463b      	mov	r3, r7
 8009008:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800900c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			printToLcdDrv2Transmit(temp2,false);
 8009010:	4a40      	ldr	r2, [pc, #256]	; (8009114 <lcdController+0x154>)
 8009012:	2300      	movs	r3, #0
 8009014:	ca07      	ldmia	r2, {r0, r1, r2}
 8009016:	f7ff ff3b 	bl	8008e90 <printToLcdDrv2Transmit>
 800901a:	e065      	b.n	80090e8 <lcdController+0x128>

		}else{
			temp1=getDriver1ReceiveVal();
 800901c:	4c3c      	ldr	r4, [pc, #240]	; (8009110 <lcdController+0x150>)
 800901e:	463b      	mov	r3, r7
 8009020:	4618      	mov	r0, r3
 8009022:	f000 fdf7 	bl	8009c14 <getDriver1ReceiveVal>
 8009026:	4622      	mov	r2, r4
 8009028:	463b      	mov	r3, r7
 800902a:	6818      	ldr	r0, [r3, #0]
 800902c:	6010      	str	r0, [r2, #0]
 800902e:	889b      	ldrh	r3, [r3, #4]
 8009030:	8093      	strh	r3, [r2, #4]
			printToLcdDrv1Receive(temp1,true);
 8009032:	4b37      	ldr	r3, [pc, #220]	; (8009110 <lcdController+0x150>)
 8009034:	2201      	movs	r2, #1
 8009036:	e893 0003 	ldmia.w	r3, {r0, r1}
 800903a:	f7ff fdcd 	bl	8008bd8 <printToLcdDrv1Receive>
			temp2=getDriver2ReceiveVal();
 800903e:	4c35      	ldr	r4, [pc, #212]	; (8009114 <lcdController+0x154>)
 8009040:	463b      	mov	r3, r7
 8009042:	4618      	mov	r0, r3
 8009044:	f000 fdf8 	bl	8009c38 <getDriver2ReceiveVal>
 8009048:	463b      	mov	r3, r7
 800904a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800904e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			printToLcdDrv2Receive(temp2,false);
 8009052:	4a30      	ldr	r2, [pc, #192]	; (8009114 <lcdController+0x154>)
 8009054:	2300      	movs	r3, #0
 8009056:	ca07      	ldmia	r2, {r0, r1, r2}
 8009058:	f7ff fea6 	bl	8008da8 <printToLcdDrv2Receive>
 800905c:	e044      	b.n	80090e8 <lcdController+0x128>
		}
	}
	else{
		if(0==itemVal){
 800905e:	4b2b      	ldr	r3, [pc, #172]	; (800910c <lcdController+0x14c>)
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d120      	bne.n	80090a8 <lcdController+0xe8>
			temp2=getDriver2TransmitVal();
 8009066:	4c2b      	ldr	r4, [pc, #172]	; (8009114 <lcdController+0x154>)
 8009068:	463b      	mov	r3, r7
 800906a:	4618      	mov	r0, r3
 800906c:	f7ff fcf0 	bl	8008a50 <getDriver2TransmitVal>
 8009070:	463b      	mov	r3, r7
 8009072:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009076:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			printToLcdDrv2Transmit(temp2,true);
 800907a:	4a26      	ldr	r2, [pc, #152]	; (8009114 <lcdController+0x154>)
 800907c:	2301      	movs	r3, #1
 800907e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009080:	f7ff ff06 	bl	8008e90 <printToLcdDrv2Transmit>
			temp1=getDriver1TransmitVal();
 8009084:	4c22      	ldr	r4, [pc, #136]	; (8009110 <lcdController+0x150>)
 8009086:	463b      	mov	r3, r7
 8009088:	4618      	mov	r0, r3
 800908a:	f7ff fccf 	bl	8008a2c <getDriver1TransmitVal>
 800908e:	4622      	mov	r2, r4
 8009090:	463b      	mov	r3, r7
 8009092:	6818      	ldr	r0, [r3, #0]
 8009094:	6010      	str	r0, [r2, #0]
 8009096:	889b      	ldrh	r3, [r3, #4]
 8009098:	8093      	strh	r3, [r2, #4]
			printToLcdDrv1Transmit(temp1,false);
 800909a:	4b1d      	ldr	r3, [pc, #116]	; (8009110 <lcdController+0x150>)
 800909c:	2200      	movs	r2, #0
 800909e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80090a2:	f7ff fe0d 	bl	8008cc0 <printToLcdDrv1Transmit>
 80090a6:	e01f      	b.n	80090e8 <lcdController+0x128>

		}else{
			temp2=getDriver2ReceiveVal();
 80090a8:	4c1a      	ldr	r4, [pc, #104]	; (8009114 <lcdController+0x154>)
 80090aa:	463b      	mov	r3, r7
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 fdc3 	bl	8009c38 <getDriver2ReceiveVal>
 80090b2:	463b      	mov	r3, r7
 80090b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80090b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			printToLcdDrv2Receive(temp2,true);
 80090bc:	4a15      	ldr	r2, [pc, #84]	; (8009114 <lcdController+0x154>)
 80090be:	2301      	movs	r3, #1
 80090c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80090c2:	f7ff fe71 	bl	8008da8 <printToLcdDrv2Receive>
			temp1=getDriver1ReceiveVal();
 80090c6:	4c12      	ldr	r4, [pc, #72]	; (8009110 <lcdController+0x150>)
 80090c8:	463b      	mov	r3, r7
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 fda2 	bl	8009c14 <getDriver1ReceiveVal>
 80090d0:	4622      	mov	r2, r4
 80090d2:	463b      	mov	r3, r7
 80090d4:	6818      	ldr	r0, [r3, #0]
 80090d6:	6010      	str	r0, [r2, #0]
 80090d8:	889b      	ldrh	r3, [r3, #4]
 80090da:	8093      	strh	r3, [r2, #4]
			printToLcdDrv1Receive(temp1,false);
 80090dc:	4b0c      	ldr	r3, [pc, #48]	; (8009110 <lcdController+0x150>)
 80090de:	2200      	movs	r2, #0
 80090e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80090e4:	f7ff fd78 	bl	8008bd8 <printToLcdDrv1Receive>
		}
	}
	statuVal=getSelectedLcdVal();
 80090e8:	f7ff fcc4 	bl	8008a74 <getSelectedLcdVal>
 80090ec:	4603      	mov	r3, r0
 80090ee:	461a      	mov	r2, r3
 80090f0:	4b05      	ldr	r3, [pc, #20]	; (8009108 <lcdController+0x148>)
 80090f2:	701a      	strb	r2, [r3, #0]
	itemVal=getSelectedLcdItemVal();
 80090f4:	f7ff fcca 	bl	8008a8c <getSelectedLcdItemVal>
 80090f8:	4603      	mov	r3, r0
 80090fa:	461a      	mov	r2, r3
 80090fc:	4b03      	ldr	r3, [pc, #12]	; (800910c <lcdController+0x14c>)
 80090fe:	701a      	strb	r2, [r3, #0]
}
 8009100:	bf00      	nop
 8009102:	371c      	adds	r7, #28
 8009104:	46bd      	mov	sp, r7
 8009106:	bd90      	pop	{r4, r7, pc}
 8009108:	200049ba 	.word	0x200049ba
 800910c:	200049bb 	.word	0x200049bb
 8009110:	200049bc 	.word	0x200049bc
 8009114:	200049c4 	.word	0x200049c4

08009118 <LCD_i2cDeviceCheck>:
/**
*@brief: Lcd i2c device check.
*@retval: none
*/
void LCD_i2cDeviceCheck(I2C_HandleTypeDef hi2cx)
{
 8009118:	b084      	sub	sp, #16
 800911a:	b580      	push	{r7, lr}
 800911c:	af00      	add	r7, sp, #0
 800911e:	f107 0c08 	add.w	ip, r7, #8
 8009122:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	/* Checks if target device is ready for communication. */
	/* 3 is number of trials, 1000ms is timeout */
	HAL_Delay(50);
 8009126:	2032      	movs	r0, #50	; 0x32
 8009128:	f7f8 fcca 	bl	8001ac0 <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&hi2cx, i2cDeviceAddr, 3, 1000) != HAL_OK) 
 800912c:	bf00      	nop
 800912e:	4b0a      	ldr	r3, [pc, #40]	; (8009158 <LCD_i2cDeviceCheck+0x40>)
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	b299      	uxth	r1, r3
 8009134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009138:	2203      	movs	r2, #3
 800913a:	f107 0008 	add.w	r0, r7, #8
 800913e:	f7f9 fdc9 	bl	8002cd4 <HAL_I2C_IsDeviceReady>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1f2      	bne.n	800912e <LCD_i2cDeviceCheck+0x16>
	{	
		
	}
}
 8009148:	bf00      	nop
 800914a:	bf00      	nop
 800914c:	46bd      	mov	sp, r7
 800914e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009152:	b004      	add	sp, #16
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	20000011 	.word	0x20000011

0800915c <LCD_Set_Command>:
/**
*@brief: Send commands to lcd.
*@retval: none
*/
void LCD_Set_Command(I2C_HandleTypeDef hi2cx,uint8_t cmd)
{
 800915c:	b084      	sub	sp, #16
 800915e:	b580      	push	{r7, lr}
 8009160:	b082      	sub	sp, #8
 8009162:	af02      	add	r7, sp, #8
 8009164:	f107 0c08 	add.w	ip, r7, #8
 8009168:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	data_M = cmd & Mask_Data;        //Most significant bit
 800916c:	4b25      	ldr	r3, [pc, #148]	; (8009204 <LCD_Set_Command+0xa8>)
 800916e:	781a      	ldrb	r2, [r3, #0]
 8009170:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009174:	4013      	ands	r3, r2
 8009176:	b2da      	uxtb	r2, r3
 8009178:	4b23      	ldr	r3, [pc, #140]	; (8009208 <LCD_Set_Command+0xac>)
 800917a:	701a      	strb	r2, [r3, #0]
	data_L = (cmd << 4) & Mask_Data; //Least significant bit
 800917c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009180:	011b      	lsls	r3, r3, #4
 8009182:	b25a      	sxtb	r2, r3
 8009184:	4b1f      	ldr	r3, [pc, #124]	; (8009204 <LCD_Set_Command+0xa8>)
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	b25b      	sxtb	r3, r3
 800918a:	4013      	ands	r3, r2
 800918c:	b25b      	sxtb	r3, r3
 800918e:	b2da      	uxtb	r2, r3
 8009190:	4b1e      	ldr	r3, [pc, #120]	; (800920c <LCD_Set_Command+0xb0>)
 8009192:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 8009194:	4b1c      	ldr	r3, [pc, #112]	; (8009208 <LCD_Set_Command+0xac>)
 8009196:	781a      	ldrb	r2, [r3, #0]
 8009198:	4b1d      	ldr	r3, [pc, #116]	; (8009210 <LCD_Set_Command+0xb4>)
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	4313      	orrs	r3, r2
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	4b19      	ldr	r3, [pc, #100]	; (8009208 <LCD_Set_Command+0xac>)
 80091a2:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 80091a4:	4b19      	ldr	r3, [pc, #100]	; (800920c <LCD_Set_Command+0xb0>)
 80091a6:	781a      	ldrb	r2, [r3, #0]
 80091a8:	4b19      	ldr	r3, [pc, #100]	; (8009210 <LCD_Set_Command+0xb4>)
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	4b16      	ldr	r3, [pc, #88]	; (800920c <LCD_Set_Command+0xb0>)
 80091b2:	701a      	strb	r2, [r3, #0]
	
	data[0] = data_M | LCD_E;  //Enable E pin, RS=0
 80091b4:	4b14      	ldr	r3, [pc, #80]	; (8009208 <LCD_Set_Command+0xac>)
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	f043 0304 	orr.w	r3, r3, #4
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	4b15      	ldr	r3, [pc, #84]	; (8009214 <LCD_Set_Command+0xb8>)
 80091c0:	701a      	strb	r2, [r3, #0]
	data[1] = data_M;          //Disable E pin, RS=0
 80091c2:	4b11      	ldr	r3, [pc, #68]	; (8009208 <LCD_Set_Command+0xac>)
 80091c4:	781a      	ldrb	r2, [r3, #0]
 80091c6:	4b13      	ldr	r3, [pc, #76]	; (8009214 <LCD_Set_Command+0xb8>)
 80091c8:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E;
 80091ca:	4b10      	ldr	r3, [pc, #64]	; (800920c <LCD_Set_Command+0xb0>)
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	f043 0304 	orr.w	r3, r3, #4
 80091d2:	b2da      	uxtb	r2, r3
 80091d4:	4b0f      	ldr	r3, [pc, #60]	; (8009214 <LCD_Set_Command+0xb8>)
 80091d6:	709a      	strb	r2, [r3, #2]
  data[3] = data_L;
 80091d8:	4b0c      	ldr	r3, [pc, #48]	; (800920c <LCD_Set_Command+0xb0>)
 80091da:	781a      	ldrb	r2, [r3, #0]
 80091dc:	4b0d      	ldr	r3, [pc, #52]	; (8009214 <LCD_Set_Command+0xb8>)
 80091de:	70da      	strb	r2, [r3, #3]
	
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 80091e0:	4b0d      	ldr	r3, [pc, #52]	; (8009218 <LCD_Set_Command+0xbc>)
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	b299      	uxth	r1, r3
 80091e6:	23c8      	movs	r3, #200	; 0xc8
 80091e8:	9300      	str	r3, [sp, #0]
 80091ea:	2304      	movs	r3, #4
 80091ec:	4a09      	ldr	r2, [pc, #36]	; (8009214 <LCD_Set_Command+0xb8>)
 80091ee:	f107 0008 	add.w	r0, r7, #8
 80091f2:	f7f9 fc71 	bl	8002ad8 <HAL_I2C_Master_Transmit>
}
 80091f6:	bf00      	nop
 80091f8:	46bd      	mov	sp, r7
 80091fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091fe:	b004      	add	sp, #16
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	20000012 	.word	0x20000012
 8009208:	200049d4 	.word	0x200049d4
 800920c:	200049d5 	.word	0x200049d5
 8009210:	200049d6 	.word	0x200049d6
 8009214:	200049d0 	.word	0x200049d0
 8009218:	20000011 	.word	0x20000011

0800921c <LCD_Write_Data>:
/**
*@brief: Write data to lcd.
*@retval: none
*/
void LCD_Write_Data(I2C_HandleTypeDef hi2cx,uint8_t datax)
{
 800921c:	b084      	sub	sp, #16
 800921e:	b580      	push	{r7, lr}
 8009220:	b082      	sub	sp, #8
 8009222:	af02      	add	r7, sp, #8
 8009224:	f107 0c08 	add.w	ip, r7, #8
 8009228:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	data_M = datax & Mask_Data;        //Most significant bit
 800922c:	4b28      	ldr	r3, [pc, #160]	; (80092d0 <LCD_Write_Data+0xb4>)
 800922e:	781a      	ldrb	r2, [r3, #0]
 8009230:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009234:	4013      	ands	r3, r2
 8009236:	b2da      	uxtb	r2, r3
 8009238:	4b26      	ldr	r3, [pc, #152]	; (80092d4 <LCD_Write_Data+0xb8>)
 800923a:	701a      	strb	r2, [r3, #0]
	data_L = (datax << 4) & Mask_Data; //Least significant bit
 800923c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009240:	011b      	lsls	r3, r3, #4
 8009242:	b25a      	sxtb	r2, r3
 8009244:	4b22      	ldr	r3, [pc, #136]	; (80092d0 <LCD_Write_Data+0xb4>)
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	b25b      	sxtb	r3, r3
 800924a:	4013      	ands	r3, r2
 800924c:	b25b      	sxtb	r3, r3
 800924e:	b2da      	uxtb	r2, r3
 8009250:	4b21      	ldr	r3, [pc, #132]	; (80092d8 <LCD_Write_Data+0xbc>)
 8009252:	701a      	strb	r2, [r3, #0]
	
	//For backlight On/off
	data_M |= data_BL;
 8009254:	4b1f      	ldr	r3, [pc, #124]	; (80092d4 <LCD_Write_Data+0xb8>)
 8009256:	781a      	ldrb	r2, [r3, #0]
 8009258:	4b20      	ldr	r3, [pc, #128]	; (80092dc <LCD_Write_Data+0xc0>)
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	4313      	orrs	r3, r2
 800925e:	b2da      	uxtb	r2, r3
 8009260:	4b1c      	ldr	r3, [pc, #112]	; (80092d4 <LCD_Write_Data+0xb8>)
 8009262:	701a      	strb	r2, [r3, #0]
	data_L |= data_BL;
 8009264:	4b1c      	ldr	r3, [pc, #112]	; (80092d8 <LCD_Write_Data+0xbc>)
 8009266:	781a      	ldrb	r2, [r3, #0]
 8009268:	4b1c      	ldr	r3, [pc, #112]	; (80092dc <LCD_Write_Data+0xc0>)
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	4313      	orrs	r3, r2
 800926e:	b2da      	uxtb	r2, r3
 8009270:	4b19      	ldr	r3, [pc, #100]	; (80092d8 <LCD_Write_Data+0xbc>)
 8009272:	701a      	strb	r2, [r3, #0]
	 	
	data[0] = data_M | LCD_E|LCD_RS;  //Enable E pin, RS=1
 8009274:	4b17      	ldr	r3, [pc, #92]	; (80092d4 <LCD_Write_Data+0xb8>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	f043 0305 	orr.w	r3, r3, #5
 800927c:	b2da      	uxtb	r2, r3
 800927e:	4b18      	ldr	r3, [pc, #96]	; (80092e0 <LCD_Write_Data+0xc4>)
 8009280:	701a      	strb	r2, [r3, #0]
	data[1] = data_M | LCD_RS;        //Disable E pin, RS=1
 8009282:	4b14      	ldr	r3, [pc, #80]	; (80092d4 <LCD_Write_Data+0xb8>)
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	f043 0301 	orr.w	r3, r3, #1
 800928a:	b2da      	uxtb	r2, r3
 800928c:	4b14      	ldr	r3, [pc, #80]	; (80092e0 <LCD_Write_Data+0xc4>)
 800928e:	705a      	strb	r2, [r3, #1]
	data[2] = data_L | LCD_E|LCD_RS;
 8009290:	4b11      	ldr	r3, [pc, #68]	; (80092d8 <LCD_Write_Data+0xbc>)
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	f043 0305 	orr.w	r3, r3, #5
 8009298:	b2da      	uxtb	r2, r3
 800929a:	4b11      	ldr	r3, [pc, #68]	; (80092e0 <LCD_Write_Data+0xc4>)
 800929c:	709a      	strb	r2, [r3, #2]
  data[3] = data_L | LCD_RS;  
 800929e:	4b0e      	ldr	r3, [pc, #56]	; (80092d8 <LCD_Write_Data+0xbc>)
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	f043 0301 	orr.w	r3, r3, #1
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	4b0d      	ldr	r3, [pc, #52]	; (80092e0 <LCD_Write_Data+0xc4>)
 80092aa:	70da      	strb	r2, [r3, #3]
	
	HAL_I2C_Master_Transmit(&hi2cx, i2cDeviceAddr, (uint8_t*)data, 4, 200);
 80092ac:	4b0d      	ldr	r3, [pc, #52]	; (80092e4 <LCD_Write_Data+0xc8>)
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	b299      	uxth	r1, r3
 80092b2:	23c8      	movs	r3, #200	; 0xc8
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	2304      	movs	r3, #4
 80092b8:	4a09      	ldr	r2, [pc, #36]	; (80092e0 <LCD_Write_Data+0xc4>)
 80092ba:	f107 0008 	add.w	r0, r7, #8
 80092be:	f7f9 fc0b 	bl	8002ad8 <HAL_I2C_Master_Transmit>
}
 80092c2:	bf00      	nop
 80092c4:	46bd      	mov	sp, r7
 80092c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80092ca:	b004      	add	sp, #16
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	20000012 	.word	0x20000012
 80092d4:	200049d4 	.word	0x200049d4
 80092d8:	200049d5 	.word	0x200049d5
 80092dc:	200049d6 	.word	0x200049d6
 80092e0:	200049d0 	.word	0x200049d0
 80092e4:	20000011 	.word	0x20000011

080092e8 <LCD_Clear>:
/**
*@brief: Clear lcd display.
*@retval: none
*/
void LCD_Clear(I2C_HandleTypeDef hi2cx)
{
 80092e8:	b084      	sub	sp, #16
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b092      	sub	sp, #72	; 0x48
 80092ee:	af12      	add	r7, sp, #72	; 0x48
 80092f0:	f107 0c08 	add.w	ip, r7, #8
 80092f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_Set_Command(hi2cx,LCD_CLEAR_DISPLAY);
 80092f8:	2301      	movs	r3, #1
 80092fa:	9311      	str	r3, [sp, #68]	; 0x44
 80092fc:	4668      	mov	r0, sp
 80092fe:	f107 0318 	add.w	r3, r7, #24
 8009302:	2244      	movs	r2, #68	; 0x44
 8009304:	4619      	mov	r1, r3
 8009306:	f000 fe2d 	bl	8009f64 <memcpy>
 800930a:	f107 0308 	add.w	r3, r7, #8
 800930e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009310:	f7ff ff24 	bl	800915c <LCD_Set_Command>
	HAL_Delay(10);
 8009314:	200a      	movs	r0, #10
 8009316:	f7f8 fbd3 	bl	8001ac0 <HAL_Delay>
	str_len = 0;
 800931a:	4b06      	ldr	r3, [pc, #24]	; (8009334 <LCD_Clear+0x4c>)
 800931c:	2200      	movs	r2, #0
 800931e:	701a      	strb	r2, [r3, #0]
	line_pos = 1;
 8009320:	4b05      	ldr	r3, [pc, #20]	; (8009338 <LCD_Clear+0x50>)
 8009322:	2201      	movs	r2, #1
 8009324:	701a      	strb	r2, [r3, #0]
}
 8009326:	bf00      	nop
 8009328:	46bd      	mov	sp, r7
 800932a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800932e:	b004      	add	sp, #16
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	200049d7 	.word	0x200049d7
 8009338:	20000013 	.word	0x20000013

0800933c <LCD_SetCursor>:
*@brief: Set lcd cursor position.
*@param: line_x: line no, chr_x: character no.
*@retval: none
*/
void LCD_SetCursor(I2C_HandleTypeDef hi2cx,int line_x, int chr_x)
{
 800933c:	b084      	sub	sp, #16
 800933e:	b580      	push	{r7, lr}
 8009340:	b092      	sub	sp, #72	; 0x48
 8009342:	af12      	add	r7, sp, #72	; 0x48
 8009344:	f107 0c08 	add.w	ip, r7, #8
 8009348:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  line_pos = line_x; //hold line position.	
 800934c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800934e:	b2da      	uxtb	r2, r3
 8009350:	4b18      	ldr	r3, [pc, #96]	; (80093b4 <LCD_SetCursor+0x78>)
 8009352:	701a      	strb	r2, [r3, #0]
	
	if(((line_x >=1 && line_x <= line_MAX) && (chr_x >=1 && chr_x <= chr_MAX)))
 8009354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009356:	2b00      	cmp	r3, #0
 8009358:	dd25      	ble.n	80093a6 <LCD_SetCursor+0x6a>
 800935a:	2302      	movs	r3, #2
 800935c:	461a      	mov	r2, r3
 800935e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009360:	4293      	cmp	r3, r2
 8009362:	dc20      	bgt.n	80093a6 <LCD_SetCursor+0x6a>
 8009364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009366:	2b00      	cmp	r3, #0
 8009368:	dd1d      	ble.n	80093a6 <LCD_SetCursor+0x6a>
 800936a:	2310      	movs	r3, #16
 800936c:	461a      	mov	r2, r3
 800936e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009370:	4293      	cmp	r3, r2
 8009372:	dc18      	bgt.n	80093a6 <LCD_SetCursor+0x6a>
	{		
		LCD_Set_Command(hi2cx,LCD_SET_DDRAMADDR | Cursor_Data[line_x - 1][chr_x - 1]);
 8009374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009376:	1e5a      	subs	r2, r3, #1
 8009378:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800937a:	3b01      	subs	r3, #1
 800937c:	490e      	ldr	r1, [pc, #56]	; (80093b8 <LCD_SetCursor+0x7c>)
 800937e:	0112      	lsls	r2, r2, #4
 8009380:	440a      	add	r2, r1
 8009382:	4413      	add	r3, r2
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800938a:	b2db      	uxtb	r3, r3
 800938c:	9311      	str	r3, [sp, #68]	; 0x44
 800938e:	4668      	mov	r0, sp
 8009390:	f107 0318 	add.w	r3, r7, #24
 8009394:	2244      	movs	r2, #68	; 0x44
 8009396:	4619      	mov	r1, r3
 8009398:	f000 fde4 	bl	8009f64 <memcpy>
 800939c:	f107 0308 	add.w	r3, r7, #8
 80093a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80093a2:	f7ff fedb 	bl	800915c <LCD_Set_Command>
	}
}
 80093a6:	bf00      	nop
 80093a8:	46bd      	mov	sp, r7
 80093aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093ae:	b004      	add	sp, #16
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	20000013 	.word	0x20000013
 80093b8:	0800a98c 	.word	0x0800a98c

080093bc <LCD_Send_String>:
*@brief: Send string data to lcd.
*@param: str[]: string array, mode: str slide/noslide.
*@retval: none
*/
void LCD_Send_String(I2C_HandleTypeDef hi2cx,char str[], uint8_t mode)
{	 
 80093bc:	b084      	sub	sp, #16
 80093be:	b590      	push	{r4, r7, lr}
 80093c0:	b09d      	sub	sp, #116	; 0x74
 80093c2:	af14      	add	r7, sp, #80	; 0x50
 80093c4:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80093c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80093cc:	466b      	mov	r3, sp
 80093ce:	461c      	mov	r4, r3
	char *buffer[BFR_MAX];
 80093d0:	2364      	movs	r3, #100	; 0x64
 80093d2:	3b01      	subs	r3, #1
 80093d4:	617b      	str	r3, [r7, #20]
 80093d6:	2364      	movs	r3, #100	; 0x64
 80093d8:	b2d8      	uxtb	r0, r3
 80093da:	f04f 0100 	mov.w	r1, #0
 80093de:	f04f 0200 	mov.w	r2, #0
 80093e2:	f04f 0300 	mov.w	r3, #0
 80093e6:	014b      	lsls	r3, r1, #5
 80093e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80093ec:	0142      	lsls	r2, r0, #5
 80093ee:	2364      	movs	r3, #100	; 0x64
 80093f0:	b2d8      	uxtb	r0, r3
 80093f2:	f04f 0100 	mov.w	r1, #0
 80093f6:	f04f 0200 	mov.w	r2, #0
 80093fa:	f04f 0300 	mov.w	r3, #0
 80093fe:	014b      	lsls	r3, r1, #5
 8009400:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009404:	0142      	lsls	r2, r0, #5
 8009406:	2364      	movs	r3, #100	; 0x64
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	3307      	adds	r3, #7
 800940c:	08db      	lsrs	r3, r3, #3
 800940e:	00db      	lsls	r3, r3, #3
 8009410:	ebad 0d03 	sub.w	sp, sp, r3
 8009414:	ab14      	add	r3, sp, #80	; 0x50
 8009416:	3303      	adds	r3, #3
 8009418:	089b      	lsrs	r3, r3, #2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	613b      	str	r3, [r7, #16]
	uint8_t i[4] = {chr_MAX,chr_MAX,chr_MAX,chr_MAX}; //i follows the ch position while sliding.
 800941e:	2310      	movs	r3, #16
 8009420:	723b      	strb	r3, [r7, #8]
 8009422:	2310      	movs	r3, #16
 8009424:	727b      	strb	r3, [r7, #9]
 8009426:	2310      	movs	r3, #16
 8009428:	72bb      	strb	r3, [r7, #10]
 800942a:	2310      	movs	r3, #16
 800942c:	72fb      	strb	r3, [r7, #11]
   uint8_t c[4] = {0, 0, 0, 0}; //c follows the each ch of the str buffer while sliding.
 800942e:	2300      	movs	r3, #0
 8009430:	607b      	str	r3, [r7, #4]
   uint8_t ch_len = 0; //follow the string lenght.
 8009432:	2300      	movs	r3, #0
 8009434:	73fb      	strb	r3, [r7, #15]
  str_len = 0;
 8009436:	4b79      	ldr	r3, [pc, #484]	; (800961c <LCD_Send_String+0x260>)
 8009438:	2200      	movs	r2, #0
 800943a:	701a      	strb	r2, [r3, #0]
	

	switch(mode)
 800943c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8009440:	2b00      	cmp	r3, #0
 8009442:	d035      	beq.n	80094b0 <LCD_Send_String+0xf4>
 8009444:	2b01      	cmp	r3, #1
 8009446:	d039      	beq.n	80094bc <LCD_Send_String+0x100>
 8009448:	e0e0      	b.n	800960c <LCD_Send_String+0x250>
	{			
		case STR_NOSLIDE:
			
			while (*str) 
			{
				LCD_Write_Data (hi2cx,*str++);
 800944a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800944e:	1c5a      	adds	r2, r3, #1
 8009450:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	9311      	str	r3, [sp, #68]	; 0x44
 8009458:	4668      	mov	r0, sp
 800945a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800945e:	2244      	movs	r2, #68	; 0x44
 8009460:	4619      	mov	r1, r3
 8009462:	f000 fd7f 	bl	8009f64 <memcpy>
 8009466:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800946a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800946c:	f7ff fed6 	bl	800921c <LCD_Write_Data>
				str_len++;
 8009470:	4b6a      	ldr	r3, [pc, #424]	; (800961c <LCD_Send_String+0x260>)
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	3301      	adds	r3, #1
 8009476:	b2da      	uxtb	r2, r3
 8009478:	4b68      	ldr	r3, [pc, #416]	; (800961c <LCD_Send_String+0x260>)
 800947a:	701a      	strb	r2, [r3, #0]
				if(str_len == chr_MAX)
 800947c:	4b67      	ldr	r3, [pc, #412]	; (800961c <LCD_Send_String+0x260>)
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	2210      	movs	r2, #16
 8009482:	4293      	cmp	r3, r2
 8009484:	d114      	bne.n	80094b0 <LCD_Send_String+0xf4>
				{
					LCD_SetCursor(hi2cx,line_pos + 1, 1);
 8009486:	4b66      	ldr	r3, [pc, #408]	; (8009620 <LCD_Send_String+0x264>)
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	3301      	adds	r3, #1
 800948c:	2201      	movs	r2, #1
 800948e:	9212      	str	r2, [sp, #72]	; 0x48
 8009490:	9311      	str	r3, [sp, #68]	; 0x44
 8009492:	4668      	mov	r0, sp
 8009494:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009498:	2244      	movs	r2, #68	; 0x44
 800949a:	4619      	mov	r1, r3
 800949c:	f000 fd62 	bl	8009f64 <memcpy>
 80094a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80094a6:	f7ff ff49 	bl	800933c <LCD_SetCursor>
					str_len = 0;
 80094aa:	4b5c      	ldr	r3, [pc, #368]	; (800961c <LCD_Send_String+0x260>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	701a      	strb	r2, [r3, #0]
			while (*str) 
 80094b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1c7      	bne.n	800944a <LCD_Send_String+0x8e>
				}			
			}	
			
			break;
 80094ba:	e0a7      	b.n	800960c <LCD_Send_String+0x250>
		
		case STR_SLIDE:
		
		  for(int a = 0; a < BFR_MAX; a++)
 80094bc:	2300      	movs	r3, #0
 80094be:	61bb      	str	r3, [r7, #24]
 80094c0:	e00b      	b.n	80094da <LCD_Send_String+0x11e>
		  buffer[a]=str++;
 80094c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094c6:	1c5a      	adds	r2, r3, #1
 80094c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80094cc:	693a      	ldr	r2, [r7, #16]
 80094ce:	69b9      	ldr	r1, [r7, #24]
 80094d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		  for(int a = 0; a < BFR_MAX; a++)
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	3301      	adds	r3, #1
 80094d8:	61bb      	str	r3, [r7, #24]
 80094da:	2364      	movs	r3, #100	; 0x64
 80094dc:	461a      	mov	r2, r3
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	4293      	cmp	r3, r2
 80094e2:	dbee      	blt.n	80094c2 <LCD_Send_String+0x106>
						
			ch_len = strlen(*buffer);
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7f6 fe71 	bl	80001d0 <strlen>
 80094ee:	4603      	mov	r3, r0
 80094f0:	73fb      	strb	r3, [r7, #15]
				 		
			LCD_SetCursor(hi2cx,line_pos, i[line_pos - 1]);
 80094f2:	4b4b      	ldr	r3, [pc, #300]	; (8009620 <LCD_Send_String+0x264>)
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	461a      	mov	r2, r3
 80094f8:	4b49      	ldr	r3, [pc, #292]	; (8009620 <LCD_Send_String+0x264>)
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	3b01      	subs	r3, #1
 80094fe:	f107 0120 	add.w	r1, r7, #32
 8009502:	440b      	add	r3, r1
 8009504:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009508:	9312      	str	r3, [sp, #72]	; 0x48
 800950a:	9211      	str	r2, [sp, #68]	; 0x44
 800950c:	4668      	mov	r0, sp
 800950e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009512:	2244      	movs	r2, #68	; 0x44
 8009514:	4619      	mov	r1, r3
 8009516:	f000 fd25 	bl	8009f64 <memcpy>
 800951a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800951e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009520:	f7ff ff0c 	bl	800933c <LCD_SetCursor>
				  			
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 8009524:	4b3e      	ldr	r3, [pc, #248]	; (8009620 <LCD_Send_String+0x264>)
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	3b01      	subs	r3, #1
 800952a:	f107 0220 	add.w	r2, r7, #32
 800952e:	4413      	add	r3, r2
 8009530:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8009534:	61fb      	str	r3, [r7, #28]
 8009536:	e014      	b.n	8009562 <LCD_Send_String+0x1a6>
			LCD_Write_Data (hi2cx,*buffer[k]);
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	69fa      	ldr	r2, [r7, #28]
 800953c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	9311      	str	r3, [sp, #68]	; 0x44
 8009544:	4668      	mov	r0, sp
 8009546:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800954a:	2244      	movs	r2, #68	; 0x44
 800954c:	4619      	mov	r1, r3
 800954e:	f000 fd09 	bl	8009f64 <memcpy>
 8009552:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009556:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009558:	f7ff fe60 	bl	800921c <LCD_Write_Data>
			for(int k = c[line_pos - 1];k < ch_len; k++) 
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	3301      	adds	r3, #1
 8009560:	61fb      	str	r3, [r7, #28]
 8009562:	7bfb      	ldrb	r3, [r7, #15]
 8009564:	69fa      	ldr	r2, [r7, #28]
 8009566:	429a      	cmp	r2, r3
 8009568:	dbe6      	blt.n	8009538 <LCD_Send_String+0x17c>
								
			i[line_pos - 1]--;
 800956a:	4b2d      	ldr	r3, [pc, #180]	; (8009620 <LCD_Send_String+0x264>)
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	3b01      	subs	r3, #1
 8009570:	f107 0220 	add.w	r2, r7, #32
 8009574:	441a      	add	r2, r3
 8009576:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800957a:	3a01      	subs	r2, #1
 800957c:	b2d2      	uxtb	r2, r2
 800957e:	f107 0120 	add.w	r1, r7, #32
 8009582:	440b      	add	r3, r1
 8009584:	f803 2c18 	strb.w	r2, [r3, #-24]
      
			if(i[line_pos -1] == 0)
 8009588:	4b25      	ldr	r3, [pc, #148]	; (8009620 <LCD_Send_String+0x264>)
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	3b01      	subs	r3, #1
 800958e:	f107 0220 	add.w	r2, r7, #32
 8009592:	4413      	add	r3, r2
 8009594:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d136      	bne.n	800960a <LCD_Send_String+0x24e>
			{
				i[line_pos - 1] = 1;
 800959c:	4b20      	ldr	r3, [pc, #128]	; (8009620 <LCD_Send_String+0x264>)
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	3b01      	subs	r3, #1
 80095a2:	f107 0220 	add.w	r2, r7, #32
 80095a6:	4413      	add	r3, r2
 80095a8:	2201      	movs	r2, #1
 80095aa:	f803 2c18 	strb.w	r2, [r3, #-24]
				c[line_pos - 1]++;
 80095ae:	4b1c      	ldr	r3, [pc, #112]	; (8009620 <LCD_Send_String+0x264>)
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	f107 0220 	add.w	r2, r7, #32
 80095b8:	441a      	add	r2, r3
 80095ba:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80095be:	3201      	adds	r2, #1
 80095c0:	b2d2      	uxtb	r2, r2
 80095c2:	f107 0120 	add.w	r1, r7, #32
 80095c6:	440b      	add	r3, r1
 80095c8:	f803 2c1c 	strb.w	r2, [r3, #-28]
        if(c[line_pos - 1] == ch_len)
 80095cc:	4b14      	ldr	r3, [pc, #80]	; (8009620 <LCD_Send_String+0x264>)
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	3b01      	subs	r3, #1
 80095d2:	f107 0220 	add.w	r2, r7, #32
 80095d6:	4413      	add	r3, r2
 80095d8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80095dc:	7bfa      	ldrb	r2, [r7, #15]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d113      	bne.n	800960a <LCD_Send_String+0x24e>
					{					
						i[line_pos - 1] = chr_MAX;
 80095e2:	4b0f      	ldr	r3, [pc, #60]	; (8009620 <LCD_Send_String+0x264>)
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	3b01      	subs	r3, #1
 80095e8:	2210      	movs	r2, #16
 80095ea:	f107 0120 	add.w	r1, r7, #32
 80095ee:	440b      	add	r3, r1
 80095f0:	f803 2c18 	strb.w	r2, [r3, #-24]
						c[line_pos - 1] = 0;
 80095f4:	4b0a      	ldr	r3, [pc, #40]	; (8009620 <LCD_Send_String+0x264>)
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	f107 0220 	add.w	r2, r7, #32
 80095fe:	4413      	add	r3, r2
 8009600:	2200      	movs	r2, #0
 8009602:	f803 2c1c 	strb.w	r2, [r3, #-28]
						ch_len = 0;						
 8009606:	2300      	movs	r3, #0
 8009608:	73fb      	strb	r3, [r7, #15]
					}												
			}
		 			
			break;	 
 800960a:	bf00      	nop
 800960c:	46a5      	mov	sp, r4
	}	
}
 800960e:	bf00      	nop
 8009610:	3724      	adds	r7, #36	; 0x24
 8009612:	46bd      	mov	sp, r7
 8009614:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009618:	b004      	add	sp, #16
 800961a:	4770      	bx	lr
 800961c:	200049d7 	.word	0x200049d7
 8009620:	20000013 	.word	0x20000013

08009624 <LCD_BackLight>:
*@brief: Backlight control
*@param: light_state: BL on/off
*@retval: none
*/
void LCD_BackLight(I2C_HandleTypeDef hi2cx,uint8_t light_state)
{
 8009624:	b084      	sub	sp, #16
 8009626:	b580      	push	{r7, lr}
 8009628:	b092      	sub	sp, #72	; 0x48
 800962a:	af12      	add	r7, sp, #72	; 0x48
 800962c:	f107 0c08 	add.w	ip, r7, #8
 8009630:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if(light_state == LCD_BL_ON)
 8009634:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009638:	2b08      	cmp	r3, #8
 800963a:	d111      	bne.n	8009660 <LCD_BackLight+0x3c>
	{
    data_BL = LCD_BL_ON;		
 800963c:	4b16      	ldr	r3, [pc, #88]	; (8009698 <LCD_BackLight+0x74>)
 800963e:	2208      	movs	r2, #8
 8009640:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(hi2cx,0x20); //Empty character
 8009642:	2320      	movs	r3, #32
 8009644:	9311      	str	r3, [sp, #68]	; 0x44
 8009646:	4668      	mov	r0, sp
 8009648:	f107 0318 	add.w	r3, r7, #24
 800964c:	2244      	movs	r2, #68	; 0x44
 800964e:	4619      	mov	r1, r3
 8009650:	f000 fc88 	bl	8009f64 <memcpy>
 8009654:	f107 0308 	add.w	r3, r7, #8
 8009658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800965a:	f7ff fddf 	bl	800921c <LCD_Write_Data>
	else if (light_state == LCD_BL_OFF)
	{
		data_BL = LCD_BL_OFF;
		LCD_Write_Data(hi2cx,0x20);
	}
}
 800965e:	e014      	b.n	800968a <LCD_BackLight+0x66>
	else if (light_state == LCD_BL_OFF)
 8009660:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8009664:	2b00      	cmp	r3, #0
 8009666:	d110      	bne.n	800968a <LCD_BackLight+0x66>
		data_BL = LCD_BL_OFF;
 8009668:	4b0b      	ldr	r3, [pc, #44]	; (8009698 <LCD_BackLight+0x74>)
 800966a:	2200      	movs	r2, #0
 800966c:	701a      	strb	r2, [r3, #0]
		LCD_Write_Data(hi2cx,0x20);
 800966e:	2320      	movs	r3, #32
 8009670:	9311      	str	r3, [sp, #68]	; 0x44
 8009672:	4668      	mov	r0, sp
 8009674:	f107 0318 	add.w	r3, r7, #24
 8009678:	2244      	movs	r2, #68	; 0x44
 800967a:	4619      	mov	r1, r3
 800967c:	f000 fc72 	bl	8009f64 <memcpy>
 8009680:	f107 0308 	add.w	r3, r7, #8
 8009684:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009686:	f7ff fdc9 	bl	800921c <LCD_Write_Data>
}
 800968a:	bf00      	nop
 800968c:	46bd      	mov	sp, r7
 800968e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009692:	b004      	add	sp, #16
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	200049d6 	.word	0x200049d6

0800969c <LCD_Init>:
/**
*@brief: Lcd initiliazing settings.
*@retval: none
*/
void LCD_Init(I2C_HandleTypeDef hi2cx)
{
 800969c:	b084      	sub	sp, #16
 800969e:	b580      	push	{r7, lr}
 80096a0:	b092      	sub	sp, #72	; 0x48
 80096a2:	af12      	add	r7, sp, #72	; 0x48
 80096a4:	f107 0c08 	add.w	ip, r7, #8
 80096a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	LCD_Set_Command(hi2cx,LCD_CLEAR_DISPLAY);
 80096ac:	2301      	movs	r3, #1
 80096ae:	9311      	str	r3, [sp, #68]	; 0x44
 80096b0:	4668      	mov	r0, sp
 80096b2:	f107 0318 	add.w	r3, r7, #24
 80096b6:	2244      	movs	r2, #68	; 0x44
 80096b8:	4619      	mov	r1, r3
 80096ba:	f000 fc53 	bl	8009f64 <memcpy>
 80096be:	f107 0308 	add.w	r3, r7, #8
 80096c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80096c4:	f7ff fd4a 	bl	800915c <LCD_Set_Command>
	HAL_Delay(1000);
 80096c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80096cc:	f7f8 f9f8 	bl	8001ac0 <HAL_Delay>
	LCD_Set_Command(hi2cx,LCD_RETURN_HOME);
 80096d0:	2302      	movs	r3, #2
 80096d2:	9311      	str	r3, [sp, #68]	; 0x44
 80096d4:	4668      	mov	r0, sp
 80096d6:	f107 0318 	add.w	r3, r7, #24
 80096da:	2244      	movs	r2, #68	; 0x44
 80096dc:	4619      	mov	r1, r3
 80096de:	f000 fc41 	bl	8009f64 <memcpy>
 80096e2:	f107 0308 	add.w	r3, r7, #8
 80096e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80096e8:	f7ff fd38 	bl	800915c <LCD_Set_Command>
	HAL_Delay(5);
 80096ec:	2005      	movs	r0, #5
 80096ee:	f7f8 f9e7 	bl	8001ac0 <HAL_Delay>
	LCD_Set_Command(hi2cx,LCD_FUNCTION_SET|MODE_4B|MODE_2L|MODE_5X8_DOTS);
 80096f2:	2328      	movs	r3, #40	; 0x28
 80096f4:	9311      	str	r3, [sp, #68]	; 0x44
 80096f6:	4668      	mov	r0, sp
 80096f8:	f107 0318 	add.w	r3, r7, #24
 80096fc:	2244      	movs	r2, #68	; 0x44
 80096fe:	4619      	mov	r1, r3
 8009700:	f000 fc30 	bl	8009f64 <memcpy>
 8009704:	f107 0308 	add.w	r3, r7, #8
 8009708:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800970a:	f7ff fd27 	bl	800915c <LCD_Set_Command>
	HAL_Delay(5);
 800970e:	2005      	movs	r0, #5
 8009710:	f7f8 f9d6 	bl	8001ac0 <HAL_Delay>
	LCD_Set_Command(hi2cx,LCD_DISPLAY_CONTROL|DISPLAY_ON|CURSOR_OFF|BLINK_OFF);
 8009714:	230c      	movs	r3, #12
 8009716:	9311      	str	r3, [sp, #68]	; 0x44
 8009718:	4668      	mov	r0, sp
 800971a:	f107 0318 	add.w	r3, r7, #24
 800971e:	2244      	movs	r2, #68	; 0x44
 8009720:	4619      	mov	r1, r3
 8009722:	f000 fc1f 	bl	8009f64 <memcpy>
 8009726:	f107 0308 	add.w	r3, r7, #8
 800972a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800972c:	f7ff fd16 	bl	800915c <LCD_Set_Command>
	HAL_Delay(5);
 8009730:	2005      	movs	r0, #5
 8009732:	f7f8 f9c5 	bl	8001ac0 <HAL_Delay>
	LCD_Set_Command(hi2cx,LCD_SET_DDRAMADDR);
 8009736:	2380      	movs	r3, #128	; 0x80
 8009738:	9311      	str	r3, [sp, #68]	; 0x44
 800973a:	4668      	mov	r0, sp
 800973c:	f107 0318 	add.w	r3, r7, #24
 8009740:	2244      	movs	r2, #68	; 0x44
 8009742:	4619      	mov	r1, r3
 8009744:	f000 fc0e 	bl	8009f64 <memcpy>
 8009748:	f107 0308 	add.w	r3, r7, #8
 800974c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800974e:	f7ff fd05 	bl	800915c <LCD_Set_Command>
	HAL_Delay(500);
 8009752:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009756:	f7f8 f9b3 	bl	8001ac0 <HAL_Delay>
}
 800975a:	bf00      	nop
 800975c:	46bd      	mov	sp, r7
 800975e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009762:	b004      	add	sp, #16
 8009764:	4770      	bx	lr

08009766 <HAL_UART_RxCpltCallback>:

uint8_t rec1Buff[20];
uint8_t rec2Buff[20];
#endif

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8009766:	b580      	push	{r7, lr}
 8009768:	b082      	sub	sp, #8
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
	MDI_getDataChannel1_IT(huart);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f8a6 	bl	80098c0 <MDI_getDataChannel1_IT>
	MDI_getDataChannel2_IT(huart);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f9b3 	bl	8009ae0 <MDI_getDataChannel2_IT>
}
 800977a:	bf00      	nop
 800977c:	3708      	adds	r7, #8
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <MDI_writeSmallDataWithRegister>:
 * @brief Write small data to Motor Driver
 * @param uartChannel -> get uart channel
 * @param data -> data to write
 * @return none
 */
void MDI_writeSmallDataWithRegister(UART_HandleTypeDef *uartChannel, uint8_t data){
 8009782:	b480      	push	{r7}
 8009784:	b083      	sub	sp, #12
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	460b      	mov	r3, r1
 800978c:	70fb      	strb	r3, [r7, #3]
	while((uartChannel->Instance->SR & USART_SR_TXE)!=USART_SR_TXE);
 800978e:	bf00      	nop
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800979a:	2b80      	cmp	r3, #128	; 0x80
 800979c:	d1f8      	bne.n	8009790 <MDI_writeSmallDataWithRegister+0xe>
	uartChannel->Instance->DR=data;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	78fa      	ldrb	r2, [r7, #3]
 80097a4:	605a      	str	r2, [r3, #4]
	while((uartChannel->Instance->SR & USART_SR_TC)!=USART_SR_TC);
 80097a6:	bf00      	nop
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b2:	2b40      	cmp	r3, #64	; 0x40
 80097b4:	d1f8      	bne.n	80097a8 <MDI_writeSmallDataWithRegister+0x26>
}
 80097b6:	bf00      	nop
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <MDI_sendDataChannel1Ver2>:
 * @param kd -> get Pid kd value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel1Ver2(uint16_t angleVal, uint8_t kp, uint8_t ki,
		uint8_t kd, uint8_t factor) {
 80097c4:	b590      	push	{r4, r7, lr}
 80097c6:	b089      	sub	sp, #36	; 0x24
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4604      	mov	r4, r0
 80097cc:	4608      	mov	r0, r1
 80097ce:	4611      	mov	r1, r2
 80097d0:	461a      	mov	r2, r3
 80097d2:	4623      	mov	r3, r4
 80097d4:	80fb      	strh	r3, [r7, #6]
 80097d6:	4603      	mov	r3, r0
 80097d8:	717b      	strb	r3, [r7, #5]
 80097da:	460b      	mov	r3, r1
 80097dc:	713b      	strb	r3, [r7, #4]
 80097de:	4613      	mov	r3, r2
 80097e0:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp = 0;
 80097e2:	2300      	movs	r3, #0
 80097e4:	83bb      	strh	r3, [r7, #28]
	uint8_t tmpArr[] = { angleVal >> 8, angleVal & 0xFF };
 80097e6:	88fb      	ldrh	r3, [r7, #6]
 80097e8:	0a1b      	lsrs	r3, r3, #8
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	763b      	strb	r3, [r7, #24]
 80097f0:	88fb      	ldrh	r3, [r7, #6]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	767b      	strb	r3, [r7, #25]
	checksumTmp += tmpArr[0];
 80097f6:	7e3b      	ldrb	r3, [r7, #24]
 80097f8:	b29a      	uxth	r2, r3
 80097fa:	8bbb      	ldrh	r3, [r7, #28]
 80097fc:	4413      	add	r3, r2
 80097fe:	83bb      	strh	r3, [r7, #28]
	checksumTmp += tmpArr[1];
 8009800:	7e7b      	ldrb	r3, [r7, #25]
 8009802:	b29a      	uxth	r2, r3
 8009804:	8bbb      	ldrh	r3, [r7, #28]
 8009806:	4413      	add	r3, r2
 8009808:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kp;
 800980a:	797b      	ldrb	r3, [r7, #5]
 800980c:	b29a      	uxth	r2, r3
 800980e:	8bbb      	ldrh	r3, [r7, #28]
 8009810:	4413      	add	r3, r2
 8009812:	83bb      	strh	r3, [r7, #28]
	checksumTmp += ki;
 8009814:	793b      	ldrb	r3, [r7, #4]
 8009816:	b29a      	uxth	r2, r3
 8009818:	8bbb      	ldrh	r3, [r7, #28]
 800981a:	4413      	add	r3, r2
 800981c:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kd;
 800981e:	78fb      	ldrb	r3, [r7, #3]
 8009820:	b29a      	uxth	r2, r3
 8009822:	8bbb      	ldrh	r3, [r7, #28]
 8009824:	4413      	add	r3, r2
 8009826:	83bb      	strh	r3, [r7, #28]
	checksumTmp += factor;
 8009828:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800982c:	b29a      	uxth	r2, r3
 800982e:	8bbb      	ldrh	r3, [r7, #28]
 8009830:	4413      	add	r3, r2
 8009832:	83bb      	strh	r3, [r7, #28]
	uint8_t tmp = checksumTmp % 256;
 8009834:	8bbb      	ldrh	r3, [r7, #28]
 8009836:	76fb      	strb	r3, [r7, #27]
	uint8_t tmpComp = ~tmp;
 8009838:	7efb      	ldrb	r3, [r7, #27]
 800983a:	43db      	mvns	r3, r3
 800983c:	76bb      	strb	r3, [r7, #26]
	uint8_t sendBuff[10] = { 0XFF, 0XFF, tmpArr[0], tmpArr[1], kp, ki, kd,
 800983e:	23ff      	movs	r3, #255	; 0xff
 8009840:	733b      	strb	r3, [r7, #12]
 8009842:	23ff      	movs	r3, #255	; 0xff
 8009844:	737b      	strb	r3, [r7, #13]
 8009846:	7e3b      	ldrb	r3, [r7, #24]
 8009848:	73bb      	strb	r3, [r7, #14]
 800984a:	7e7b      	ldrb	r3, [r7, #25]
 800984c:	73fb      	strb	r3, [r7, #15]
 800984e:	797b      	ldrb	r3, [r7, #5]
 8009850:	743b      	strb	r3, [r7, #16]
 8009852:	793b      	ldrb	r3, [r7, #4]
 8009854:	747b      	strb	r3, [r7, #17]
 8009856:	78fb      	ldrb	r3, [r7, #3]
 8009858:	74bb      	strb	r3, [r7, #18]
 800985a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800985e:	74fb      	strb	r3, [r7, #19]
 8009860:	7efb      	ldrb	r3, [r7, #27]
 8009862:	753b      	strb	r3, [r7, #20]
 8009864:	7ebb      	ldrb	r3, [r7, #26]
 8009866:	757b      	strb	r3, [r7, #21]
			factor, tmp, tmpComp };
	for (uint8_t counter = 0; counter < 10; counter++) {
 8009868:	2300      	movs	r3, #0
 800986a:	77fb      	strb	r3, [r7, #31]
 800986c:	e00f      	b.n	800988e <MDI_sendDataChannel1Ver2+0xca>
		MDI_writeSmallDataWithRegister(&MDI_channel1TX, sendBuff[counter]);
 800986e:	7ffb      	ldrb	r3, [r7, #31]
 8009870:	f107 0220 	add.w	r2, r7, #32
 8009874:	4413      	add	r3, r2
 8009876:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800987a:	4619      	mov	r1, r3
 800987c:	4808      	ldr	r0, [pc, #32]	; (80098a0 <MDI_sendDataChannel1Ver2+0xdc>)
 800987e:	f7ff ff80 	bl	8009782 <MDI_writeSmallDataWithRegister>
		vTaskDelay(50);
 8009882:	2032      	movs	r0, #50	; 0x32
 8009884:	f7fc fe9a 	bl	80065bc <vTaskDelay>
	for (uint8_t counter = 0; counter < 10; counter++) {
 8009888:	7ffb      	ldrb	r3, [r7, #31]
 800988a:	3301      	adds	r3, #1
 800988c:	77fb      	strb	r3, [r7, #31]
 800988e:	7ffb      	ldrb	r3, [r7, #31]
 8009890:	2b09      	cmp	r3, #9
 8009892:	d9ec      	bls.n	800986e <MDI_sendDataChannel1Ver2+0xaa>
	}
}
 8009894:	bf00      	nop
 8009896:	bf00      	nop
 8009898:	3724      	adds	r7, #36	; 0x24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd90      	pop	{r4, r7, pc}
 800989e:	bf00      	nop
 80098a0:	20004bc8 	.word	0x20004bc8

080098a4 <MDI_enableGetDataChannel1>:
uint8_t  getTmpCH1 = 0;
/**
 * @brief set enable for MDI channel 1 receive
 * @return none
 */
void MDI_enableGetDataChannel1(void){
 80098a4:	b580      	push	{r7, lr}
 80098a6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&MDI_channel1RX,&getTmpCH1,1);
 80098a8:	2201      	movs	r2, #1
 80098aa:	4903      	ldr	r1, [pc, #12]	; (80098b8 <MDI_enableGetDataChannel1+0x14>)
 80098ac:	4803      	ldr	r0, [pc, #12]	; (80098bc <MDI_enableGetDataChannel1+0x18>)
 80098ae:	f7fa fe42 	bl	8004536 <HAL_UART_Receive_IT>
}
 80098b2:	bf00      	nop
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	200049d8 	.word	0x200049d8
 80098bc:	20004bc8 	.word	0x20004bc8

080098c0 <MDI_getDataChannel1_IT>:
static uint8_t tmpArr1[10];
/**
 * @brief get to Motor Driver 1 values
 * @return none
 */
void MDI_getDataChannel1_IT(UART_HandleTypeDef *callBackHandle) {
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle = &MDI_channel1RX;
 80098c8:	4b3b      	ldr	r3, [pc, #236]	; (80099b8 <MDI_getDataChannel1_IT+0xf8>)
 80098ca:	613b      	str	r3, [r7, #16]
	if(callBackHandle->Instance == tmpHandle->Instance){
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d16a      	bne.n	80099ae <MDI_getDataChannel1_IT+0xee>
		static uint8_t counter = 0, getTmpBeff = 0;
			if (0xFF == getTmpCH1 && 0xFF == getTmpBeff) {
 80098d8:	4b38      	ldr	r3, [pc, #224]	; (80099bc <MDI_getDataChannel1_IT+0xfc>)
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	2bff      	cmp	r3, #255	; 0xff
 80098de:	d10c      	bne.n	80098fa <MDI_getDataChannel1_IT+0x3a>
 80098e0:	4b37      	ldr	r3, [pc, #220]	; (80099c0 <MDI_getDataChannel1_IT+0x100>)
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	2bff      	cmp	r3, #255	; 0xff
 80098e6:	d108      	bne.n	80098fa <MDI_getDataChannel1_IT+0x3a>
					tmpArr1[0] = 0xFF;
 80098e8:	4b36      	ldr	r3, [pc, #216]	; (80099c4 <MDI_getDataChannel1_IT+0x104>)
 80098ea:	22ff      	movs	r2, #255	; 0xff
 80098ec:	701a      	strb	r2, [r3, #0]
					tmpArr1[1] = 0xFF;
 80098ee:	4b35      	ldr	r3, [pc, #212]	; (80099c4 <MDI_getDataChannel1_IT+0x104>)
 80098f0:	22ff      	movs	r2, #255	; 0xff
 80098f2:	705a      	strb	r2, [r3, #1]
					counter = 1;
 80098f4:	4b34      	ldr	r3, [pc, #208]	; (80099c8 <MDI_getDataChannel1_IT+0x108>)
 80098f6:	2201      	movs	r2, #1
 80098f8:	701a      	strb	r2, [r3, #0]
				}
				tmpArr1[counter] = getTmpCH1;
 80098fa:	4b33      	ldr	r3, [pc, #204]	; (80099c8 <MDI_getDataChannel1_IT+0x108>)
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	461a      	mov	r2, r3
 8009900:	4b2e      	ldr	r3, [pc, #184]	; (80099bc <MDI_getDataChannel1_IT+0xfc>)
 8009902:	7819      	ldrb	r1, [r3, #0]
 8009904:	4b2f      	ldr	r3, [pc, #188]	; (80099c4 <MDI_getDataChannel1_IT+0x104>)
 8009906:	5499      	strb	r1, [r3, r2]
				getTmpBeff = getTmpCH1;
 8009908:	4b2c      	ldr	r3, [pc, #176]	; (80099bc <MDI_getDataChannel1_IT+0xfc>)
 800990a:	781a      	ldrb	r2, [r3, #0]
 800990c:	4b2c      	ldr	r3, [pc, #176]	; (80099c0 <MDI_getDataChannel1_IT+0x100>)
 800990e:	701a      	strb	r2, [r3, #0]
				counter++;
 8009910:	4b2d      	ldr	r3, [pc, #180]	; (80099c8 <MDI_getDataChannel1_IT+0x108>)
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	3301      	adds	r3, #1
 8009916:	b2da      	uxtb	r2, r3
 8009918:	4b2b      	ldr	r3, [pc, #172]	; (80099c8 <MDI_getDataChannel1_IT+0x108>)
 800991a:	701a      	strb	r2, [r3, #0]
				if (counter > 9) {
 800991c:	4b2a      	ldr	r3, [pc, #168]	; (80099c8 <MDI_getDataChannel1_IT+0x108>)
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	2b09      	cmp	r3, #9
 8009922:	d93f      	bls.n	80099a4 <MDI_getDataChannel1_IT+0xe4>
					counter = 0;
 8009924:	4b28      	ldr	r3, [pc, #160]	; (80099c8 <MDI_getDataChannel1_IT+0x108>)
 8009926:	2200      	movs	r2, #0
 8009928:	701a      	strb	r2, [r3, #0]
					uint16_t checksumTmp = 0;
 800992a:	2300      	movs	r3, #0
 800992c:	82fb      	strh	r3, [r7, #22]
					for (uint8_t c = 2; c < 8; c++)
 800992e:	2302      	movs	r3, #2
 8009930:	757b      	strb	r3, [r7, #21]
 8009932:	e009      	b.n	8009948 <MDI_getDataChannel1_IT+0x88>
						checksumTmp += tmpArr1[c];
 8009934:	7d7b      	ldrb	r3, [r7, #21]
 8009936:	4a23      	ldr	r2, [pc, #140]	; (80099c4 <MDI_getDataChannel1_IT+0x104>)
 8009938:	5cd3      	ldrb	r3, [r2, r3]
 800993a:	b29a      	uxth	r2, r3
 800993c:	8afb      	ldrh	r3, [r7, #22]
 800993e:	4413      	add	r3, r2
 8009940:	82fb      	strh	r3, [r7, #22]
					for (uint8_t c = 2; c < 8; c++)
 8009942:	7d7b      	ldrb	r3, [r7, #21]
 8009944:	3301      	adds	r3, #1
 8009946:	757b      	strb	r3, [r7, #21]
 8009948:	7d7b      	ldrb	r3, [r7, #21]
 800994a:	2b07      	cmp	r3, #7
 800994c:	d9f2      	bls.n	8009934 <MDI_getDataChannel1_IT+0x74>
					uint8_t tmp = checksumTmp % 256;
 800994e:	8afb      	ldrh	r3, [r7, #22]
 8009950:	73fb      	strb	r3, [r7, #15]
					uint8_t tmpComp = ~tmp;
 8009952:	7bfb      	ldrb	r3, [r7, #15]
 8009954:	43db      	mvns	r3, r3
 8009956:	73bb      	strb	r3, [r7, #14]
					if (tmp == tmpArr1[8] && tmpComp == tmpArr1[9]) {
 8009958:	4b1a      	ldr	r3, [pc, #104]	; (80099c4 <MDI_getDataChannel1_IT+0x104>)
 800995a:	7a1b      	ldrb	r3, [r3, #8]
 800995c:	7bfa      	ldrb	r2, [r7, #15]
 800995e:	429a      	cmp	r2, r3
 8009960:	d120      	bne.n	80099a4 <MDI_getDataChannel1_IT+0xe4>
 8009962:	4b18      	ldr	r3, [pc, #96]	; (80099c4 <MDI_getDataChannel1_IT+0x104>)
 8009964:	7a5b      	ldrb	r3, [r3, #9]
 8009966:	7bba      	ldrb	r2, [r7, #14]
 8009968:	429a      	cmp	r2, r3
 800996a:	d11b      	bne.n	80099a4 <MDI_getDataChannel1_IT+0xe4>
						driver1.angle = ((uint16_t) tmpArr1[2] << 8) | tmpArr1[3];
 800996c:	4b15      	ldr	r3, [pc, #84]	; (80099c4 <MDI_getDataChannel1_IT+0x104>)
 800996e:	789b      	ldrb	r3, [r3, #2]
 8009970:	021b      	lsls	r3, r3, #8
 8009972:	b21a      	sxth	r2, r3
 8009974:	4b13      	ldr	r3, [pc, #76]	; (80099c4 <MDI_getDataChannel1_IT+0x104>)
 8009976:	78db      	ldrb	r3, [r3, #3]
 8009978:	b21b      	sxth	r3, r3
 800997a:	4313      	orrs	r3, r2
 800997c:	b21b      	sxth	r3, r3
 800997e:	b29a      	uxth	r2, r3
 8009980:	4b12      	ldr	r3, [pc, #72]	; (80099cc <MDI_getDataChannel1_IT+0x10c>)
 8009982:	809a      	strh	r2, [r3, #4]
						driver1.pid_kp = tmpArr1[4];
 8009984:	4b0f      	ldr	r3, [pc, #60]	; (80099c4 <MDI_getDataChannel1_IT+0x104>)
 8009986:	791a      	ldrb	r2, [r3, #4]
 8009988:	4b10      	ldr	r3, [pc, #64]	; (80099cc <MDI_getDataChannel1_IT+0x10c>)
 800998a:	709a      	strb	r2, [r3, #2]
						driver1.pid_ki = tmpArr1[5];
 800998c:	4b0d      	ldr	r3, [pc, #52]	; (80099c4 <MDI_getDataChannel1_IT+0x104>)
 800998e:	795a      	ldrb	r2, [r3, #5]
 8009990:	4b0e      	ldr	r3, [pc, #56]	; (80099cc <MDI_getDataChannel1_IT+0x10c>)
 8009992:	705a      	strb	r2, [r3, #1]
						driver1.pid_kd = tmpArr1[6];
 8009994:	4b0b      	ldr	r3, [pc, #44]	; (80099c4 <MDI_getDataChannel1_IT+0x104>)
 8009996:	799a      	ldrb	r2, [r3, #6]
 8009998:	4b0c      	ldr	r3, [pc, #48]	; (80099cc <MDI_getDataChannel1_IT+0x10c>)
 800999a:	701a      	strb	r2, [r3, #0]
						driver1.factor = tmpArr1[7];
 800999c:	4b09      	ldr	r3, [pc, #36]	; (80099c4 <MDI_getDataChannel1_IT+0x104>)
 800999e:	79da      	ldrb	r2, [r3, #7]
 80099a0:	4b0a      	ldr	r3, [pc, #40]	; (80099cc <MDI_getDataChannel1_IT+0x10c>)
 80099a2:	70da      	strb	r2, [r3, #3]
					}
				}
				HAL_UART_Receive_IT(callBackHandle, &getTmpCH1, 1);
 80099a4:	2201      	movs	r2, #1
 80099a6:	4905      	ldr	r1, [pc, #20]	; (80099bc <MDI_getDataChannel1_IT+0xfc>)
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7fa fdc4 	bl	8004536 <HAL_UART_Receive_IT>
	}
}
 80099ae:	bf00      	nop
 80099b0:	3718      	adds	r7, #24
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	20004bc8 	.word	0x20004bc8
 80099bc:	200049d8 	.word	0x200049d8
 80099c0:	200049f8 	.word	0x200049f8
 80099c4:	200049dc 	.word	0x200049dc
 80099c8:	200049f9 	.word	0x200049f9
 80099cc:	20004d10 	.word	0x20004d10

080099d0 <MDI_sendDataChannel2Ver2>:
 * @param kd -> get Pid kd value
 * @param factor -> get factor of Pid elements
 * @return none
 */
void MDI_sendDataChannel2Ver2(int16_t speed, uint8_t kp, uint8_t ki,uint8_t kd,
		uint8_t soft_k, uint8_t soft_f) {
 80099d0:	b590      	push	{r4, r7, lr}
 80099d2:	b089      	sub	sp, #36	; 0x24
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	4604      	mov	r4, r0
 80099d8:	4608      	mov	r0, r1
 80099da:	4611      	mov	r1, r2
 80099dc:	461a      	mov	r2, r3
 80099de:	4623      	mov	r3, r4
 80099e0:	80fb      	strh	r3, [r7, #6]
 80099e2:	4603      	mov	r3, r0
 80099e4:	717b      	strb	r3, [r7, #5]
 80099e6:	460b      	mov	r3, r1
 80099e8:	713b      	strb	r3, [r7, #4]
 80099ea:	4613      	mov	r3, r2
 80099ec:	70fb      	strb	r3, [r7, #3]
	uint16_t checksumTmp = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	83bb      	strh	r3, [r7, #28]
	uint8_t tmpArr[] = { speed >> 8, speed & 0xFF };
 80099f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099f6:	121b      	asrs	r3, r3, #8
 80099f8:	b21b      	sxth	r3, r3
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	763b      	strb	r3, [r7, #24]
 80099fe:	88fb      	ldrh	r3, [r7, #6]
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	767b      	strb	r3, [r7, #25]
	checksumTmp += tmpArr[0];
 8009a04:	7e3b      	ldrb	r3, [r7, #24]
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	8bbb      	ldrh	r3, [r7, #28]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	83bb      	strh	r3, [r7, #28]
	checksumTmp += tmpArr[1];
 8009a0e:	7e7b      	ldrb	r3, [r7, #25]
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	8bbb      	ldrh	r3, [r7, #28]
 8009a14:	4413      	add	r3, r2
 8009a16:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kp;
 8009a18:	797b      	ldrb	r3, [r7, #5]
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	8bbb      	ldrh	r3, [r7, #28]
 8009a1e:	4413      	add	r3, r2
 8009a20:	83bb      	strh	r3, [r7, #28]
	checksumTmp += ki;
 8009a22:	793b      	ldrb	r3, [r7, #4]
 8009a24:	b29a      	uxth	r2, r3
 8009a26:	8bbb      	ldrh	r3, [r7, #28]
 8009a28:	4413      	add	r3, r2
 8009a2a:	83bb      	strh	r3, [r7, #28]
	checksumTmp += kd;
 8009a2c:	78fb      	ldrb	r3, [r7, #3]
 8009a2e:	b29a      	uxth	r2, r3
 8009a30:	8bbb      	ldrh	r3, [r7, #28]
 8009a32:	4413      	add	r3, r2
 8009a34:	83bb      	strh	r3, [r7, #28]
	checksumTmp += soft_k;
 8009a36:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	8bbb      	ldrh	r3, [r7, #28]
 8009a3e:	4413      	add	r3, r2
 8009a40:	83bb      	strh	r3, [r7, #28]
	checksumTmp += soft_f;
 8009a42:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	8bbb      	ldrh	r3, [r7, #28]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	83bb      	strh	r3, [r7, #28]
	uint8_t tmp = checksumTmp % 256;
 8009a4e:	8bbb      	ldrh	r3, [r7, #28]
 8009a50:	76fb      	strb	r3, [r7, #27]
	uint8_t tmpComp = ~tmp;
 8009a52:	7efb      	ldrb	r3, [r7, #27]
 8009a54:	43db      	mvns	r3, r3
 8009a56:	76bb      	strb	r3, [r7, #26]
	uint8_t sendBuff[11] = { 0XFF, 0XFF,kp, tmpArr[0],ki, tmpArr[1], kd,
 8009a58:	23ff      	movs	r3, #255	; 0xff
 8009a5a:	733b      	strb	r3, [r7, #12]
 8009a5c:	23ff      	movs	r3, #255	; 0xff
 8009a5e:	737b      	strb	r3, [r7, #13]
 8009a60:	797b      	ldrb	r3, [r7, #5]
 8009a62:	73bb      	strb	r3, [r7, #14]
 8009a64:	7e3b      	ldrb	r3, [r7, #24]
 8009a66:	73fb      	strb	r3, [r7, #15]
 8009a68:	793b      	ldrb	r3, [r7, #4]
 8009a6a:	743b      	strb	r3, [r7, #16]
 8009a6c:	7e7b      	ldrb	r3, [r7, #25]
 8009a6e:	747b      	strb	r3, [r7, #17]
 8009a70:	78fb      	ldrb	r3, [r7, #3]
 8009a72:	74bb      	strb	r3, [r7, #18]
 8009a74:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009a78:	74fb      	strb	r3, [r7, #19]
 8009a7a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009a7e:	753b      	strb	r3, [r7, #20]
 8009a80:	7efb      	ldrb	r3, [r7, #27]
 8009a82:	757b      	strb	r3, [r7, #21]
 8009a84:	7ebb      	ldrb	r3, [r7, #26]
 8009a86:	75bb      	strb	r3, [r7, #22]
			soft_k,soft_f, tmp, tmpComp };
	for (uint8_t counter = 0; counter < 11; counter++) {
 8009a88:	2300      	movs	r3, #0
 8009a8a:	77fb      	strb	r3, [r7, #31]
 8009a8c:	e00f      	b.n	8009aae <MDI_sendDataChannel2Ver2+0xde>
		MDI_writeSmallDataWithRegister(&MDI_channel2TX, sendBuff[counter]);
 8009a8e:	7ffb      	ldrb	r3, [r7, #31]
 8009a90:	f107 0220 	add.w	r2, r7, #32
 8009a94:	4413      	add	r3, r2
 8009a96:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	4808      	ldr	r0, [pc, #32]	; (8009ac0 <MDI_sendDataChannel2Ver2+0xf0>)
 8009a9e:	f7ff fe70 	bl	8009782 <MDI_writeSmallDataWithRegister>
		vTaskDelay(50);
 8009aa2:	2032      	movs	r0, #50	; 0x32
 8009aa4:	f7fc fd8a 	bl	80065bc <vTaskDelay>
	for (uint8_t counter = 0; counter < 11; counter++) {
 8009aa8:	7ffb      	ldrb	r3, [r7, #31]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	77fb      	strb	r3, [r7, #31]
 8009aae:	7ffb      	ldrb	r3, [r7, #31]
 8009ab0:	2b0a      	cmp	r3, #10
 8009ab2:	d9ec      	bls.n	8009a8e <MDI_sendDataChannel2Ver2+0xbe>
	}
}
 8009ab4:	bf00      	nop
 8009ab6:	bf00      	nop
 8009ab8:	3724      	adds	r7, #36	; 0x24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd90      	pop	{r4, r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	20004b00 	.word	0x20004b00

08009ac4 <MDI_enableGetDataChannel2>:
/**
 * @brief set enable for MDI channel 2 receive
 * @return none
 */
uint8_t  getTmpCH2 = 0;
void MDI_enableGetDataChannel2(void){
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&MDI_channel2RX,&getTmpCH2,1);
 8009ac8:	2201      	movs	r2, #1
 8009aca:	4903      	ldr	r1, [pc, #12]	; (8009ad8 <MDI_enableGetDataChannel2+0x14>)
 8009acc:	4803      	ldr	r0, [pc, #12]	; (8009adc <MDI_enableGetDataChannel2+0x18>)
 8009ace:	f7fa fd32 	bl	8004536 <HAL_UART_Receive_IT>
}
 8009ad2:	bf00      	nop
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	200049e6 	.word	0x200049e6
 8009adc:	20004b00 	.word	0x20004b00

08009ae0 <MDI_getDataChannel2_IT>:
/**
 * @brief get to Motor Driver 2 values
 * @return callBackHandle-> get u(s)art handle
 */
static uint8_t tmpArr2[16];
void MDI_getDataChannel2_IT(UART_HandleTypeDef *callBackHandle) {
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
	volatile UART_HandleTypeDef *tmpHandle;
	tmpHandle = &MDI_channel2RX;
 8009ae8:	4b44      	ldr	r3, [pc, #272]	; (8009bfc <MDI_getDataChannel2_IT+0x11c>)
 8009aea:	613b      	str	r3, [r7, #16]
	if(callBackHandle->Instance == tmpHandle->Instance){
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681a      	ldr	r2, [r3, #0]
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d17d      	bne.n	8009bf4 <MDI_getDataChannel2_IT+0x114>
		static uint8_t counter = 0, getTmpBeff = 0;
			if (0xFF == getTmpCH2 && 0xFF == getTmpBeff) {
 8009af8:	4b41      	ldr	r3, [pc, #260]	; (8009c00 <MDI_getDataChannel2_IT+0x120>)
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	2bff      	cmp	r3, #255	; 0xff
 8009afe:	d10c      	bne.n	8009b1a <MDI_getDataChannel2_IT+0x3a>
 8009b00:	4b40      	ldr	r3, [pc, #256]	; (8009c04 <MDI_getDataChannel2_IT+0x124>)
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	2bff      	cmp	r3, #255	; 0xff
 8009b06:	d108      	bne.n	8009b1a <MDI_getDataChannel2_IT+0x3a>
				tmpArr2[0] = 0xFF;
 8009b08:	4b3f      	ldr	r3, [pc, #252]	; (8009c08 <MDI_getDataChannel2_IT+0x128>)
 8009b0a:	22ff      	movs	r2, #255	; 0xff
 8009b0c:	701a      	strb	r2, [r3, #0]
				tmpArr2[1] = 0xFF;
 8009b0e:	4b3e      	ldr	r3, [pc, #248]	; (8009c08 <MDI_getDataChannel2_IT+0x128>)
 8009b10:	22ff      	movs	r2, #255	; 0xff
 8009b12:	705a      	strb	r2, [r3, #1]
				counter = 1;
 8009b14:	4b3d      	ldr	r3, [pc, #244]	; (8009c0c <MDI_getDataChannel2_IT+0x12c>)
 8009b16:	2201      	movs	r2, #1
 8009b18:	701a      	strb	r2, [r3, #0]
			}
			tmpArr2[counter] = getTmpCH2;
 8009b1a:	4b3c      	ldr	r3, [pc, #240]	; (8009c0c <MDI_getDataChannel2_IT+0x12c>)
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	461a      	mov	r2, r3
 8009b20:	4b37      	ldr	r3, [pc, #220]	; (8009c00 <MDI_getDataChannel2_IT+0x120>)
 8009b22:	7819      	ldrb	r1, [r3, #0]
 8009b24:	4b38      	ldr	r3, [pc, #224]	; (8009c08 <MDI_getDataChannel2_IT+0x128>)
 8009b26:	5499      	strb	r1, [r3, r2]
			getTmpBeff = getTmpCH2;
 8009b28:	4b35      	ldr	r3, [pc, #212]	; (8009c00 <MDI_getDataChannel2_IT+0x120>)
 8009b2a:	781a      	ldrb	r2, [r3, #0]
 8009b2c:	4b35      	ldr	r3, [pc, #212]	; (8009c04 <MDI_getDataChannel2_IT+0x124>)
 8009b2e:	701a      	strb	r2, [r3, #0]
			counter++;
 8009b30:	4b36      	ldr	r3, [pc, #216]	; (8009c0c <MDI_getDataChannel2_IT+0x12c>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	3301      	adds	r3, #1
 8009b36:	b2da      	uxtb	r2, r3
 8009b38:	4b34      	ldr	r3, [pc, #208]	; (8009c0c <MDI_getDataChannel2_IT+0x12c>)
 8009b3a:	701a      	strb	r2, [r3, #0]
			if (counter > 15) {
 8009b3c:	4b33      	ldr	r3, [pc, #204]	; (8009c0c <MDI_getDataChannel2_IT+0x12c>)
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	2b0f      	cmp	r3, #15
 8009b42:	d952      	bls.n	8009bea <MDI_getDataChannel2_IT+0x10a>
				counter = 0;
 8009b44:	4b31      	ldr	r3, [pc, #196]	; (8009c0c <MDI_getDataChannel2_IT+0x12c>)
 8009b46:	2200      	movs	r2, #0
 8009b48:	701a      	strb	r2, [r3, #0]
				uint16_t checksumTmp = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	82fb      	strh	r3, [r7, #22]
				for (uint8_t c = 2; c < 14; c++)
 8009b4e:	2302      	movs	r3, #2
 8009b50:	757b      	strb	r3, [r7, #21]
 8009b52:	e009      	b.n	8009b68 <MDI_getDataChannel2_IT+0x88>
					checksumTmp += tmpArr2[c];
 8009b54:	7d7b      	ldrb	r3, [r7, #21]
 8009b56:	4a2c      	ldr	r2, [pc, #176]	; (8009c08 <MDI_getDataChannel2_IT+0x128>)
 8009b58:	5cd3      	ldrb	r3, [r2, r3]
 8009b5a:	b29a      	uxth	r2, r3
 8009b5c:	8afb      	ldrh	r3, [r7, #22]
 8009b5e:	4413      	add	r3, r2
 8009b60:	82fb      	strh	r3, [r7, #22]
				for (uint8_t c = 2; c < 14; c++)
 8009b62:	7d7b      	ldrb	r3, [r7, #21]
 8009b64:	3301      	adds	r3, #1
 8009b66:	757b      	strb	r3, [r7, #21]
 8009b68:	7d7b      	ldrb	r3, [r7, #21]
 8009b6a:	2b0d      	cmp	r3, #13
 8009b6c:	d9f2      	bls.n	8009b54 <MDI_getDataChannel2_IT+0x74>
				uint8_t tmp = checksumTmp % 256;
 8009b6e:	8afb      	ldrh	r3, [r7, #22]
 8009b70:	73fb      	strb	r3, [r7, #15]
				uint8_t tmpComp = ~tmp;
 8009b72:	7bfb      	ldrb	r3, [r7, #15]
 8009b74:	43db      	mvns	r3, r3
 8009b76:	73bb      	strb	r3, [r7, #14]
				if (tmp == tmpArr2[14] && tmpComp == tmpArr2[15]) {
 8009b78:	4b23      	ldr	r3, [pc, #140]	; (8009c08 <MDI_getDataChannel2_IT+0x128>)
 8009b7a:	7b9b      	ldrb	r3, [r3, #14]
 8009b7c:	7bfa      	ldrb	r2, [r7, #15]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d133      	bne.n	8009bea <MDI_getDataChannel2_IT+0x10a>
 8009b82:	4b21      	ldr	r3, [pc, #132]	; (8009c08 <MDI_getDataChannel2_IT+0x128>)
 8009b84:	7bdb      	ldrb	r3, [r3, #15]
 8009b86:	7bba      	ldrb	r2, [r7, #14]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d12e      	bne.n	8009bea <MDI_getDataChannel2_IT+0x10a>
					travelMotor.encoder =(((tmpArr2[7] << 24)) | ((tmpArr2[9]<< 16)) | ((tmpArr2[11]<< 8)) | (tmpArr2[13] & 0xFF));
 8009b8c:	4b1e      	ldr	r3, [pc, #120]	; (8009c08 <MDI_getDataChannel2_IT+0x128>)
 8009b8e:	79db      	ldrb	r3, [r3, #7]
 8009b90:	061a      	lsls	r2, r3, #24
 8009b92:	4b1d      	ldr	r3, [pc, #116]	; (8009c08 <MDI_getDataChannel2_IT+0x128>)
 8009b94:	7a5b      	ldrb	r3, [r3, #9]
 8009b96:	041b      	lsls	r3, r3, #16
 8009b98:	431a      	orrs	r2, r3
 8009b9a:	4b1b      	ldr	r3, [pc, #108]	; (8009c08 <MDI_getDataChannel2_IT+0x128>)
 8009b9c:	7adb      	ldrb	r3, [r3, #11]
 8009b9e:	021b      	lsls	r3, r3, #8
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	4a19      	ldr	r2, [pc, #100]	; (8009c08 <MDI_getDataChannel2_IT+0x128>)
 8009ba4:	7b52      	ldrb	r2, [r2, #13]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	4a19      	ldr	r2, [pc, #100]	; (8009c10 <MDI_getDataChannel2_IT+0x130>)
 8009baa:	6093      	str	r3, [r2, #8]
					travelMotor.speed = ( (tmpArr2[3] << 8) |(tmpArr2[5] & 0xFF));
 8009bac:	4b16      	ldr	r3, [pc, #88]	; (8009c08 <MDI_getDataChannel2_IT+0x128>)
 8009bae:	78db      	ldrb	r3, [r3, #3]
 8009bb0:	021b      	lsls	r3, r3, #8
 8009bb2:	b21a      	sxth	r2, r3
 8009bb4:	4b14      	ldr	r3, [pc, #80]	; (8009c08 <MDI_getDataChannel2_IT+0x128>)
 8009bb6:	795b      	ldrb	r3, [r3, #5]
 8009bb8:	b21b      	sxth	r3, r3
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	b21a      	sxth	r2, r3
 8009bbe:	4b14      	ldr	r3, [pc, #80]	; (8009c10 <MDI_getDataChannel2_IT+0x130>)
 8009bc0:	809a      	strh	r2, [r3, #4]
					travelMotor.pid_kp = tmpArr2[2];
 8009bc2:	4b11      	ldr	r3, [pc, #68]	; (8009c08 <MDI_getDataChannel2_IT+0x128>)
 8009bc4:	789a      	ldrb	r2, [r3, #2]
 8009bc6:	4b12      	ldr	r3, [pc, #72]	; (8009c10 <MDI_getDataChannel2_IT+0x130>)
 8009bc8:	701a      	strb	r2, [r3, #0]
					travelMotor.pid_ki = tmpArr2[4];
 8009bca:	4b0f      	ldr	r3, [pc, #60]	; (8009c08 <MDI_getDataChannel2_IT+0x128>)
 8009bcc:	791a      	ldrb	r2, [r3, #4]
 8009bce:	4b10      	ldr	r3, [pc, #64]	; (8009c10 <MDI_getDataChannel2_IT+0x130>)
 8009bd0:	705a      	strb	r2, [r3, #1]
					travelMotor.pid_kd = tmpArr2[6];
 8009bd2:	4b0d      	ldr	r3, [pc, #52]	; (8009c08 <MDI_getDataChannel2_IT+0x128>)
 8009bd4:	799a      	ldrb	r2, [r3, #6]
 8009bd6:	4b0e      	ldr	r3, [pc, #56]	; (8009c10 <MDI_getDataChannel2_IT+0x130>)
 8009bd8:	709a      	strb	r2, [r3, #2]
					travelMotor.soft_k = tmpArr2[8];
 8009bda:	4b0b      	ldr	r3, [pc, #44]	; (8009c08 <MDI_getDataChannel2_IT+0x128>)
 8009bdc:	7a1a      	ldrb	r2, [r3, #8]
 8009bde:	4b0c      	ldr	r3, [pc, #48]	; (8009c10 <MDI_getDataChannel2_IT+0x130>)
 8009be0:	71da      	strb	r2, [r3, #7]
					travelMotor.soft_f = tmpArr2[10];
 8009be2:	4b09      	ldr	r3, [pc, #36]	; (8009c08 <MDI_getDataChannel2_IT+0x128>)
 8009be4:	7a9a      	ldrb	r2, [r3, #10]
 8009be6:	4b0a      	ldr	r3, [pc, #40]	; (8009c10 <MDI_getDataChannel2_IT+0x130>)
 8009be8:	719a      	strb	r2, [r3, #6]
				}
			}
			HAL_UART_Receive_IT(callBackHandle, &getTmpCH2, 1);
 8009bea:	2201      	movs	r2, #1
 8009bec:	4904      	ldr	r1, [pc, #16]	; (8009c00 <MDI_getDataChannel2_IT+0x120>)
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7fa fca1 	bl	8004536 <HAL_UART_Receive_IT>
	}
}
 8009bf4:	bf00      	nop
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	20004b00 	.word	0x20004b00
 8009c00:	200049e6 	.word	0x200049e6
 8009c04:	200049fa 	.word	0x200049fa
 8009c08:	200049e8 	.word	0x200049e8
 8009c0c:	200049fb 	.word	0x200049fb
 8009c10:	20004d30 	.word	0x20004d30

08009c14 <getDriver1ReceiveVal>:
}
uint16_t getDriver2angle(void) {
	return driver2.factor;
}

mD_interface getDriver1ReceiveVal(void) {
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
	return driver1;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a05      	ldr	r2, [pc, #20]	; (8009c34 <getDriver1ReceiveVal+0x20>)
 8009c20:	6811      	ldr	r1, [r2, #0]
 8009c22:	6019      	str	r1, [r3, #0]
 8009c24:	8892      	ldrh	r2, [r2, #4]
 8009c26:	809a      	strh	r2, [r3, #4]
}
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	20004d10 	.word	0x20004d10

08009c38 <getDriver2ReceiveVal>:
tMD_interface getDriver2ReceiveVal(void) {
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
	return travelMotor;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a05      	ldr	r2, [pc, #20]	; (8009c58 <getDriver2ReceiveVal+0x20>)
 8009c44:	ca07      	ldmia	r2, {r0, r1, r2}
 8009c46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	370c      	adds	r7, #12
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	20004d30 	.word	0x20004d30

08009c5c <tasks_init>:


xSemaphoreHandle uart1SemphrHandle=NULL;
xSemaphoreHandle uart2SemphrHandle=NULL;

void tasks_init(void){
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af02      	add	r7, sp, #8
	 * @param usStackDepth-> stack size
	 * @param pvParameters-> function parameters
	 * @param uxPriority -> Priority
	 * @param pxCreatedTask -> handle so id
	 * */
	vSemaphoreCreateBinary(uart1SemphrHandle);
 8009c62:	2203      	movs	r2, #3
 8009c64:	2100      	movs	r1, #0
 8009c66:	2001      	movs	r0, #1
 8009c68:	f7fb fd9a 	bl	80057a0 <xQueueGenericCreate>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	4a3f      	ldr	r2, [pc, #252]	; (8009d6c <tasks_init+0x110>)
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	4b3e      	ldr	r3, [pc, #248]	; (8009d6c <tasks_init+0x110>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d006      	beq.n	8009c88 <tasks_init+0x2c>
 8009c7a:	4b3c      	ldr	r3, [pc, #240]	; (8009d6c <tasks_init+0x110>)
 8009c7c:	6818      	ldr	r0, [r3, #0]
 8009c7e:	2300      	movs	r3, #0
 8009c80:	2200      	movs	r2, #0
 8009c82:	2100      	movs	r1, #0
 8009c84:	f7fb fdf0 	bl	8005868 <xQueueGenericSend>
	vSemaphoreCreateBinary(uart2SemphrHandle);
 8009c88:	2203      	movs	r2, #3
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	2001      	movs	r0, #1
 8009c8e:	f7fb fd87 	bl	80057a0 <xQueueGenericCreate>
 8009c92:	4603      	mov	r3, r0
 8009c94:	4a36      	ldr	r2, [pc, #216]	; (8009d70 <tasks_init+0x114>)
 8009c96:	6013      	str	r3, [r2, #0]
 8009c98:	4b35      	ldr	r3, [pc, #212]	; (8009d70 <tasks_init+0x114>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d006      	beq.n	8009cae <tasks_init+0x52>
 8009ca0:	4b33      	ldr	r3, [pc, #204]	; (8009d70 <tasks_init+0x114>)
 8009ca2:	6818      	ldr	r0, [r3, #0]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	2100      	movs	r1, #0
 8009caa:	f7fb fddd 	bl	8005868 <xQueueGenericSend>
	if(uart1SemphrHandle!=NULL && uart2SemphrHandle!=NULL){
 8009cae:	4b2f      	ldr	r3, [pc, #188]	; (8009d6c <tasks_init+0x110>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d057      	beq.n	8009d66 <tasks_init+0x10a>
 8009cb6:	4b2e      	ldr	r3, [pc, #184]	; (8009d70 <tasks_init+0x114>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d053      	beq.n	8009d66 <tasks_init+0x10a>


		xTaskCreate(sendDataUart1Task, "send Uart 1", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	9301      	str	r3, [sp, #4]
 8009cc2:	2337      	movs	r3, #55	; 0x37
 8009cc4:	9300      	str	r3, [sp, #0]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	2280      	movs	r2, #128	; 0x80
 8009cca:	492a      	ldr	r1, [pc, #168]	; (8009d74 <tasks_init+0x118>)
 8009ccc:	482a      	ldr	r0, [pc, #168]	; (8009d78 <tasks_init+0x11c>)
 8009cce:	f7fc fb30 	bl	8006332 <xTaskCreate>
		xTaskCreate(sendDataUart2Task, "send Uart 2", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	9301      	str	r3, [sp, #4]
 8009cd6:	2337      	movs	r3, #55	; 0x37
 8009cd8:	9300      	str	r3, [sp, #0]
 8009cda:	2300      	movs	r3, #0
 8009cdc:	2280      	movs	r2, #128	; 0x80
 8009cde:	4927      	ldr	r1, [pc, #156]	; (8009d7c <tasks_init+0x120>)
 8009ce0:	4827      	ldr	r0, [pc, #156]	; (8009d80 <tasks_init+0x124>)
 8009ce2:	f7fc fb26 	bl	8006332 <xTaskCreate>
		xTaskCreate(getDataUart1Task, "get Uart 1", configMINIMAL_STACK_SIZE, NULL,  55, NULL);
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	9301      	str	r3, [sp, #4]
 8009cea:	2337      	movs	r3, #55	; 0x37
 8009cec:	9300      	str	r3, [sp, #0]
 8009cee:	2300      	movs	r3, #0
 8009cf0:	2280      	movs	r2, #128	; 0x80
 8009cf2:	4924      	ldr	r1, [pc, #144]	; (8009d84 <tasks_init+0x128>)
 8009cf4:	4824      	ldr	r0, [pc, #144]	; (8009d88 <tasks_init+0x12c>)
 8009cf6:	f7fc fb1c 	bl	8006332 <xTaskCreate>
		xTaskCreate(getDataUart2Task, "get Uart 2", configMINIMAL_STACK_SIZE, NULL,  55 , NULL);
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	9301      	str	r3, [sp, #4]
 8009cfe:	2337      	movs	r3, #55	; 0x37
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	2300      	movs	r3, #0
 8009d04:	2280      	movs	r2, #128	; 0x80
 8009d06:	4921      	ldr	r1, [pc, #132]	; (8009d8c <tasks_init+0x130>)
 8009d08:	4821      	ldr	r0, [pc, #132]	; (8009d90 <tasks_init+0x134>)
 8009d0a:	f7fc fb12 	bl	8006332 <xTaskCreate>
		xTaskCreate(adcReadTask, "adc read", configMINIMAL_STACK_SIZE, NULL,   55, NULL);
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9301      	str	r3, [sp, #4]
 8009d12:	2337      	movs	r3, #55	; 0x37
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	2300      	movs	r3, #0
 8009d18:	2280      	movs	r2, #128	; 0x80
 8009d1a:	491e      	ldr	r1, [pc, #120]	; (8009d94 <tasks_init+0x138>)
 8009d1c:	481e      	ldr	r0, [pc, #120]	; (8009d98 <tasks_init+0x13c>)
 8009d1e:	f7fc fb08 	bl	8006332 <xTaskCreate>
		xTaskCreate(adcReadTask2, "adc2 read", configMINIMAL_STACK_SIZE, NULL,   55, NULL);
 8009d22:	2300      	movs	r3, #0
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	2337      	movs	r3, #55	; 0x37
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	2280      	movs	r2, #128	; 0x80
 8009d2e:	491b      	ldr	r1, [pc, #108]	; (8009d9c <tasks_init+0x140>)
 8009d30:	481b      	ldr	r0, [pc, #108]	; (8009da0 <tasks_init+0x144>)
 8009d32:	f7fc fafe 	bl	8006332 <xTaskCreate>
		xTaskCreate(lcdTask, "lcd controller", configMINIMAL_STACK_SIZE*2, NULL,  55 , NULL);
 8009d36:	2300      	movs	r3, #0
 8009d38:	9301      	str	r3, [sp, #4]
 8009d3a:	2337      	movs	r3, #55	; 0x37
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	2300      	movs	r3, #0
 8009d40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d44:	4917      	ldr	r1, [pc, #92]	; (8009da4 <tasks_init+0x148>)
 8009d46:	4818      	ldr	r0, [pc, #96]	; (8009da8 <tasks_init+0x14c>)
 8009d48:	f7fc faf3 	bl	8006332 <xTaskCreate>
		xTaskCreate(buttonControlTask, "button controller", configMINIMAL_STACK_SIZE*2, NULL,  55 , NULL);
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	9301      	str	r3, [sp, #4]
 8009d50:	2337      	movs	r3, #55	; 0x37
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	2300      	movs	r3, #0
 8009d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d5a:	4914      	ldr	r1, [pc, #80]	; (8009dac <tasks_init+0x150>)
 8009d5c:	4814      	ldr	r0, [pc, #80]	; (8009db0 <tasks_init+0x154>)
 8009d5e:	f7fc fae8 	bl	8006332 <xTaskCreate>


		vTaskStartScheduler();
 8009d62:	f7fc fc5f 	bl	8006624 <vTaskStartScheduler>
	}
}
 8009d66:	bf00      	nop
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}
 8009d6c:	200049fc 	.word	0x200049fc
 8009d70:	20004a00 	.word	0x20004a00
 8009d74:	0800a8e4 	.word	0x0800a8e4
 8009d78:	08009db5 	.word	0x08009db5
 8009d7c:	0800a8f0 	.word	0x0800a8f0
 8009d80:	08009dc3 	.word	0x08009dc3
 8009d84:	0800a8fc 	.word	0x0800a8fc
 8009d88:	08009dd1 	.word	0x08009dd1
 8009d8c:	0800a908 	.word	0x0800a908
 8009d90:	08009e01 	.word	0x08009e01
 8009d94:	0800a914 	.word	0x0800a914
 8009d98:	08009e31 	.word	0x08009e31
 8009d9c:	0800a920 	.word	0x0800a920
 8009da0:	08009e81 	.word	0x08009e81
 8009da4:	0800a92c 	.word	0x0800a92c
 8009da8:	08009ed5 	.word	0x08009ed5
 8009dac:	0800a93c 	.word	0x0800a93c
 8009db0:	08009ef7 	.word	0x08009ef7

08009db4 <sendDataUart1Task>:
void sendDataUart1Task(void *params){
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]

	while(1){
			transmissionDriver1();
 8009dbc:	f7fe fe02 	bl	80089c4 <transmissionDriver1>
 8009dc0:	e7fc      	b.n	8009dbc <sendDataUart1Task+0x8>

08009dc2 <sendDataUart2Task>:

	}
}
void sendDataUart2Task(void *params){
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b082      	sub	sp, #8
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
	while(1){
			transmissionDriver2();
 8009dca:	f7fe fe13 	bl	80089f4 <transmissionDriver2>
 8009dce:	e7fc      	b.n	8009dca <sendDataUart2Task+0x8>

08009dd0 <getDataUart1Task>:
	}
}
void getDataUart1Task(void *params){
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(uart1SemphrHandle, portMAX_DELAY);
 8009dd8:	4b08      	ldr	r3, [pc, #32]	; (8009dfc <getDataUart1Task+0x2c>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7fb ffb7 	bl	8005d54 <xQueueSemaphoreTake>
		MDI_enableGetDataChannel1();
 8009de6:	f7ff fd5d 	bl	80098a4 <MDI_enableGetDataChannel1>
		xSemaphoreGive(uart1SemphrHandle);
 8009dea:	4b04      	ldr	r3, [pc, #16]	; (8009dfc <getDataUart1Task+0x2c>)
 8009dec:	6818      	ldr	r0, [r3, #0]
 8009dee:	2300      	movs	r3, #0
 8009df0:	2200      	movs	r2, #0
 8009df2:	2100      	movs	r1, #0
 8009df4:	f7fb fd38 	bl	8005868 <xQueueGenericSend>
		xSemaphoreTake(uart1SemphrHandle, portMAX_DELAY);
 8009df8:	e7ee      	b.n	8009dd8 <getDataUart1Task+0x8>
 8009dfa:	bf00      	nop
 8009dfc:	200049fc 	.word	0x200049fc

08009e00 <getDataUart2Task>:

	}
}
void getDataUart2Task(void *params){
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
	while(1){
		xSemaphoreTake(uart2SemphrHandle, portMAX_DELAY);
 8009e08:	4b08      	ldr	r3, [pc, #32]	; (8009e2c <getDataUart2Task+0x2c>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7fb ff9f 	bl	8005d54 <xQueueSemaphoreTake>
		MDI_enableGetDataChannel2();
 8009e16:	f7ff fe55 	bl	8009ac4 <MDI_enableGetDataChannel2>
		xSemaphoreGive(uart2SemphrHandle);
 8009e1a:	4b04      	ldr	r3, [pc, #16]	; (8009e2c <getDataUart2Task+0x2c>)
 8009e1c:	6818      	ldr	r0, [r3, #0]
 8009e1e:	2300      	movs	r3, #0
 8009e20:	2200      	movs	r2, #0
 8009e22:	2100      	movs	r1, #0
 8009e24:	f7fb fd20 	bl	8005868 <xQueueGenericSend>
		xSemaphoreTake(uart2SemphrHandle, portMAX_DELAY);
 8009e28:	e7ee      	b.n	8009e08 <getDataUart2Task+0x8>
 8009e2a:	bf00      	nop
 8009e2c:	20004a00 	.word	0x20004a00

08009e30 <adcReadTask>:
	}
}
void adcReadTask(void *params){
 8009e30:	b580      	push	{r7, lr}
 8009e32:	ed2d 8b02 	vpush	{d8}
 8009e36:	b084      	sub	sp, #16
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
	uint16_t val1;
//	int16_t val2;
	while(1){
		readAnalogVal1(&ADCREADCH1);
 8009e3c:	480e      	ldr	r0, [pc, #56]	; (8009e78 <adcReadTask+0x48>)
 8009e3e:	f7fe f98f 	bl	8008160 <readAnalogVal1>
		val1=valuesMapWFloat(getADC1(),0,getVdda(),140,860);
 8009e42:	f7fe fa63 	bl	800830c <getADC1>
 8009e46:	eeb0 8a40 	vmov.f32	s16, s0
 8009e4a:	f7fe fa51 	bl	80082f0 <getVdda>
 8009e4e:	eef0 7a40 	vmov.f32	s15, s0
 8009e52:	f44f 7157 	mov.w	r1, #860	; 0x35c
 8009e56:	208c      	movs	r0, #140	; 0x8c
 8009e58:	eeb0 1a67 	vmov.f32	s2, s15
 8009e5c:	eddf 0a07 	vldr	s1, [pc, #28]	; 8009e7c <adcReadTask+0x4c>
 8009e60:	eeb0 0a48 	vmov.f32	s0, s16
 8009e64:	f7fe fa6e 	bl	8008344 <valuesMapWFloat>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	81fb      	strh	r3, [r7, #14]
		setDriver1AngleValue(val1);
 8009e6c:	89fb      	ldrh	r3, [r7, #14]
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7fe fbb4 	bl	80085dc <setDriver1AngleValue>
		readAnalogVal1(&ADCREADCH1);
 8009e74:	e7e2      	b.n	8009e3c <adcReadTask+0xc>
 8009e76:	bf00      	nop
 8009e78:	20004b40 	.word	0x20004b40
 8009e7c:	00000000 	.word	0x00000000

08009e80 <adcReadTask2>:
			val2=valuesMapFloat(getADC2(),0,getVdda(),-10000,10000);
			setDriver2AngleValue(val2);
			vTaskDelay(1);*/
	}
}
void adcReadTask2(void *params){
 8009e80:	b580      	push	{r7, lr}
 8009e82:	ed2d 8b02 	vpush	{d8}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]

	int16_t val2;
	while(1){
		readAnalogVal2(&ADCREADCH2);
 8009e8c:	480e      	ldr	r0, [pc, #56]	; (8009ec8 <adcReadTask2+0x48>)
 8009e8e:	f7fe f9e5 	bl	800825c <readAnalogVal2>
		val2=valuesMapFloat(getADC2(),0,getVdda(),-10000,10000);
 8009e92:	f7fe fa49 	bl	8008328 <getADC2>
 8009e96:	eeb0 8a40 	vmov.f32	s16, s0
 8009e9a:	f7fe fa29 	bl	80082f0 <getVdda>
 8009e9e:	eef0 7a40 	vmov.f32	s15, s0
 8009ea2:	f242 7110 	movw	r1, #10000	; 0x2710
 8009ea6:	4809      	ldr	r0, [pc, #36]	; (8009ecc <adcReadTask2+0x4c>)
 8009ea8:	eeb0 1a67 	vmov.f32	s2, s15
 8009eac:	eddf 0a08 	vldr	s1, [pc, #32]	; 8009ed0 <adcReadTask2+0x50>
 8009eb0:	eeb0 0a48 	vmov.f32	s0, s16
 8009eb4:	f7fe fa7d 	bl	80083b2 <valuesMapFloat>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	81fb      	strh	r3, [r7, #14]
		setDriver2AngleValue(val2);
 8009ebc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fe fb9b 	bl	80085fc <setDriver2AngleValue>
		readAnalogVal2(&ADCREADCH2);
 8009ec6:	e7e1      	b.n	8009e8c <adcReadTask2+0xc>
 8009ec8:	20004a10 	.word	0x20004a10
 8009ecc:	ffffd8f0 	.word	0xffffd8f0
 8009ed0:	00000000 	.word	0x00000000

08009ed4 <lcdTask>:

	}
}
void lcdTask(void *params){
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
	lcd_Init();
 8009edc:	f7fe fde2 	bl	8008aa4 <lcd_Init>
	while(1){
	  	lcdController();
 8009ee0:	f7ff f86e 	bl	8008fc0 <lcdController>
	  	vTaskDelay(200);
 8009ee4:	20c8      	movs	r0, #200	; 0xc8
 8009ee6:	f7fc fb69 	bl	80065bc <vTaskDelay>
	  	cleanTheLcd();
 8009eea:	f7ff f845 	bl	8008f78 <cleanTheLcd>
	  	vTaskDelay(5);
 8009eee:	2005      	movs	r0, #5
 8009ef0:	f7fc fb64 	bl	80065bc <vTaskDelay>
	  	lcdController();
 8009ef4:	e7f4      	b.n	8009ee0 <lcdTask+0xc>

08009ef6 <buttonControlTask>:
	}

}
void buttonControlTask(void *params){
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b082      	sub	sp, #8
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
	btnParameterInit();
 8009efe:	f7fe fb3f 	bl	8008580 <btnParameterInit>
	while(1){
		buttonController();
 8009f02:	f7fe fb8b 	bl	800861c <buttonController>
		vTaskDelay(50);
 8009f06:	2032      	movs	r0, #50	; 0x32
 8009f08:	f7fc fb58 	bl	80065bc <vTaskDelay>
		buttonController();
 8009f0c:	e7f9      	b.n	8009f02 <buttonControlTask+0xc>
	...

08009f10 <__errno>:
 8009f10:	4b01      	ldr	r3, [pc, #4]	; (8009f18 <__errno+0x8>)
 8009f12:	6818      	ldr	r0, [r3, #0]
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	20000014 	.word	0x20000014

08009f1c <__libc_init_array>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	4d0d      	ldr	r5, [pc, #52]	; (8009f54 <__libc_init_array+0x38>)
 8009f20:	4c0d      	ldr	r4, [pc, #52]	; (8009f58 <__libc_init_array+0x3c>)
 8009f22:	1b64      	subs	r4, r4, r5
 8009f24:	10a4      	asrs	r4, r4, #2
 8009f26:	2600      	movs	r6, #0
 8009f28:	42a6      	cmp	r6, r4
 8009f2a:	d109      	bne.n	8009f40 <__libc_init_array+0x24>
 8009f2c:	4d0b      	ldr	r5, [pc, #44]	; (8009f5c <__libc_init_array+0x40>)
 8009f2e:	4c0c      	ldr	r4, [pc, #48]	; (8009f60 <__libc_init_array+0x44>)
 8009f30:	f000 fc4e 	bl	800a7d0 <_init>
 8009f34:	1b64      	subs	r4, r4, r5
 8009f36:	10a4      	asrs	r4, r4, #2
 8009f38:	2600      	movs	r6, #0
 8009f3a:	42a6      	cmp	r6, r4
 8009f3c:	d105      	bne.n	8009f4a <__libc_init_array+0x2e>
 8009f3e:	bd70      	pop	{r4, r5, r6, pc}
 8009f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f44:	4798      	blx	r3
 8009f46:	3601      	adds	r6, #1
 8009f48:	e7ee      	b.n	8009f28 <__libc_init_array+0xc>
 8009f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f4e:	4798      	blx	r3
 8009f50:	3601      	adds	r6, #1
 8009f52:	e7f2      	b.n	8009f3a <__libc_init_array+0x1e>
 8009f54:	0800a9e8 	.word	0x0800a9e8
 8009f58:	0800a9e8 	.word	0x0800a9e8
 8009f5c:	0800a9e8 	.word	0x0800a9e8
 8009f60:	0800a9ec 	.word	0x0800a9ec

08009f64 <memcpy>:
 8009f64:	440a      	add	r2, r1
 8009f66:	4291      	cmp	r1, r2
 8009f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f6c:	d100      	bne.n	8009f70 <memcpy+0xc>
 8009f6e:	4770      	bx	lr
 8009f70:	b510      	push	{r4, lr}
 8009f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f7a:	4291      	cmp	r1, r2
 8009f7c:	d1f9      	bne.n	8009f72 <memcpy+0xe>
 8009f7e:	bd10      	pop	{r4, pc}

08009f80 <memset>:
 8009f80:	4402      	add	r2, r0
 8009f82:	4603      	mov	r3, r0
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d100      	bne.n	8009f8a <memset+0xa>
 8009f88:	4770      	bx	lr
 8009f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f8e:	e7f9      	b.n	8009f84 <memset+0x4>

08009f90 <siprintf>:
 8009f90:	b40e      	push	{r1, r2, r3}
 8009f92:	b500      	push	{lr}
 8009f94:	b09c      	sub	sp, #112	; 0x70
 8009f96:	ab1d      	add	r3, sp, #116	; 0x74
 8009f98:	9002      	str	r0, [sp, #8]
 8009f9a:	9006      	str	r0, [sp, #24]
 8009f9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009fa0:	4809      	ldr	r0, [pc, #36]	; (8009fc8 <siprintf+0x38>)
 8009fa2:	9107      	str	r1, [sp, #28]
 8009fa4:	9104      	str	r1, [sp, #16]
 8009fa6:	4909      	ldr	r1, [pc, #36]	; (8009fcc <siprintf+0x3c>)
 8009fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fac:	9105      	str	r1, [sp, #20]
 8009fae:	6800      	ldr	r0, [r0, #0]
 8009fb0:	9301      	str	r3, [sp, #4]
 8009fb2:	a902      	add	r1, sp, #8
 8009fb4:	f000 f868 	bl	800a088 <_svfiprintf_r>
 8009fb8:	9b02      	ldr	r3, [sp, #8]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	701a      	strb	r2, [r3, #0]
 8009fbe:	b01c      	add	sp, #112	; 0x70
 8009fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fc4:	b003      	add	sp, #12
 8009fc6:	4770      	bx	lr
 8009fc8:	20000014 	.word	0x20000014
 8009fcc:	ffff0208 	.word	0xffff0208

08009fd0 <__ssputs_r>:
 8009fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd4:	688e      	ldr	r6, [r1, #8]
 8009fd6:	429e      	cmp	r6, r3
 8009fd8:	4682      	mov	sl, r0
 8009fda:	460c      	mov	r4, r1
 8009fdc:	4690      	mov	r8, r2
 8009fde:	461f      	mov	r7, r3
 8009fe0:	d838      	bhi.n	800a054 <__ssputs_r+0x84>
 8009fe2:	898a      	ldrh	r2, [r1, #12]
 8009fe4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fe8:	d032      	beq.n	800a050 <__ssputs_r+0x80>
 8009fea:	6825      	ldr	r5, [r4, #0]
 8009fec:	6909      	ldr	r1, [r1, #16]
 8009fee:	eba5 0901 	sub.w	r9, r5, r1
 8009ff2:	6965      	ldr	r5, [r4, #20]
 8009ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	444b      	add	r3, r9
 800a000:	106d      	asrs	r5, r5, #1
 800a002:	429d      	cmp	r5, r3
 800a004:	bf38      	it	cc
 800a006:	461d      	movcc	r5, r3
 800a008:	0553      	lsls	r3, r2, #21
 800a00a:	d531      	bpl.n	800a070 <__ssputs_r+0xa0>
 800a00c:	4629      	mov	r1, r5
 800a00e:	f000 fb39 	bl	800a684 <_malloc_r>
 800a012:	4606      	mov	r6, r0
 800a014:	b950      	cbnz	r0, 800a02c <__ssputs_r+0x5c>
 800a016:	230c      	movs	r3, #12
 800a018:	f8ca 3000 	str.w	r3, [sl]
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a022:	81a3      	strh	r3, [r4, #12]
 800a024:	f04f 30ff 	mov.w	r0, #4294967295
 800a028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a02c:	6921      	ldr	r1, [r4, #16]
 800a02e:	464a      	mov	r2, r9
 800a030:	f7ff ff98 	bl	8009f64 <memcpy>
 800a034:	89a3      	ldrh	r3, [r4, #12]
 800a036:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a03a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a03e:	81a3      	strh	r3, [r4, #12]
 800a040:	6126      	str	r6, [r4, #16]
 800a042:	6165      	str	r5, [r4, #20]
 800a044:	444e      	add	r6, r9
 800a046:	eba5 0509 	sub.w	r5, r5, r9
 800a04a:	6026      	str	r6, [r4, #0]
 800a04c:	60a5      	str	r5, [r4, #8]
 800a04e:	463e      	mov	r6, r7
 800a050:	42be      	cmp	r6, r7
 800a052:	d900      	bls.n	800a056 <__ssputs_r+0x86>
 800a054:	463e      	mov	r6, r7
 800a056:	4632      	mov	r2, r6
 800a058:	6820      	ldr	r0, [r4, #0]
 800a05a:	4641      	mov	r1, r8
 800a05c:	f000 faa8 	bl	800a5b0 <memmove>
 800a060:	68a3      	ldr	r3, [r4, #8]
 800a062:	6822      	ldr	r2, [r4, #0]
 800a064:	1b9b      	subs	r3, r3, r6
 800a066:	4432      	add	r2, r6
 800a068:	60a3      	str	r3, [r4, #8]
 800a06a:	6022      	str	r2, [r4, #0]
 800a06c:	2000      	movs	r0, #0
 800a06e:	e7db      	b.n	800a028 <__ssputs_r+0x58>
 800a070:	462a      	mov	r2, r5
 800a072:	f000 fb61 	bl	800a738 <_realloc_r>
 800a076:	4606      	mov	r6, r0
 800a078:	2800      	cmp	r0, #0
 800a07a:	d1e1      	bne.n	800a040 <__ssputs_r+0x70>
 800a07c:	6921      	ldr	r1, [r4, #16]
 800a07e:	4650      	mov	r0, sl
 800a080:	f000 fab0 	bl	800a5e4 <_free_r>
 800a084:	e7c7      	b.n	800a016 <__ssputs_r+0x46>
	...

0800a088 <_svfiprintf_r>:
 800a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	4698      	mov	r8, r3
 800a08e:	898b      	ldrh	r3, [r1, #12]
 800a090:	061b      	lsls	r3, r3, #24
 800a092:	b09d      	sub	sp, #116	; 0x74
 800a094:	4607      	mov	r7, r0
 800a096:	460d      	mov	r5, r1
 800a098:	4614      	mov	r4, r2
 800a09a:	d50e      	bpl.n	800a0ba <_svfiprintf_r+0x32>
 800a09c:	690b      	ldr	r3, [r1, #16]
 800a09e:	b963      	cbnz	r3, 800a0ba <_svfiprintf_r+0x32>
 800a0a0:	2140      	movs	r1, #64	; 0x40
 800a0a2:	f000 faef 	bl	800a684 <_malloc_r>
 800a0a6:	6028      	str	r0, [r5, #0]
 800a0a8:	6128      	str	r0, [r5, #16]
 800a0aa:	b920      	cbnz	r0, 800a0b6 <_svfiprintf_r+0x2e>
 800a0ac:	230c      	movs	r3, #12
 800a0ae:	603b      	str	r3, [r7, #0]
 800a0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b4:	e0d1      	b.n	800a25a <_svfiprintf_r+0x1d2>
 800a0b6:	2340      	movs	r3, #64	; 0x40
 800a0b8:	616b      	str	r3, [r5, #20]
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a0be:	2320      	movs	r3, #32
 800a0c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0c8:	2330      	movs	r3, #48	; 0x30
 800a0ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a274 <_svfiprintf_r+0x1ec>
 800a0ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0d2:	f04f 0901 	mov.w	r9, #1
 800a0d6:	4623      	mov	r3, r4
 800a0d8:	469a      	mov	sl, r3
 800a0da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0de:	b10a      	cbz	r2, 800a0e4 <_svfiprintf_r+0x5c>
 800a0e0:	2a25      	cmp	r2, #37	; 0x25
 800a0e2:	d1f9      	bne.n	800a0d8 <_svfiprintf_r+0x50>
 800a0e4:	ebba 0b04 	subs.w	fp, sl, r4
 800a0e8:	d00b      	beq.n	800a102 <_svfiprintf_r+0x7a>
 800a0ea:	465b      	mov	r3, fp
 800a0ec:	4622      	mov	r2, r4
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	4638      	mov	r0, r7
 800a0f2:	f7ff ff6d 	bl	8009fd0 <__ssputs_r>
 800a0f6:	3001      	adds	r0, #1
 800a0f8:	f000 80aa 	beq.w	800a250 <_svfiprintf_r+0x1c8>
 800a0fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0fe:	445a      	add	r2, fp
 800a100:	9209      	str	r2, [sp, #36]	; 0x24
 800a102:	f89a 3000 	ldrb.w	r3, [sl]
 800a106:	2b00      	cmp	r3, #0
 800a108:	f000 80a2 	beq.w	800a250 <_svfiprintf_r+0x1c8>
 800a10c:	2300      	movs	r3, #0
 800a10e:	f04f 32ff 	mov.w	r2, #4294967295
 800a112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a116:	f10a 0a01 	add.w	sl, sl, #1
 800a11a:	9304      	str	r3, [sp, #16]
 800a11c:	9307      	str	r3, [sp, #28]
 800a11e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a122:	931a      	str	r3, [sp, #104]	; 0x68
 800a124:	4654      	mov	r4, sl
 800a126:	2205      	movs	r2, #5
 800a128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a12c:	4851      	ldr	r0, [pc, #324]	; (800a274 <_svfiprintf_r+0x1ec>)
 800a12e:	f7f6 f857 	bl	80001e0 <memchr>
 800a132:	9a04      	ldr	r2, [sp, #16]
 800a134:	b9d8      	cbnz	r0, 800a16e <_svfiprintf_r+0xe6>
 800a136:	06d0      	lsls	r0, r2, #27
 800a138:	bf44      	itt	mi
 800a13a:	2320      	movmi	r3, #32
 800a13c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a140:	0711      	lsls	r1, r2, #28
 800a142:	bf44      	itt	mi
 800a144:	232b      	movmi	r3, #43	; 0x2b
 800a146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a14a:	f89a 3000 	ldrb.w	r3, [sl]
 800a14e:	2b2a      	cmp	r3, #42	; 0x2a
 800a150:	d015      	beq.n	800a17e <_svfiprintf_r+0xf6>
 800a152:	9a07      	ldr	r2, [sp, #28]
 800a154:	4654      	mov	r4, sl
 800a156:	2000      	movs	r0, #0
 800a158:	f04f 0c0a 	mov.w	ip, #10
 800a15c:	4621      	mov	r1, r4
 800a15e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a162:	3b30      	subs	r3, #48	; 0x30
 800a164:	2b09      	cmp	r3, #9
 800a166:	d94e      	bls.n	800a206 <_svfiprintf_r+0x17e>
 800a168:	b1b0      	cbz	r0, 800a198 <_svfiprintf_r+0x110>
 800a16a:	9207      	str	r2, [sp, #28]
 800a16c:	e014      	b.n	800a198 <_svfiprintf_r+0x110>
 800a16e:	eba0 0308 	sub.w	r3, r0, r8
 800a172:	fa09 f303 	lsl.w	r3, r9, r3
 800a176:	4313      	orrs	r3, r2
 800a178:	9304      	str	r3, [sp, #16]
 800a17a:	46a2      	mov	sl, r4
 800a17c:	e7d2      	b.n	800a124 <_svfiprintf_r+0x9c>
 800a17e:	9b03      	ldr	r3, [sp, #12]
 800a180:	1d19      	adds	r1, r3, #4
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	9103      	str	r1, [sp, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	bfbb      	ittet	lt
 800a18a:	425b      	neglt	r3, r3
 800a18c:	f042 0202 	orrlt.w	r2, r2, #2
 800a190:	9307      	strge	r3, [sp, #28]
 800a192:	9307      	strlt	r3, [sp, #28]
 800a194:	bfb8      	it	lt
 800a196:	9204      	strlt	r2, [sp, #16]
 800a198:	7823      	ldrb	r3, [r4, #0]
 800a19a:	2b2e      	cmp	r3, #46	; 0x2e
 800a19c:	d10c      	bne.n	800a1b8 <_svfiprintf_r+0x130>
 800a19e:	7863      	ldrb	r3, [r4, #1]
 800a1a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a1a2:	d135      	bne.n	800a210 <_svfiprintf_r+0x188>
 800a1a4:	9b03      	ldr	r3, [sp, #12]
 800a1a6:	1d1a      	adds	r2, r3, #4
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	9203      	str	r2, [sp, #12]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	bfb8      	it	lt
 800a1b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1b4:	3402      	adds	r4, #2
 800a1b6:	9305      	str	r3, [sp, #20]
 800a1b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a284 <_svfiprintf_r+0x1fc>
 800a1bc:	7821      	ldrb	r1, [r4, #0]
 800a1be:	2203      	movs	r2, #3
 800a1c0:	4650      	mov	r0, sl
 800a1c2:	f7f6 f80d 	bl	80001e0 <memchr>
 800a1c6:	b140      	cbz	r0, 800a1da <_svfiprintf_r+0x152>
 800a1c8:	2340      	movs	r3, #64	; 0x40
 800a1ca:	eba0 000a 	sub.w	r0, r0, sl
 800a1ce:	fa03 f000 	lsl.w	r0, r3, r0
 800a1d2:	9b04      	ldr	r3, [sp, #16]
 800a1d4:	4303      	orrs	r3, r0
 800a1d6:	3401      	adds	r4, #1
 800a1d8:	9304      	str	r3, [sp, #16]
 800a1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1de:	4826      	ldr	r0, [pc, #152]	; (800a278 <_svfiprintf_r+0x1f0>)
 800a1e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1e4:	2206      	movs	r2, #6
 800a1e6:	f7f5 fffb 	bl	80001e0 <memchr>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	d038      	beq.n	800a260 <_svfiprintf_r+0x1d8>
 800a1ee:	4b23      	ldr	r3, [pc, #140]	; (800a27c <_svfiprintf_r+0x1f4>)
 800a1f0:	bb1b      	cbnz	r3, 800a23a <_svfiprintf_r+0x1b2>
 800a1f2:	9b03      	ldr	r3, [sp, #12]
 800a1f4:	3307      	adds	r3, #7
 800a1f6:	f023 0307 	bic.w	r3, r3, #7
 800a1fa:	3308      	adds	r3, #8
 800a1fc:	9303      	str	r3, [sp, #12]
 800a1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a200:	4433      	add	r3, r6
 800a202:	9309      	str	r3, [sp, #36]	; 0x24
 800a204:	e767      	b.n	800a0d6 <_svfiprintf_r+0x4e>
 800a206:	fb0c 3202 	mla	r2, ip, r2, r3
 800a20a:	460c      	mov	r4, r1
 800a20c:	2001      	movs	r0, #1
 800a20e:	e7a5      	b.n	800a15c <_svfiprintf_r+0xd4>
 800a210:	2300      	movs	r3, #0
 800a212:	3401      	adds	r4, #1
 800a214:	9305      	str	r3, [sp, #20]
 800a216:	4619      	mov	r1, r3
 800a218:	f04f 0c0a 	mov.w	ip, #10
 800a21c:	4620      	mov	r0, r4
 800a21e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a222:	3a30      	subs	r2, #48	; 0x30
 800a224:	2a09      	cmp	r2, #9
 800a226:	d903      	bls.n	800a230 <_svfiprintf_r+0x1a8>
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d0c5      	beq.n	800a1b8 <_svfiprintf_r+0x130>
 800a22c:	9105      	str	r1, [sp, #20]
 800a22e:	e7c3      	b.n	800a1b8 <_svfiprintf_r+0x130>
 800a230:	fb0c 2101 	mla	r1, ip, r1, r2
 800a234:	4604      	mov	r4, r0
 800a236:	2301      	movs	r3, #1
 800a238:	e7f0      	b.n	800a21c <_svfiprintf_r+0x194>
 800a23a:	ab03      	add	r3, sp, #12
 800a23c:	9300      	str	r3, [sp, #0]
 800a23e:	462a      	mov	r2, r5
 800a240:	4b0f      	ldr	r3, [pc, #60]	; (800a280 <_svfiprintf_r+0x1f8>)
 800a242:	a904      	add	r1, sp, #16
 800a244:	4638      	mov	r0, r7
 800a246:	f3af 8000 	nop.w
 800a24a:	1c42      	adds	r2, r0, #1
 800a24c:	4606      	mov	r6, r0
 800a24e:	d1d6      	bne.n	800a1fe <_svfiprintf_r+0x176>
 800a250:	89ab      	ldrh	r3, [r5, #12]
 800a252:	065b      	lsls	r3, r3, #25
 800a254:	f53f af2c 	bmi.w	800a0b0 <_svfiprintf_r+0x28>
 800a258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a25a:	b01d      	add	sp, #116	; 0x74
 800a25c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a260:	ab03      	add	r3, sp, #12
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	462a      	mov	r2, r5
 800a266:	4b06      	ldr	r3, [pc, #24]	; (800a280 <_svfiprintf_r+0x1f8>)
 800a268:	a904      	add	r1, sp, #16
 800a26a:	4638      	mov	r0, r7
 800a26c:	f000 f87a 	bl	800a364 <_printf_i>
 800a270:	e7eb      	b.n	800a24a <_svfiprintf_r+0x1c2>
 800a272:	bf00      	nop
 800a274:	0800a9ac 	.word	0x0800a9ac
 800a278:	0800a9b6 	.word	0x0800a9b6
 800a27c:	00000000 	.word	0x00000000
 800a280:	08009fd1 	.word	0x08009fd1
 800a284:	0800a9b2 	.word	0x0800a9b2

0800a288 <_printf_common>:
 800a288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a28c:	4616      	mov	r6, r2
 800a28e:	4699      	mov	r9, r3
 800a290:	688a      	ldr	r2, [r1, #8]
 800a292:	690b      	ldr	r3, [r1, #16]
 800a294:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a298:	4293      	cmp	r3, r2
 800a29a:	bfb8      	it	lt
 800a29c:	4613      	movlt	r3, r2
 800a29e:	6033      	str	r3, [r6, #0]
 800a2a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a2a4:	4607      	mov	r7, r0
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	b10a      	cbz	r2, 800a2ae <_printf_common+0x26>
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	6033      	str	r3, [r6, #0]
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	0699      	lsls	r1, r3, #26
 800a2b2:	bf42      	ittt	mi
 800a2b4:	6833      	ldrmi	r3, [r6, #0]
 800a2b6:	3302      	addmi	r3, #2
 800a2b8:	6033      	strmi	r3, [r6, #0]
 800a2ba:	6825      	ldr	r5, [r4, #0]
 800a2bc:	f015 0506 	ands.w	r5, r5, #6
 800a2c0:	d106      	bne.n	800a2d0 <_printf_common+0x48>
 800a2c2:	f104 0a19 	add.w	sl, r4, #25
 800a2c6:	68e3      	ldr	r3, [r4, #12]
 800a2c8:	6832      	ldr	r2, [r6, #0]
 800a2ca:	1a9b      	subs	r3, r3, r2
 800a2cc:	42ab      	cmp	r3, r5
 800a2ce:	dc26      	bgt.n	800a31e <_printf_common+0x96>
 800a2d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2d4:	1e13      	subs	r3, r2, #0
 800a2d6:	6822      	ldr	r2, [r4, #0]
 800a2d8:	bf18      	it	ne
 800a2da:	2301      	movne	r3, #1
 800a2dc:	0692      	lsls	r2, r2, #26
 800a2de:	d42b      	bmi.n	800a338 <_printf_common+0xb0>
 800a2e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2e4:	4649      	mov	r1, r9
 800a2e6:	4638      	mov	r0, r7
 800a2e8:	47c0      	blx	r8
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	d01e      	beq.n	800a32c <_printf_common+0xa4>
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	68e5      	ldr	r5, [r4, #12]
 800a2f2:	6832      	ldr	r2, [r6, #0]
 800a2f4:	f003 0306 	and.w	r3, r3, #6
 800a2f8:	2b04      	cmp	r3, #4
 800a2fa:	bf08      	it	eq
 800a2fc:	1aad      	subeq	r5, r5, r2
 800a2fe:	68a3      	ldr	r3, [r4, #8]
 800a300:	6922      	ldr	r2, [r4, #16]
 800a302:	bf0c      	ite	eq
 800a304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a308:	2500      	movne	r5, #0
 800a30a:	4293      	cmp	r3, r2
 800a30c:	bfc4      	itt	gt
 800a30e:	1a9b      	subgt	r3, r3, r2
 800a310:	18ed      	addgt	r5, r5, r3
 800a312:	2600      	movs	r6, #0
 800a314:	341a      	adds	r4, #26
 800a316:	42b5      	cmp	r5, r6
 800a318:	d11a      	bne.n	800a350 <_printf_common+0xc8>
 800a31a:	2000      	movs	r0, #0
 800a31c:	e008      	b.n	800a330 <_printf_common+0xa8>
 800a31e:	2301      	movs	r3, #1
 800a320:	4652      	mov	r2, sl
 800a322:	4649      	mov	r1, r9
 800a324:	4638      	mov	r0, r7
 800a326:	47c0      	blx	r8
 800a328:	3001      	adds	r0, #1
 800a32a:	d103      	bne.n	800a334 <_printf_common+0xac>
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a334:	3501      	adds	r5, #1
 800a336:	e7c6      	b.n	800a2c6 <_printf_common+0x3e>
 800a338:	18e1      	adds	r1, r4, r3
 800a33a:	1c5a      	adds	r2, r3, #1
 800a33c:	2030      	movs	r0, #48	; 0x30
 800a33e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a342:	4422      	add	r2, r4
 800a344:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a348:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a34c:	3302      	adds	r3, #2
 800a34e:	e7c7      	b.n	800a2e0 <_printf_common+0x58>
 800a350:	2301      	movs	r3, #1
 800a352:	4622      	mov	r2, r4
 800a354:	4649      	mov	r1, r9
 800a356:	4638      	mov	r0, r7
 800a358:	47c0      	blx	r8
 800a35a:	3001      	adds	r0, #1
 800a35c:	d0e6      	beq.n	800a32c <_printf_common+0xa4>
 800a35e:	3601      	adds	r6, #1
 800a360:	e7d9      	b.n	800a316 <_printf_common+0x8e>
	...

0800a364 <_printf_i>:
 800a364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a368:	460c      	mov	r4, r1
 800a36a:	4691      	mov	r9, r2
 800a36c:	7e27      	ldrb	r7, [r4, #24]
 800a36e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a370:	2f78      	cmp	r7, #120	; 0x78
 800a372:	4680      	mov	r8, r0
 800a374:	469a      	mov	sl, r3
 800a376:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a37a:	d807      	bhi.n	800a38c <_printf_i+0x28>
 800a37c:	2f62      	cmp	r7, #98	; 0x62
 800a37e:	d80a      	bhi.n	800a396 <_printf_i+0x32>
 800a380:	2f00      	cmp	r7, #0
 800a382:	f000 80d8 	beq.w	800a536 <_printf_i+0x1d2>
 800a386:	2f58      	cmp	r7, #88	; 0x58
 800a388:	f000 80a3 	beq.w	800a4d2 <_printf_i+0x16e>
 800a38c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a390:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a394:	e03a      	b.n	800a40c <_printf_i+0xa8>
 800a396:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a39a:	2b15      	cmp	r3, #21
 800a39c:	d8f6      	bhi.n	800a38c <_printf_i+0x28>
 800a39e:	a001      	add	r0, pc, #4	; (adr r0, 800a3a4 <_printf_i+0x40>)
 800a3a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a3a4:	0800a3fd 	.word	0x0800a3fd
 800a3a8:	0800a411 	.word	0x0800a411
 800a3ac:	0800a38d 	.word	0x0800a38d
 800a3b0:	0800a38d 	.word	0x0800a38d
 800a3b4:	0800a38d 	.word	0x0800a38d
 800a3b8:	0800a38d 	.word	0x0800a38d
 800a3bc:	0800a411 	.word	0x0800a411
 800a3c0:	0800a38d 	.word	0x0800a38d
 800a3c4:	0800a38d 	.word	0x0800a38d
 800a3c8:	0800a38d 	.word	0x0800a38d
 800a3cc:	0800a38d 	.word	0x0800a38d
 800a3d0:	0800a51d 	.word	0x0800a51d
 800a3d4:	0800a441 	.word	0x0800a441
 800a3d8:	0800a4ff 	.word	0x0800a4ff
 800a3dc:	0800a38d 	.word	0x0800a38d
 800a3e0:	0800a38d 	.word	0x0800a38d
 800a3e4:	0800a53f 	.word	0x0800a53f
 800a3e8:	0800a38d 	.word	0x0800a38d
 800a3ec:	0800a441 	.word	0x0800a441
 800a3f0:	0800a38d 	.word	0x0800a38d
 800a3f4:	0800a38d 	.word	0x0800a38d
 800a3f8:	0800a507 	.word	0x0800a507
 800a3fc:	680b      	ldr	r3, [r1, #0]
 800a3fe:	1d1a      	adds	r2, r3, #4
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	600a      	str	r2, [r1, #0]
 800a404:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a40c:	2301      	movs	r3, #1
 800a40e:	e0a3      	b.n	800a558 <_printf_i+0x1f4>
 800a410:	6825      	ldr	r5, [r4, #0]
 800a412:	6808      	ldr	r0, [r1, #0]
 800a414:	062e      	lsls	r6, r5, #24
 800a416:	f100 0304 	add.w	r3, r0, #4
 800a41a:	d50a      	bpl.n	800a432 <_printf_i+0xce>
 800a41c:	6805      	ldr	r5, [r0, #0]
 800a41e:	600b      	str	r3, [r1, #0]
 800a420:	2d00      	cmp	r5, #0
 800a422:	da03      	bge.n	800a42c <_printf_i+0xc8>
 800a424:	232d      	movs	r3, #45	; 0x2d
 800a426:	426d      	negs	r5, r5
 800a428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a42c:	485e      	ldr	r0, [pc, #376]	; (800a5a8 <_printf_i+0x244>)
 800a42e:	230a      	movs	r3, #10
 800a430:	e019      	b.n	800a466 <_printf_i+0x102>
 800a432:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a436:	6805      	ldr	r5, [r0, #0]
 800a438:	600b      	str	r3, [r1, #0]
 800a43a:	bf18      	it	ne
 800a43c:	b22d      	sxthne	r5, r5
 800a43e:	e7ef      	b.n	800a420 <_printf_i+0xbc>
 800a440:	680b      	ldr	r3, [r1, #0]
 800a442:	6825      	ldr	r5, [r4, #0]
 800a444:	1d18      	adds	r0, r3, #4
 800a446:	6008      	str	r0, [r1, #0]
 800a448:	0628      	lsls	r0, r5, #24
 800a44a:	d501      	bpl.n	800a450 <_printf_i+0xec>
 800a44c:	681d      	ldr	r5, [r3, #0]
 800a44e:	e002      	b.n	800a456 <_printf_i+0xf2>
 800a450:	0669      	lsls	r1, r5, #25
 800a452:	d5fb      	bpl.n	800a44c <_printf_i+0xe8>
 800a454:	881d      	ldrh	r5, [r3, #0]
 800a456:	4854      	ldr	r0, [pc, #336]	; (800a5a8 <_printf_i+0x244>)
 800a458:	2f6f      	cmp	r7, #111	; 0x6f
 800a45a:	bf0c      	ite	eq
 800a45c:	2308      	moveq	r3, #8
 800a45e:	230a      	movne	r3, #10
 800a460:	2100      	movs	r1, #0
 800a462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a466:	6866      	ldr	r6, [r4, #4]
 800a468:	60a6      	str	r6, [r4, #8]
 800a46a:	2e00      	cmp	r6, #0
 800a46c:	bfa2      	ittt	ge
 800a46e:	6821      	ldrge	r1, [r4, #0]
 800a470:	f021 0104 	bicge.w	r1, r1, #4
 800a474:	6021      	strge	r1, [r4, #0]
 800a476:	b90d      	cbnz	r5, 800a47c <_printf_i+0x118>
 800a478:	2e00      	cmp	r6, #0
 800a47a:	d04d      	beq.n	800a518 <_printf_i+0x1b4>
 800a47c:	4616      	mov	r6, r2
 800a47e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a482:	fb03 5711 	mls	r7, r3, r1, r5
 800a486:	5dc7      	ldrb	r7, [r0, r7]
 800a488:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a48c:	462f      	mov	r7, r5
 800a48e:	42bb      	cmp	r3, r7
 800a490:	460d      	mov	r5, r1
 800a492:	d9f4      	bls.n	800a47e <_printf_i+0x11a>
 800a494:	2b08      	cmp	r3, #8
 800a496:	d10b      	bne.n	800a4b0 <_printf_i+0x14c>
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	07df      	lsls	r7, r3, #31
 800a49c:	d508      	bpl.n	800a4b0 <_printf_i+0x14c>
 800a49e:	6923      	ldr	r3, [r4, #16]
 800a4a0:	6861      	ldr	r1, [r4, #4]
 800a4a2:	4299      	cmp	r1, r3
 800a4a4:	bfde      	ittt	le
 800a4a6:	2330      	movle	r3, #48	; 0x30
 800a4a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a4ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a4b0:	1b92      	subs	r2, r2, r6
 800a4b2:	6122      	str	r2, [r4, #16]
 800a4b4:	f8cd a000 	str.w	sl, [sp]
 800a4b8:	464b      	mov	r3, r9
 800a4ba:	aa03      	add	r2, sp, #12
 800a4bc:	4621      	mov	r1, r4
 800a4be:	4640      	mov	r0, r8
 800a4c0:	f7ff fee2 	bl	800a288 <_printf_common>
 800a4c4:	3001      	adds	r0, #1
 800a4c6:	d14c      	bne.n	800a562 <_printf_i+0x1fe>
 800a4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4cc:	b004      	add	sp, #16
 800a4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d2:	4835      	ldr	r0, [pc, #212]	; (800a5a8 <_printf_i+0x244>)
 800a4d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	680e      	ldr	r6, [r1, #0]
 800a4dc:	061f      	lsls	r7, r3, #24
 800a4de:	f856 5b04 	ldr.w	r5, [r6], #4
 800a4e2:	600e      	str	r6, [r1, #0]
 800a4e4:	d514      	bpl.n	800a510 <_printf_i+0x1ac>
 800a4e6:	07d9      	lsls	r1, r3, #31
 800a4e8:	bf44      	itt	mi
 800a4ea:	f043 0320 	orrmi.w	r3, r3, #32
 800a4ee:	6023      	strmi	r3, [r4, #0]
 800a4f0:	b91d      	cbnz	r5, 800a4fa <_printf_i+0x196>
 800a4f2:	6823      	ldr	r3, [r4, #0]
 800a4f4:	f023 0320 	bic.w	r3, r3, #32
 800a4f8:	6023      	str	r3, [r4, #0]
 800a4fa:	2310      	movs	r3, #16
 800a4fc:	e7b0      	b.n	800a460 <_printf_i+0xfc>
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	f043 0320 	orr.w	r3, r3, #32
 800a504:	6023      	str	r3, [r4, #0]
 800a506:	2378      	movs	r3, #120	; 0x78
 800a508:	4828      	ldr	r0, [pc, #160]	; (800a5ac <_printf_i+0x248>)
 800a50a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a50e:	e7e3      	b.n	800a4d8 <_printf_i+0x174>
 800a510:	065e      	lsls	r6, r3, #25
 800a512:	bf48      	it	mi
 800a514:	b2ad      	uxthmi	r5, r5
 800a516:	e7e6      	b.n	800a4e6 <_printf_i+0x182>
 800a518:	4616      	mov	r6, r2
 800a51a:	e7bb      	b.n	800a494 <_printf_i+0x130>
 800a51c:	680b      	ldr	r3, [r1, #0]
 800a51e:	6826      	ldr	r6, [r4, #0]
 800a520:	6960      	ldr	r0, [r4, #20]
 800a522:	1d1d      	adds	r5, r3, #4
 800a524:	600d      	str	r5, [r1, #0]
 800a526:	0635      	lsls	r5, r6, #24
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	d501      	bpl.n	800a530 <_printf_i+0x1cc>
 800a52c:	6018      	str	r0, [r3, #0]
 800a52e:	e002      	b.n	800a536 <_printf_i+0x1d2>
 800a530:	0671      	lsls	r1, r6, #25
 800a532:	d5fb      	bpl.n	800a52c <_printf_i+0x1c8>
 800a534:	8018      	strh	r0, [r3, #0]
 800a536:	2300      	movs	r3, #0
 800a538:	6123      	str	r3, [r4, #16]
 800a53a:	4616      	mov	r6, r2
 800a53c:	e7ba      	b.n	800a4b4 <_printf_i+0x150>
 800a53e:	680b      	ldr	r3, [r1, #0]
 800a540:	1d1a      	adds	r2, r3, #4
 800a542:	600a      	str	r2, [r1, #0]
 800a544:	681e      	ldr	r6, [r3, #0]
 800a546:	6862      	ldr	r2, [r4, #4]
 800a548:	2100      	movs	r1, #0
 800a54a:	4630      	mov	r0, r6
 800a54c:	f7f5 fe48 	bl	80001e0 <memchr>
 800a550:	b108      	cbz	r0, 800a556 <_printf_i+0x1f2>
 800a552:	1b80      	subs	r0, r0, r6
 800a554:	6060      	str	r0, [r4, #4]
 800a556:	6863      	ldr	r3, [r4, #4]
 800a558:	6123      	str	r3, [r4, #16]
 800a55a:	2300      	movs	r3, #0
 800a55c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a560:	e7a8      	b.n	800a4b4 <_printf_i+0x150>
 800a562:	6923      	ldr	r3, [r4, #16]
 800a564:	4632      	mov	r2, r6
 800a566:	4649      	mov	r1, r9
 800a568:	4640      	mov	r0, r8
 800a56a:	47d0      	blx	sl
 800a56c:	3001      	adds	r0, #1
 800a56e:	d0ab      	beq.n	800a4c8 <_printf_i+0x164>
 800a570:	6823      	ldr	r3, [r4, #0]
 800a572:	079b      	lsls	r3, r3, #30
 800a574:	d413      	bmi.n	800a59e <_printf_i+0x23a>
 800a576:	68e0      	ldr	r0, [r4, #12]
 800a578:	9b03      	ldr	r3, [sp, #12]
 800a57a:	4298      	cmp	r0, r3
 800a57c:	bfb8      	it	lt
 800a57e:	4618      	movlt	r0, r3
 800a580:	e7a4      	b.n	800a4cc <_printf_i+0x168>
 800a582:	2301      	movs	r3, #1
 800a584:	4632      	mov	r2, r6
 800a586:	4649      	mov	r1, r9
 800a588:	4640      	mov	r0, r8
 800a58a:	47d0      	blx	sl
 800a58c:	3001      	adds	r0, #1
 800a58e:	d09b      	beq.n	800a4c8 <_printf_i+0x164>
 800a590:	3501      	adds	r5, #1
 800a592:	68e3      	ldr	r3, [r4, #12]
 800a594:	9903      	ldr	r1, [sp, #12]
 800a596:	1a5b      	subs	r3, r3, r1
 800a598:	42ab      	cmp	r3, r5
 800a59a:	dcf2      	bgt.n	800a582 <_printf_i+0x21e>
 800a59c:	e7eb      	b.n	800a576 <_printf_i+0x212>
 800a59e:	2500      	movs	r5, #0
 800a5a0:	f104 0619 	add.w	r6, r4, #25
 800a5a4:	e7f5      	b.n	800a592 <_printf_i+0x22e>
 800a5a6:	bf00      	nop
 800a5a8:	0800a9bd 	.word	0x0800a9bd
 800a5ac:	0800a9ce 	.word	0x0800a9ce

0800a5b0 <memmove>:
 800a5b0:	4288      	cmp	r0, r1
 800a5b2:	b510      	push	{r4, lr}
 800a5b4:	eb01 0402 	add.w	r4, r1, r2
 800a5b8:	d902      	bls.n	800a5c0 <memmove+0x10>
 800a5ba:	4284      	cmp	r4, r0
 800a5bc:	4623      	mov	r3, r4
 800a5be:	d807      	bhi.n	800a5d0 <memmove+0x20>
 800a5c0:	1e43      	subs	r3, r0, #1
 800a5c2:	42a1      	cmp	r1, r4
 800a5c4:	d008      	beq.n	800a5d8 <memmove+0x28>
 800a5c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5ce:	e7f8      	b.n	800a5c2 <memmove+0x12>
 800a5d0:	4402      	add	r2, r0
 800a5d2:	4601      	mov	r1, r0
 800a5d4:	428a      	cmp	r2, r1
 800a5d6:	d100      	bne.n	800a5da <memmove+0x2a>
 800a5d8:	bd10      	pop	{r4, pc}
 800a5da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5e2:	e7f7      	b.n	800a5d4 <memmove+0x24>

0800a5e4 <_free_r>:
 800a5e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5e6:	2900      	cmp	r1, #0
 800a5e8:	d048      	beq.n	800a67c <_free_r+0x98>
 800a5ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5ee:	9001      	str	r0, [sp, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f1a1 0404 	sub.w	r4, r1, #4
 800a5f6:	bfb8      	it	lt
 800a5f8:	18e4      	addlt	r4, r4, r3
 800a5fa:	f000 f8d3 	bl	800a7a4 <__malloc_lock>
 800a5fe:	4a20      	ldr	r2, [pc, #128]	; (800a680 <_free_r+0x9c>)
 800a600:	9801      	ldr	r0, [sp, #4]
 800a602:	6813      	ldr	r3, [r2, #0]
 800a604:	4615      	mov	r5, r2
 800a606:	b933      	cbnz	r3, 800a616 <_free_r+0x32>
 800a608:	6063      	str	r3, [r4, #4]
 800a60a:	6014      	str	r4, [r2, #0]
 800a60c:	b003      	add	sp, #12
 800a60e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a612:	f000 b8cd 	b.w	800a7b0 <__malloc_unlock>
 800a616:	42a3      	cmp	r3, r4
 800a618:	d90b      	bls.n	800a632 <_free_r+0x4e>
 800a61a:	6821      	ldr	r1, [r4, #0]
 800a61c:	1862      	adds	r2, r4, r1
 800a61e:	4293      	cmp	r3, r2
 800a620:	bf04      	itt	eq
 800a622:	681a      	ldreq	r2, [r3, #0]
 800a624:	685b      	ldreq	r3, [r3, #4]
 800a626:	6063      	str	r3, [r4, #4]
 800a628:	bf04      	itt	eq
 800a62a:	1852      	addeq	r2, r2, r1
 800a62c:	6022      	streq	r2, [r4, #0]
 800a62e:	602c      	str	r4, [r5, #0]
 800a630:	e7ec      	b.n	800a60c <_free_r+0x28>
 800a632:	461a      	mov	r2, r3
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	b10b      	cbz	r3, 800a63c <_free_r+0x58>
 800a638:	42a3      	cmp	r3, r4
 800a63a:	d9fa      	bls.n	800a632 <_free_r+0x4e>
 800a63c:	6811      	ldr	r1, [r2, #0]
 800a63e:	1855      	adds	r5, r2, r1
 800a640:	42a5      	cmp	r5, r4
 800a642:	d10b      	bne.n	800a65c <_free_r+0x78>
 800a644:	6824      	ldr	r4, [r4, #0]
 800a646:	4421      	add	r1, r4
 800a648:	1854      	adds	r4, r2, r1
 800a64a:	42a3      	cmp	r3, r4
 800a64c:	6011      	str	r1, [r2, #0]
 800a64e:	d1dd      	bne.n	800a60c <_free_r+0x28>
 800a650:	681c      	ldr	r4, [r3, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	6053      	str	r3, [r2, #4]
 800a656:	4421      	add	r1, r4
 800a658:	6011      	str	r1, [r2, #0]
 800a65a:	e7d7      	b.n	800a60c <_free_r+0x28>
 800a65c:	d902      	bls.n	800a664 <_free_r+0x80>
 800a65e:	230c      	movs	r3, #12
 800a660:	6003      	str	r3, [r0, #0]
 800a662:	e7d3      	b.n	800a60c <_free_r+0x28>
 800a664:	6825      	ldr	r5, [r4, #0]
 800a666:	1961      	adds	r1, r4, r5
 800a668:	428b      	cmp	r3, r1
 800a66a:	bf04      	itt	eq
 800a66c:	6819      	ldreq	r1, [r3, #0]
 800a66e:	685b      	ldreq	r3, [r3, #4]
 800a670:	6063      	str	r3, [r4, #4]
 800a672:	bf04      	itt	eq
 800a674:	1949      	addeq	r1, r1, r5
 800a676:	6021      	streq	r1, [r4, #0]
 800a678:	6054      	str	r4, [r2, #4]
 800a67a:	e7c7      	b.n	800a60c <_free_r+0x28>
 800a67c:	b003      	add	sp, #12
 800a67e:	bd30      	pop	{r4, r5, pc}
 800a680:	20004a04 	.word	0x20004a04

0800a684 <_malloc_r>:
 800a684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a686:	1ccd      	adds	r5, r1, #3
 800a688:	f025 0503 	bic.w	r5, r5, #3
 800a68c:	3508      	adds	r5, #8
 800a68e:	2d0c      	cmp	r5, #12
 800a690:	bf38      	it	cc
 800a692:	250c      	movcc	r5, #12
 800a694:	2d00      	cmp	r5, #0
 800a696:	4606      	mov	r6, r0
 800a698:	db01      	blt.n	800a69e <_malloc_r+0x1a>
 800a69a:	42a9      	cmp	r1, r5
 800a69c:	d903      	bls.n	800a6a6 <_malloc_r+0x22>
 800a69e:	230c      	movs	r3, #12
 800a6a0:	6033      	str	r3, [r6, #0]
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6a6:	f000 f87d 	bl	800a7a4 <__malloc_lock>
 800a6aa:	4921      	ldr	r1, [pc, #132]	; (800a730 <_malloc_r+0xac>)
 800a6ac:	680a      	ldr	r2, [r1, #0]
 800a6ae:	4614      	mov	r4, r2
 800a6b0:	b99c      	cbnz	r4, 800a6da <_malloc_r+0x56>
 800a6b2:	4f20      	ldr	r7, [pc, #128]	; (800a734 <_malloc_r+0xb0>)
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	b923      	cbnz	r3, 800a6c2 <_malloc_r+0x3e>
 800a6b8:	4621      	mov	r1, r4
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	f000 f862 	bl	800a784 <_sbrk_r>
 800a6c0:	6038      	str	r0, [r7, #0]
 800a6c2:	4629      	mov	r1, r5
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	f000 f85d 	bl	800a784 <_sbrk_r>
 800a6ca:	1c43      	adds	r3, r0, #1
 800a6cc:	d123      	bne.n	800a716 <_malloc_r+0x92>
 800a6ce:	230c      	movs	r3, #12
 800a6d0:	6033      	str	r3, [r6, #0]
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	f000 f86c 	bl	800a7b0 <__malloc_unlock>
 800a6d8:	e7e3      	b.n	800a6a2 <_malloc_r+0x1e>
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	1b5b      	subs	r3, r3, r5
 800a6de:	d417      	bmi.n	800a710 <_malloc_r+0x8c>
 800a6e0:	2b0b      	cmp	r3, #11
 800a6e2:	d903      	bls.n	800a6ec <_malloc_r+0x68>
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	441c      	add	r4, r3
 800a6e8:	6025      	str	r5, [r4, #0]
 800a6ea:	e004      	b.n	800a6f6 <_malloc_r+0x72>
 800a6ec:	6863      	ldr	r3, [r4, #4]
 800a6ee:	42a2      	cmp	r2, r4
 800a6f0:	bf0c      	ite	eq
 800a6f2:	600b      	streq	r3, [r1, #0]
 800a6f4:	6053      	strne	r3, [r2, #4]
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	f000 f85a 	bl	800a7b0 <__malloc_unlock>
 800a6fc:	f104 000b 	add.w	r0, r4, #11
 800a700:	1d23      	adds	r3, r4, #4
 800a702:	f020 0007 	bic.w	r0, r0, #7
 800a706:	1ac2      	subs	r2, r0, r3
 800a708:	d0cc      	beq.n	800a6a4 <_malloc_r+0x20>
 800a70a:	1a1b      	subs	r3, r3, r0
 800a70c:	50a3      	str	r3, [r4, r2]
 800a70e:	e7c9      	b.n	800a6a4 <_malloc_r+0x20>
 800a710:	4622      	mov	r2, r4
 800a712:	6864      	ldr	r4, [r4, #4]
 800a714:	e7cc      	b.n	800a6b0 <_malloc_r+0x2c>
 800a716:	1cc4      	adds	r4, r0, #3
 800a718:	f024 0403 	bic.w	r4, r4, #3
 800a71c:	42a0      	cmp	r0, r4
 800a71e:	d0e3      	beq.n	800a6e8 <_malloc_r+0x64>
 800a720:	1a21      	subs	r1, r4, r0
 800a722:	4630      	mov	r0, r6
 800a724:	f000 f82e 	bl	800a784 <_sbrk_r>
 800a728:	3001      	adds	r0, #1
 800a72a:	d1dd      	bne.n	800a6e8 <_malloc_r+0x64>
 800a72c:	e7cf      	b.n	800a6ce <_malloc_r+0x4a>
 800a72e:	bf00      	nop
 800a730:	20004a04 	.word	0x20004a04
 800a734:	20004a08 	.word	0x20004a08

0800a738 <_realloc_r>:
 800a738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73a:	4607      	mov	r7, r0
 800a73c:	4614      	mov	r4, r2
 800a73e:	460e      	mov	r6, r1
 800a740:	b921      	cbnz	r1, 800a74c <_realloc_r+0x14>
 800a742:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a746:	4611      	mov	r1, r2
 800a748:	f7ff bf9c 	b.w	800a684 <_malloc_r>
 800a74c:	b922      	cbnz	r2, 800a758 <_realloc_r+0x20>
 800a74e:	f7ff ff49 	bl	800a5e4 <_free_r>
 800a752:	4625      	mov	r5, r4
 800a754:	4628      	mov	r0, r5
 800a756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a758:	f000 f830 	bl	800a7bc <_malloc_usable_size_r>
 800a75c:	42a0      	cmp	r0, r4
 800a75e:	d20f      	bcs.n	800a780 <_realloc_r+0x48>
 800a760:	4621      	mov	r1, r4
 800a762:	4638      	mov	r0, r7
 800a764:	f7ff ff8e 	bl	800a684 <_malloc_r>
 800a768:	4605      	mov	r5, r0
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d0f2      	beq.n	800a754 <_realloc_r+0x1c>
 800a76e:	4631      	mov	r1, r6
 800a770:	4622      	mov	r2, r4
 800a772:	f7ff fbf7 	bl	8009f64 <memcpy>
 800a776:	4631      	mov	r1, r6
 800a778:	4638      	mov	r0, r7
 800a77a:	f7ff ff33 	bl	800a5e4 <_free_r>
 800a77e:	e7e9      	b.n	800a754 <_realloc_r+0x1c>
 800a780:	4635      	mov	r5, r6
 800a782:	e7e7      	b.n	800a754 <_realloc_r+0x1c>

0800a784 <_sbrk_r>:
 800a784:	b538      	push	{r3, r4, r5, lr}
 800a786:	4d06      	ldr	r5, [pc, #24]	; (800a7a0 <_sbrk_r+0x1c>)
 800a788:	2300      	movs	r3, #0
 800a78a:	4604      	mov	r4, r0
 800a78c:	4608      	mov	r0, r1
 800a78e:	602b      	str	r3, [r5, #0]
 800a790:	f7f7 f8e4 	bl	800195c <_sbrk>
 800a794:	1c43      	adds	r3, r0, #1
 800a796:	d102      	bne.n	800a79e <_sbrk_r+0x1a>
 800a798:	682b      	ldr	r3, [r5, #0]
 800a79a:	b103      	cbz	r3, 800a79e <_sbrk_r+0x1a>
 800a79c:	6023      	str	r3, [r4, #0]
 800a79e:	bd38      	pop	{r3, r4, r5, pc}
 800a7a0:	20004d54 	.word	0x20004d54

0800a7a4 <__malloc_lock>:
 800a7a4:	4801      	ldr	r0, [pc, #4]	; (800a7ac <__malloc_lock+0x8>)
 800a7a6:	f000 b811 	b.w	800a7cc <__retarget_lock_acquire_recursive>
 800a7aa:	bf00      	nop
 800a7ac:	20004d5c 	.word	0x20004d5c

0800a7b0 <__malloc_unlock>:
 800a7b0:	4801      	ldr	r0, [pc, #4]	; (800a7b8 <__malloc_unlock+0x8>)
 800a7b2:	f000 b80c 	b.w	800a7ce <__retarget_lock_release_recursive>
 800a7b6:	bf00      	nop
 800a7b8:	20004d5c 	.word	0x20004d5c

0800a7bc <_malloc_usable_size_r>:
 800a7bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7c0:	1f18      	subs	r0, r3, #4
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	bfbc      	itt	lt
 800a7c6:	580b      	ldrlt	r3, [r1, r0]
 800a7c8:	18c0      	addlt	r0, r0, r3
 800a7ca:	4770      	bx	lr

0800a7cc <__retarget_lock_acquire_recursive>:
 800a7cc:	4770      	bx	lr

0800a7ce <__retarget_lock_release_recursive>:
 800a7ce:	4770      	bx	lr

0800a7d0 <_init>:
 800a7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d2:	bf00      	nop
 800a7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7d6:	bc08      	pop	{r3}
 800a7d8:	469e      	mov	lr, r3
 800a7da:	4770      	bx	lr

0800a7dc <_fini>:
 800a7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7de:	bf00      	nop
 800a7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7e2:	bc08      	pop	{r3}
 800a7e4:	469e      	mov	lr, r3
 800a7e6:	4770      	bx	lr
